/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOComposedRoute : NSObject <GEOMapAccessRestrictions> {
    GEOMapRegion * _boundingMapRegion;
    unsigned int  _currentDisplayStep;
    struct { struct PolylineCoordinate { unsigned int x_1_1_1; float x_1_1_2; } x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; } * _currentManeuverDisplayEndPoints;
    NSArray * _currentSectionOptions;
    GEOTransitDecoderData * _decoderData;
    GEOComposedWaypoint * _destination;
    unsigned int  _distance;
    unsigned int  _expectedTime;
    unsigned int  _firstVisiblePoint;
    GEORoute * _geoRoute;
    BOOL  _hasCheckedIsWalkingOnlyTransitRoute;
    BOOL  _isWalkingOnlyTransitRoute;
    NSArray * _legs;
    NSString * _longTrafficDescription;
    unsigned int  _maneuverDisplayCount;
    BOOL  _maneuverDisplayEnabled;
    NSArray * _maneuverDisplaySteps;
    NSString * _name;
    NSHashTable * _observers;
    GEOComposedWaypoint * _origin;
    GEOTransitSuggestedRoute * _originalSuggestedRoute;
    <GEOServerFormattedString> * _overviewSubtitleFormatString;
    <GEOServerFormattedString> * _pickingDurationFormatString;
    <GEOServerFormattedString> * _planningDescriptionFormatString;
    NSData * _pointData;
    double * _pointLengths;
    <GEOServerFormattedString> * _previewDurationFormatString;
    NSArray * _rideSelections;
    NSData * _routeID;
    NSArray * _routePlanningArtworks;
    GEORouteSet * _routeSet;
    NSMutableArray * _sections;
    unsigned int  _selectedLegIndex;
    BOOL  _shouldShowSchedule;
    NSMutableArray * _snappedPaths;
    NSDate * _startDate;
    NSArray * _steps;
    GEOTransitSuggestedRoute * _suggestedRoute;
    NSString * _trafficDescription;
    NSArray * _trafficIncidentOffsets;
    NSArray * _trafficIncidents;
    NSArray * _transitAdvisories;
    <GEOServerFormattedString> * _transitDescriptionFormatString;
    unsigned int  _transitRouteBadge;
    <GEOTransitRoutingIncidentMessage> * _transitRoutingIncidentMessage;
    BOOL  _usesZilch;
    GEOZilchDecoder * _zilchDecoder;
}

@property (nonatomic, readonly) NSArray *advisoryNotices;
@property (nonatomic, readonly) BOOL allowsNetworkTileLoad;
@property (nonatomic, readonly) NSArray *baseTransitFares;
@property (nonatomic, readonly) GEOMapRegion *boundingMapRegion;
@property (nonatomic, readonly) void*controlPoints;
@property (nonatomic) unsigned int currentDisplayStep;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) GEOTransitDecoderData *decoderData;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) GEOComposedWaypoint *destination;
@property (nonatomic, readonly) NSData *directionsResponseID;
@property (nonatomic, readonly) unsigned int distance;
@property (nonatomic) unsigned int expectedTime;
@property (nonatomic) unsigned int firstVisiblePoint;
@property (nonatomic, readonly) GEORoute *geoRoute;
@property (nonatomic, readonly) BOOL hasExpectedTime;
@property (nonatomic, readonly) BOOL hasHistoricTravelTime;
@property (nonatomic, readonly) BOOL hasRideClusters;
@property (readonly) unsigned int hash;
@property (nonatomic) unsigned int historicTravelTime;
@property (nonatomic, readonly) unsigned int indexOfSuggestedRoute;
@property (nonatomic, readonly) BOOL isNavigable;
@property (nonatomic, readonly) BOOL isWalkingOnlyTransitRoute;
@property (nonatomic, readonly) NSArray *legs;
@property (nonatomic, readonly) NSString *longTrafficDescription;
@property (nonatomic, readonly) unsigned int maneuverDisplayCount;
@property (nonatomic) BOOL maneuverDisplayEnabled;
@property (nonatomic, retain) NSArray *maneuverDisplaySteps;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) unsigned int numberOfTransitStops;
@property (nonatomic, retain) GEOComposedWaypoint *origin;
@property (nonatomic, readonly) GEOTransitSuggestedRoute *originalSuggestedRoute;
@property (nonatomic, readonly) <GEOServerFormattedString> *overviewSubtitleFormatString;
@property (nonatomic, readonly) <GEOServerFormattedString> *pickingDurationFormatString;
@property (nonatomic, readonly) <GEOServerFormattedString> *planningDescriptionFormatString;
@property (nonatomic, readonly) unsigned int pointCount;
@property (nonatomic, readonly) double*pointLengths;
@property (nonatomic, readonly) <GEOServerFormattedString> *previewDurationFormatString;
@property (nonatomic, readonly) NSArray *rideSelections;
@property (nonatomic, readonly) GEORouteAttributes *routeAttributes;
@property (nonatomic, readonly) NSArray *routeDescriptions;
@property (nonatomic, retain) NSData *routeID;
@property (nonatomic, readonly) NSArray *routeNames;
@property (nonatomic, readonly, copy) NSArray *routePlanningArtworks;
@property (nonatomic) GEORouteSet *routeSet;
@property (nonatomic, readonly) int routeType;
@property (nonatomic, readonly) NSArray *sections;
@property (nonatomic) unsigned int selectedLegIndex;
@property (nonatomic) BOOL shouldShowSchedule;
@property (nonatomic, readonly) NSDate *startDate;
@property (nonatomic, readonly) NSArray *steps;
@property (nonatomic, readonly) unsigned int stepsCount;
@property (nonatomic, readonly) GEOStyleAttributes *styleAttributes;
@property (nonatomic, retain) GEOTransitSuggestedRoute *suggestedRoute;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned int*trafficColorOffsets;
@property (nonatomic, readonly) unsigned int trafficColorOffsetsCount;
@property (nonatomic, readonly) unsigned int*trafficColors;
@property (nonatomic, readonly) unsigned int trafficColorsCount;
@property (nonatomic, readonly) NSString *trafficDescription;
@property (nonatomic, retain) NSArray *trafficIncidentOffsets;
@property (nonatomic, retain) NSArray *trafficIncidents;
@property (nonatomic, readonly) NSArray *transitAdvisories;
@property (nonatomic, readonly) <GEOServerFormattedString> *transitDescriptionFormatString;
@property (nonatomic, readonly) unsigned int transitRouteBadge;
@property (nonatomic, readonly, retain) <GEOTransitRoutingIncidentMessage> *transitRoutingIncidentMessage;
@property (nonatomic, readonly) int transportType;
@property (nonatomic, retain) NSMapTable *turnAnglesLookup;
@property (nonatomic, readonly) BOOL usesZilch;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

- (void)_addPaths:(id)arg1 forObserver:(id)arg2;
- (void)_addSnappedPolylinePathsForSection:(id)arg1 toPaths:(id)arg2 rects:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 rectsCount:(unsigned long)arg4;
- (struct PolylineCoordinate { unsigned int x1; float x2; })_findRouteCoordinateWithOffset:(float)arg1 aPos:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg2 aCoord:(const struct PolylineCoordinate { unsigned int x1; float x2; }*)arg3 bCoord:(const struct PolylineCoordinate { unsigned int x1; float x2; }*)arg4 pointOnSegment:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg5 bounds:(const struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; }*)arg6;
- (void)_initializeManeuverDisplaySteps;
- (BOOL)_meetsMinimumPathLengthBetweenStart:(unsigned int)arg1 end:(unsigned int)arg2;
- (bool)_needsCornerOffsetAt:(unsigned int)arg1;
- (id)_nextOptionForOption:(id)arg1 rideIndex:(unsigned int)arg2;
- (void)_populateArtworkForSuggestedRoute:(id)arg1 decoderData:(id)arg2;
- (void)_rebuildRouteForRideChange;
- (void)_snapPaths:(id)arg1 completionHandler:(id /* block */)arg2;
- (unsigned int)_tripIndexForTripLeg:(id)arg1;
- (void)_updateSectionOptions;
- (void)addObserver:(id)arg1;
- (id)advisoryNotices;
- (BOOL)allowsNetworkTileLoad;
- (double)approximateRoadWidthAtPointIndex:(unsigned int)arg1;
- (id)baseTransitFares;
- (id)boardStepForSection:(id)arg1;
- (id)boundingMapRegion;
- (BOOL)checkDrivingArrivalForCoordinate:(struct { double x1; double x2; })arg1 coordinateOnRoute:(struct { double x1; double x2; })arg2 routePointIndex:(unsigned int)arg3 distanceFromRoute:(double)arg4 arrivalMapRegion:(id)arg5 checkArrivalRadius:(BOOL)arg6 checkDistanceAlongRoute:(BOOL)arg7 checkRoadAccessPoints:(BOOL)arg8 isOnRoute:(BOOL)arg9;
- (void)clearPoints;
- (void)clearSnappedPathsForObserver:(id)arg1;
- (void*)controlPoints;
- (struct PolylineCoordinate { unsigned int x1; float x2; })coordinateAtOffset:(double)arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })coordinateAtOffset:(double)arg1 fromRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2;
- (struct PolylineCoordinate { unsigned int x1; float x2; })coordinateAtOffset:(double)arg1 fromRoutePoint:(unsigned int)arg2;
- (double)courseAtRouteCoordinateIndex:(unsigned int)arg1;
- (unsigned int)currentDisplayStep;
- (void)dealloc;
- (id)decoderData;
- (id)description;
- (id)destination;
- (id)directionsResponseID;
- (unsigned int)distance;
- (double)distanceBetweenLocation:(struct { double x1; double x2; })arg1 nextPointIndex:(unsigned int)arg2 toPointIndex:(unsigned int)arg3;
- (double)distanceBetweenRoutePointIndex:(unsigned int)arg1 toPointIndex:(unsigned int)arg2;
- (double)distanceBetweenStep:(id)arg1 andStep:(id)arg2;
- (double)distanceFromPoint:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1 toPoint:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2;
- (double)distanceFromPointIndex:(unsigned int)arg1 toPointIndex:(unsigned int)arg2;
- (unsigned int)expectedTime;
- (id)firstDepartureTimeOfNextRouteStepAfterCurrentStep;
- (unsigned int)firstVisiblePoint;
- (void)forEachSnappedPath:(id /* block */)arg1;
- (int)formOfWayAt:(unsigned int)arg1;
- (id)geoRoute;
- (void)getFormOfWay:(int*)arg1 roadClass:(int*)arg2 at:(unsigned int)arg3;
- (id)getHallForStop:(id)arg1;
- (id)getSnappedPathsForLocation:(struct { double x1; double x2; })arg1 observer:(id)arg2;
- (id)getSnappedPathsForVisibleRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 rectsToSnap:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 rectsToSnapCount:(unsigned long)arg3 observer:(id)arg4;
- (id)getStationForHall:(id)arg1;
- (id)getStationForStop:(id)arg1;
- (BOOL)hasExpectedTime;
- (BOOL)hasHistoricTravelTime;
- (BOOL)hasRideClusters;
- (unsigned int)historicTravelTime;
- (unsigned int)indexOfSuggestedRoute;
- (void)initRideSelections;
- (id)initWithCompanionRoute:(id)arg1;
- (id)initWithRoute:(id)arg1;
- (id)initWithSuggestedRoute:(id)arg1 decoderData:(id)arg2;
- (void)initializePointLengths;
- (BOOL)isNavigable;
- (BOOL)isSnapping;
- (BOOL)isStopInTerminalStructure:(id)arg1;
- (BOOL)isWalkingOnlyTransitRoute;
- (id)legForPointIndex:(unsigned int)arg1;
- (id)legForStepIndex:(unsigned int)arg1;
- (unsigned int)legIndexForPointIndex:(unsigned int)arg1;
- (unsigned int)legIndexForStepIndex:(unsigned int)arg1;
- (id)legs;
- (struct { double x1; double x2; })locationAtDistance:(double)arg1 from:(id)arg2;
- (id)longTrafficDescription;
- (unsigned int)maneuverDisplayCount;
- (BOOL)maneuverDisplayEnabled;
- (struct { struct PolylineCoordinate { unsigned int x_1_1_1; float x_1_1_2; } x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; })maneuverDisplayEndpointsAtIndex:(unsigned long)arg1;
- (void)maneuverDisplayHasChanged;
- (id)maneuverDisplaySteps;
- (id)name;
- (void)notifyTrafficUpdated;
- (unsigned int)numberOfTransitStops;
- (id)origin;
- (id)originalSuggestedRoute;
- (id)overviewSubtitleFormatString;
- (id)pickingDurationFormatString;
- (id)planningDescriptionFormatString;
- (struct { double x1; double x2; })pointAt:(unsigned int)arg1;
- (struct { double x1; double x2; })pointAtRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (unsigned int)pointCount;
- (id)pointData;
- (double*)pointLengths;
- (id)previewDurationFormatString;
- (double)remainingDistanceAlongRouteFromStepIndex:(unsigned int)arg1 currentStepRemainingDistance:(double)arg2;
- (double)remainingTimeAlongRouteFromStepIndex:(unsigned int)arg1 currentStepRemainingDistance:(double)arg2;
- (void)removeObserver:(id)arg1;
- (id)rideSelections;
- (struct { struct { id x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned long long x_1_1_7; BOOL x_1_1_8; unsigned long long x_1_1_9; float x_1_1_10; unsigned long long x_1_1_11; id x_1_1_12; } x1; unsigned int x2; unsigned int x3; int x4; int x5; int x6; unsigned int x7; unsigned int x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; BOOL x13; unsigned char x14; BOOL x15; BOOL x16; unsigned char x17; BOOL x18; unsigned char x19; struct _NSRange { unsigned int x_20_1_1; unsigned int x_20_1_2; } x20; BOOL x21; }*)roadFeatureAtPointIndex:(unsigned int)arg1;
- (void)roadFeaturesForRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1 distanceAhead:(double)arg2 handler:(id /* block */)arg3;
- (id)routeAttributes;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeCoordinateAtDistance:(double)arg1 beforeRouteCoordinate:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2;
- (id)routeDescriptions;
- (id)routeID;
- (id)routeMatchAtDistance:(double)arg1 from:(id)arg2 stopAtEndOfTunnel:(BOOL)arg3 stopAtEndOfManeuver:(BOOL)arg4 date:(id)arg5;
- (id)routeNames;
- (id)routePlanningArtworks;
- (id)routeSet;
- (int)routeType;
- (id)sectionOptionForTripIndex:(unsigned int)arg1;
- (id)sectionOptionForTripLeg:(id)arg1;
- (id)sections;
- (void)selectRide:(unsigned int)arg1 forBoardStep:(id)arg2;
- (void)selectRide:(unsigned int)arg1 forTripLeg:(id)arg2;
- (unsigned int)selectedLegIndex;
- (void)setBoundingMapRegion:(id)arg1;
- (void)setCurrentDisplayStep:(unsigned int)arg1;
- (void)setDestination:(id)arg1;
- (void)setExpectedTime:(unsigned int)arg1;
- (void)setFirstVisiblePoint:(unsigned int)arg1;
- (void)setHistoricTravelTime:(unsigned int)arg1;
- (void)setIsWalkingOnlyTransitRoute:(BOOL)arg1;
- (void)setLegs:(id)arg1;
- (void)setManeuverDisplayEnabled:(BOOL)arg1;
- (void)setManeuverDisplaySteps:(id)arg1;
- (void)setOrigin:(id)arg1;
- (void)setPointData:(id)arg1;
- (void)setRouteID:(id)arg1;
- (void)setRouteSet:(id)arg1;
- (void)setSections:(id)arg1;
- (void)setSelectedLegIndex:(unsigned int)arg1;
- (void)setShouldShowSchedule:(BOOL)arg1;
- (void)setSteps:(id)arg1;
- (void)setSuggestedRoute:(id)arg1;
- (void)setTrafficIncidentOffsets:(id)arg1;
- (void)setTrafficIncidents:(id)arg1;
- (void)setUsesZilch:(BOOL)arg1;
- (void)setupRoadSegmentIdsForRouteHintFromMatch:(id)arg1 distanceAhead:(double)arg2 roadSegmentIdGenerator:(id /* block */)arg3 handler:(id /* block */)arg4;
- (BOOL)shouldShowSchedule;
- (id)startDate;
- (id)stepAtIndex:(unsigned int)arg1;
- (double)stepDistanceFromPoint:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1 toPoint:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2;
- (id)stepForPointIndex:(unsigned int)arg1;
- (unsigned int)stepIndexForPointIndex:(unsigned int)arg1;
- (id)steps;
- (unsigned int)stepsCount;
- (id)styleAttributes;
- (id)suggestedRoute;
- (BOOL)supportsSnapping;
- (unsigned int)trafficColorOffsetAtIndex:(unsigned int)arg1;
- (unsigned int*)trafficColorOffsets;
- (unsigned int)trafficColorOffsetsCount;
- (unsigned int*)trafficColors;
- (unsigned int)trafficColorsCount;
- (id)trafficDescription;
- (id)trafficIncidentOffsets;
- (id)trafficIncidents;
- (id)transitAdvisories;
- (id)transitDescriptionFormatString;
- (unsigned int)transitRouteBadge;
- (id)transitRoutingIncidentMessage;
- (int)transportType;
- (int)transportTypeForStep:(id)arg1;
- (void)updateManeuverDisplayEndpointsAtMetersPerPoint:(double)arg1;
- (void)updateManeuverDisplayEndpointsAtMetersPerPoint:(double)arg1 startOffsetInPoints:(double)arg2 endOffsetInPoints:(double)arg3 roadWidthInPoints:(double)arg4;
- (BOOL)usesZilch;
- (id)zilchDataFromStepIndex:(unsigned int)arg1;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

- (struct CGImage { }*)_mapKitImage;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

- (int)cameraFocusStyleForStep:(id)arg1;
- (void)setTurnAnglesLookup:(id)arg1;
- (id)turnAnglesLookup;

@end
