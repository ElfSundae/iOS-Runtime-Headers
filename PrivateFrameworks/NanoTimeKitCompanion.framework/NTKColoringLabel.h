/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoTimeKitCompanion.framework/NanoTimeKitCompanion
 */

@interface NTKColoringLabel : NTKLegibilityLabel <CLKUILabel, NTKColoringView, NTKTimeTravelState> {
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  _cachedOpticalEdgeInsets;
    BOOL  _cachedOpticalEdgeInsetsIsValid;
    struct CGSize { 
        float width; 
        float height; 
    }  _cachedSingleLineSize;
    BOOL  _cachedSizeIsValid;
    _NTKColorManager * _colorManager;
    BOOL  _inTimeTravel;
    float  _maxWidth;
    id /* block */  _needsResizeHandler;
    id /* block */  _nowProvider;
    unsigned int  _options;
    UIColor * _overrideColor;
    NSParagraphStyle * _paragraphStyle;
    CLKFont * _preTimeTravelFont;
    CLKTextProvider * _textProvider;
    CLKFont * _textProviderFont;
    CLKFont * _textProviderSmallCapsBaseFont;
    struct NSNumber { Class x1; } * _updateToken;
    BOOL  _updatedAfterTimeTravelStateChange;
    BOOL  _uppercase;
}

@property (nonatomic, readonly) float _lastLineBaseline;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic, retain) UIColor *color;
@property (nonatomic, readonly) UIColor *contentColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIFont *font;
@property (readonly) unsigned int hash;
@property (nonatomic) BOOL inTimeTravel;
@property (nonatomic) float maxWidth;
@property (nonatomic, copy) id /* block */ needsResizeHandler;
@property (nonatomic, copy) id /* block */ nowProvider;
@property (nonatomic, readonly) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } opticalInsets;
@property (nonatomic, readonly) unsigned int options;
@property (nonatomic, retain) UIColor *overrideColor;
@property (nonatomic, copy) NSParagraphStyle *paragraphStyle;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) int textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, retain) CLKTextProvider *textProvider;
@property (nonatomic, retain) CLKFont *textProviderFont;
@property (nonatomic, retain) CLKFont *textProviderSmallCapsBaseFont;
@property (nonatomic) BOOL uppercase;
@property (nonatomic) BOOL usesLegibility;

+ (id)labelWithOptions:(unsigned int)arg1;

- (void).cxx_destruct;
- (id)_activeFont;
- (id)_font;
- (id)_fontWithMonospaceNumbers:(id)arg1;
- (float)_lastLineBaseline;
- (void)_requeryTextProviderAndNotify:(BOOL)arg1;
- (BOOL)_shouldAnimatePropertyWithKey:(id)arg1;
- (BOOL)_wantsDynamicTracking;
- (id)color;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (BOOL)inTimeTravel;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 options:(unsigned int)arg2;
- (void)invalidateCachedSize;
- (float)maxWidth;
- (id /* block */)needsResizeHandler;
- (id /* block */)nowProvider;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })opticalInsets;
- (unsigned int)options;
- (id)overrideColor;
- (id)paragraphStyle;
- (void)setAttributedText:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setColor:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setInTimeTravel:(BOOL)arg1;
- (void)setMaxWidth:(float)arg1;
- (void)setNeedsResizeHandler:(id /* block */)arg1;
- (void)setNowProvider:(id /* block */)arg1;
- (void)setOverrideColor:(id)arg1;
- (void)setParagraphStyle:(id)arg1;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setText:(id)arg1;
- (void)setTextProvider:(id)arg1;
- (void)setTextProviderFont:(id)arg1;
- (void)setTextProviderSmallCapsBaseFont:(id)arg1;
- (void)setUppercase:(BOOL)arg1;
- (void)setUsesLegibility:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (void)sizeToFit;
- (id)textProvider;
- (id)textProviderFont;
- (id)textProviderSmallCapsBaseFont;
- (BOOL)uppercase;
- (BOOL)usesLegibility:(BOOL)arg1;
- (float)widthForMaxWidth:(float)arg1;
- (float)widthForMaxWidth:(float)arg1 withFont:(id)arg2;
- (float)widthForMaxWidth:(float)arg1 withFont:(id)arg2 smallCapsBaseFont:(id)arg3;

@end
