/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MetalTools.framework/MetalTools
 */

@interface MTLToolsTexture : MTLToolsResource <MTLTextureImplementation> {
    <MTLBuffer> * _buffer;
    <MTLTexture> * _parentTexture;
    MTLToolsPointerArray * _views;
}

@property (readonly) unsigned int arrayLength;
@property (readonly) <MTLBuffer> *buffer;
@property (readonly) unsigned int bufferBytesPerRow;
@property (readonly) unsigned int bufferOffset;
@property (readonly) MTLResourceAllocationInfo *cachedAllocationInfo;
@property (readonly) unsigned int cpuCacheMode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly) unsigned int depth;
@property (readonly, copy) NSString *description;
@property (readonly) <MTLDevice> *device;
@property (getter=isFramebufferOnly, readonly) BOOL framebufferOnly;
@property (readonly) unsigned int hash;
@property (readonly) <MTLHeap> *heap;
@property (readonly) unsigned int height;
@property (readonly) struct __IOSurface { }*iosurface;
@property (readonly) unsigned int iosurfacePlane;
@property (readonly) BOOL isDrawable;
@property (copy) NSString *label;
@property (readonly) unsigned int mipmapLevelCount;
@property (readonly) unsigned int numFaces;
@property (readonly) unsigned int parentRelativeLevel;
@property (readonly) unsigned int parentRelativeSlice;
@property (readonly) <MTLTexture> *parentTexture;
@property (readonly) unsigned int pixelFormat;
@property int responsibleProcess;
@property (readonly) <MTLResource> *rootResource;
@property (readonly) unsigned int rotation;
@property (readonly) unsigned int sampleCount;
@property (readonly) MTLResourceAllocationInfo *sharedAllocationInfo;
@property (readonly) unsigned int storageMode;
@property (readonly) Class superclass;
@property unsigned int swizzle;
@property (readonly) unsigned int textureType;
@property (readonly) unsigned int usage;
@property (nonatomic, readonly) MTLToolsPointerArray *views;
@property (readonly) unsigned int width;

- (void).cxx_destruct;
- (void)acceptVisitor:(id)arg1;
- (unsigned int)arrayLength;
- (id)buffer;
- (unsigned int)bufferBytesPerRow;
- (unsigned int)bufferOffset;
- (BOOL)canGenerateMipmapLevels;
- (void)copyFromPixels:(const void*)arg1 rowBytes:(unsigned int)arg2 imageBytes:(unsigned int)arg3 toSlice:(unsigned int)arg4 mipmapLevel:(unsigned int)arg5 origin:(struct { unsigned int x1; unsigned int x2; unsigned int x3; })arg6 size:(struct { unsigned int x1; unsigned int x2; unsigned int x3; })arg7;
- (void)copyFromSlice:(unsigned int)arg1 mipmapLevel:(unsigned int)arg2 origin:(struct { unsigned int x1; unsigned int x2; unsigned int x3; })arg3 size:(struct { unsigned int x1; unsigned int x2; unsigned int x3; })arg4 toPixels:(void*)arg5 rowBytes:(unsigned int)arg6 imageBytes:(unsigned int)arg7;
- (unsigned int)depth;
- (id)formattedDescription:(unsigned int)arg1;
- (void)generateMipmapLevel:(unsigned int)arg1 slice:(unsigned int)arg2;
- (void)getBytes:(void*)arg1 bytesPerRow:(unsigned int)arg2 bytesPerImage:(unsigned int)arg3 fromRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg4 mipmapLevel:(unsigned int)arg5 slice:(unsigned int)arg6;
- (void)getBytes:(void*)arg1 bytesPerRow:(unsigned int)arg2 bytesPerImage:(unsigned int)arg3 fromRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg4 mipmapLevel:(unsigned int)arg5 slice:(unsigned int)arg6 options:(unsigned int)arg7;
- (void)getBytes:(void*)arg1 bytesPerRow:(unsigned int)arg2 fromRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg3 mipmapLevel:(unsigned int)arg4;
- (unsigned int)height;
- (id)initWithBaseObject:(id)arg1 parent:(id)arg2;
- (id)initWithBaseObject:(id)arg1 parent:(id)arg2 buffer:(id)arg3;
- (id)initWithBaseObject:(id)arg1 parent:(id)arg2 parentTexture:(id)arg3;
- (id)initWithBaseObject:(id)arg1 strongParent:(id)arg2;
- (struct __IOSurface { }*)iosurface;
- (unsigned int)iosurfacePlane;
- (BOOL)isDrawable;
- (BOOL)isFramebufferOnly;
- (unsigned int)mipmapLevelCount;
- (id)newCompressedTextureViewWithPixelFormat:(unsigned int)arg1 textureType:(unsigned int)arg2 level:(unsigned int)arg3 slice:(unsigned int)arg4;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1 textureType:(unsigned int)arg2 levels:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 slices:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1 textureType:(unsigned int)arg2 levels:(struct _NSRange { unsigned int x1; unsigned int x2; })arg3 slices:(struct _NSRange { unsigned int x1; unsigned int x2; })arg4 swizzle:(unsigned int)arg5;
- (unsigned int)numFaces;
- (unsigned int)parentRelativeLevel;
- (unsigned int)parentRelativeSlice;
- (id)parentTexture;
- (unsigned int)pixelFormat;
- (void)replaceRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg1 mipmapLevel:(unsigned int)arg2 slice:(unsigned int)arg3 withBytes:(const void*)arg4 bytesPerRow:(unsigned int)arg5 bytesPerImage:(unsigned int)arg6;
- (void)replaceRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg1 mipmapLevel:(unsigned int)arg2 slice:(unsigned int)arg3 withBytes:(const void*)arg4 bytesPerRow:(unsigned int)arg5 bytesPerImage:(unsigned int)arg6 options:(unsigned int)arg7;
- (void)replaceRegion:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; })arg1 mipmapLevel:(unsigned int)arg2 withBytes:(const void*)arg3 bytesPerRow:(unsigned int)arg4;
- (id)rootResource;
- (unsigned int)rotation;
- (unsigned int)sampleCount;
- (void)setSwizzle:(unsigned int)arg1;
- (unsigned int)swizzle;
- (unsigned int)textureType;
- (unsigned int)usage;
- (id)views;
- (unsigned int)width;

@end
