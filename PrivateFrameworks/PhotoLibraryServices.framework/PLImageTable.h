/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@interface PLImageTable : NSObject <PLThumbPersistenceManager> {
    NSMutableArray *_allSegments;
    BOOL _dying;
    int _entryCount;
    int _entryLength;
    int _fid;
    long long _fileLength;
    int _format;
    int _imageLength;
    int _imageRowBytes;
    NSString *_path;
    NSObject<OS_dispatch_queue> *_preheatIndexIsolation;
    NSMutableIndexSet *_preheatIndexes;
    NSObject<OS_dispatch_queue> *_preheatQueue;
    BOOL _readOnly;
    int _segmentCount;
    unsigned long _segmentLength;
    struct CGSize { 
        float width; 
        float height; 
    } _thumbnailSize;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) int imageFormat;
@property (nonatomic, readonly) int imageHeight;
@property (nonatomic, readonly) int imageLength;
@property (nonatomic, readonly) int imageRowBytes;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } imageSize;
@property (nonatomic, readonly) int imageWidth;
@property (nonatomic, readonly) BOOL isReadOnly;
@property (nonatomic, readonly) NSString *path;
@property (nonatomic, readonly) NSDictionary *photoUUIDToIndexMap;
@property (readonly) Class superclass;

+ (void)releaseSegmentCache;
+ (void)writeImage:(id)arg1 toData:(id*)arg2 thumbnailFormat:(int)arg3 videoDuration:(id)arg4 width:(int*)arg5 height:(int*)arg6 bytesPerRow:(int*)arg7 dataWidth:(int*)arg8 dataHeight:(int*)arg9 dataOffset:(int*)arg10;

- (void)_addEntriesIfNecessaryForIndex:(int)arg1;
- (void)_adviseWillNeedEntriesInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (BOOL)_compactWithOccupiedIndexes:(id)arg1 outPhotoUUIDToIndexMap:(id*)arg2;
- (id)_debugDescription;
- (void)_doPreheatWithCompletionHandler:(id /* block */)arg1;
- (int)_fileDescriptor;
- (void)_flushEntryAtAddress:(void*)arg1;
- (void)_flushEntryAtAddress:(void*)arg1 count:(int)arg2;
- (id)_getAndClearPreheatIndexes;
- (void)_releaseSegment:(id)arg1;
- (void)_releaseSegmentAtIndex:(int)arg1;
- (void)_reloadSegmentAtIndex:(int)arg1;
- (id)_segmentAtIndex:(int)arg1;
- (unsigned long)_segmentLength;
- (void)_setEntryCount:(int)arg1;
- (void)_updateSegmentCount;
- (void)_verifyThumbnailDataForIndex:(unsigned int)arg1 uuid:(id)arg2;
- (id)beginThumbnailSafePropertyUpdatesOnAsset:(id)arg1;
- (void)compactWithOccupiedIndexes:(id)arg1;
- (BOOL)copyEntryFromOriginalAsset:(id)arg1 toAsset:(id)arg2;
- (id)dataForEntryAtIndex:(unsigned int)arg1 createIfNeeded:(BOOL)arg2;
- (void)dealloc;
- (void)deleteEntryWithIdentifier:(id)arg1 orIndex:(unsigned int)arg2 uuid:(id)arg3;
- (void)endThumbnailSafePropertyUpdatesOnAsset:(id)arg1 withToken:(id)arg2;
- (int)entryCount;
- (void)finishUnicornEntryAtIndex:(unsigned int)arg1 withImageData:(id)arg2 imageSize:(struct CGSize { float x1; float x2; })arg3 asset:(id)arg4;
- (id)imageDataAtIndex:(unsigned int)arg1 width:(int*)arg2 height:(int*)arg3 bytesPerRow:(int*)arg4 dataWidth:(int*)arg5 dataHeight:(int*)arg6 dataOffset:(int*)arg7;
- (id)imageDataWithIdentifier:(id)arg1 orIndex:(unsigned int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 dataOffset:(int*)arg8;
- (int)imageFormat;
- (int)imageHeight;
- (int)imageLength;
- (int)imageRowBytes;
- (struct CGSize { float x1; float x2; })imageSize;
- (int)imageWidth;
- (id)initWithPath:(id)arg1 imageFormat:(int)arg2;
- (id)initWithPath:(id)arg1 imageFormat:(int)arg2 readOnly:(BOOL)arg3;
- (BOOL)isReadOnly;
- (id)originalPreheatItemForAsset:(id)arg1 optimalSourcePixelSize:(struct CGSize { float x1; float x2; })arg2 options:(unsigned int)arg3;
- (id)path;
- (id)photoUUIDToIndexMap;
- (id)preflightCompactionWithOccupiedIndexes:(id)arg1;
- (void)preheatImageDataAtIndex:(unsigned int)arg1 completionHandler:(id /* block */)arg2;
- (void)preheatImageDataAtIndexes:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)preheatItemForAsset:(id)arg1 format:(int)arg2 optimalSourcePixelSize:(struct CGSize { float x1; float x2; })arg3 options:(unsigned int)arg4;
- (void)setImageDataForEntry:(const void*)arg1 withIdentifier:(id)arg2 orIndex:(unsigned int)arg3 asset:(id)arg4;
- (void)setImageForEntry:(id)arg1 withIdentifier:(id)arg2 orIndex:(unsigned int)arg3 videoDuration:(id)arg4 photoUUID:(id)arg5;
- (BOOL)usesThumbIdentifiers;

@end
