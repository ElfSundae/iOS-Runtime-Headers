/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit
 */

@interface AKGeometryHelper : NSObject {
    AKPageController * _pageController;
}

@property AKPageController *pageController;

+ (struct CGPoint { float x1; float x2; })_alignedPointForPoint:(struct CGPoint { float x1; float x2; })arg1 alignToContent:(BOOL)arg2 alignToScreenUsingPageController:(id)arg3 orAlignToBitmapContext:(struct CGContext { }*)arg4 usingAnnotation:(id)arg5;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_alignedStableRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 alignToContent:(BOOL)arg2 alignToScreenUsingPageController:(id)arg3 orAlignToBitmapContext:(struct CGContext { }*)arg4 usingAnnotation:(id)arg5;
+ (void)_checkIntersectionOfLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 endingAt:(struct CGPoint { float x1; float x2; })arg2 withCircleAt:(struct CGPoint { float x1; float x2; })arg3 andRadius:(float)arg4 results:(id)arg5;
+ (void)_collectIntersectionsOfLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 endingAt:(struct CGPoint { float x1; float x2; })arg2 withCornerCirclesOfRoundedRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 withRadius:(float)arg4 results:(id)arg5;
+ (id)_cornersOfRotatedRectangle:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 angle:(float)arg2;
+ (struct CGPoint { float x1; float x2; })_farthestPointFrom:(struct CGPoint { float x1; float x2; })arg1 inArray:(id)arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })_rawAffineTransformForExifOrientation:(int)arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_rectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 alignToContent:(BOOL)arg2 alignToScreenUsingPageController:(id)arg3 orAlignToBitmapContext:(struct CGContext { }*)arg4 usingAnnotation:(id)arg5 withAlignmentBlock:(id /* block */)arg6;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_strokeAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withStrokeWidth:(float)arg2 shouldAlignStrictlyToScreen:(BOOL)arg3 alignToScreenUsingPageController:(id)arg4 orAlignToBitmapContext:(struct CGContext { }*)arg5 usingAnnotation:(id)arg6;
+ (void)adjustOriginalExifOrientationOnAnnotation:(id)arg1 flatteningOriginalModelExif:(int)arg2;
+ (struct CGPoint { float x1; float x2; })adjustPoint:(struct CGPoint { float x1; float x2; })arg1 forExifOrientation:(int)arg2 aboutCenter:(struct CGPoint { float x1; float x2; })arg3;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })adjustRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forExifOrientation:(int)arg2 aboutCenter:(struct CGPoint { float x1; float x2; })arg3;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })affineTransformFlatteningOriginalModelExif:(int)arg1 withOriginalModelSize:(struct CGSize { float x1; float x2; })arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })affineTransformForExifOrientation:(int)arg1 aboutCenter:(struct CGPoint { float x1; float x2; })arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })affineTransformRecenteringAboutOriginForExifOrientation:(int)arg1 withOriginalSize:(struct CGSize { float x1; float x2; })arg2;
+ (float)angleBetweenPoint:(struct CGPoint { float x1; float x2; })arg1 andPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (float)angleOfVector:(struct CGVector { float x1; float x2; })arg1;
+ (BOOL)annotationHasRotation:(id)arg1 outAngle:(float*)arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsOfRotatedRectangle:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 angle:(float)arg2;
+ (struct CGPoint { float x1; float x2; })centerOfRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })centeredCircleToEllipseTransform:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct CGPoint { float x1; float x2; })compareVectorDirectionsFirstVector:(struct CGPoint { float x1; float x2; })arg1 secondVector:(struct CGPoint { float x1; float x2; })arg2;
+ (int)concatExifOrientation:(int)arg1 withExifOrientation:(int)arg2;
+ (struct CGPoint { float x1; float x2; })convertModelToScreenOrientationForPoint:(struct CGPoint { float x1; float x2; })arg1 relativeToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 withPageController:(id)arg3;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertModelToScreenOrientationForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withPageController:(id)arg2;
+ (struct CGPoint { float x1; float x2; })convertScreenToModelOrientationForPoint:(struct CGPoint { float x1; float x2; })arg1 relativeToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 withPageController:(id)arg3;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertScreenToModelOrientationForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withPageController:(id)arg2;
+ (float)distanceBetweenPoints:(struct CGPoint { float x1; float x2; })arg1 andPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (unsigned int)draggableArea:(unsigned int)arg1 convertedForExif:(int)arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })effectiveDrawingBoundsForAnnotation:(id)arg1 forDisplay:(BOOL)arg2 pageControllerOrNil:(id)arg3 outScaleFactor:(float*)arg4;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })ellipseToCenteredCircleTransform:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (BOOL)exifOrientationHasFlip:(int)arg1;
+ (BOOL)exifOrientationHasReversedAxes:(int)arg1;
+ (int)exifOrientationWithConversionBlock:(id /* block */)arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })expandCGRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toContainPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (struct CGPoint { float x1; float x2; })flipPointVertically:(struct CGPoint { float x1; float x2; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })horizontalFlipTransformForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })integralRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOptions:(unsigned long long)arg2;
+ (void)intersectCircleAtPoint:(struct CGPoint { float x1; float x2; })arg1 withRadius:(float)arg2 withCircleAtPoint:(struct CGPoint { float x1; float x2; })arg3 withRadius:(float)arg4 firstOutPoint:(struct CGPoint { float x1; float x2; }*)arg5 secondOutPoint:(struct CGPoint { float x1; float x2; }*)arg6;
+ (struct CGPoint { float x1; float x2; })intersectLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withAnotherSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg3 ending:(struct CGPoint { float x1; float x2; })arg4;
+ (struct CGPoint { float x1; float x2; })intersectLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withCircleWithCenter:(struct CGPoint { float x1; float x2; })arg3 andRadius:(float)arg4 farthestResult:(BOOL)arg5;
+ (struct CGPoint { float x1; float x2; })intersectLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withEllipseOfRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 farthestResult:(BOOL)arg4;
+ (struct CGPoint { float x1; float x2; })intersectLineSegmentStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 andRoundedCornerRadius:(float)arg4;
+ (struct CGPoint { float x1; float x2; })intersectRayStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withCircleWithCenter:(struct CGPoint { float x1; float x2; })arg3 andRadius:(float)arg4 farthestResult:(BOOL)arg5;
+ (struct CGPoint { float x1; float x2; })intersectRayStartingAt:(struct CGPoint { float x1; float x2; })arg1 ending:(struct CGPoint { float x1; float x2; })arg2 withEllipseOfRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 farthestResult:(BOOL)arg4;
+ (int)inverseExifOrientation:(int)arg1;
+ (BOOL)isPoint:(struct CGPoint { float x1; float x2; })arg1 onEllipse:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
+ (BOOL)isPointOnLeft:(struct CGPoint { float x1; float x2; })arg1 ofRayWithFirstPoint:(struct CGPoint { float x1; float x2; })arg2 andSecondPoint:(struct CGPoint { float x1; float x2; })arg3;
+ (BOOL)isUnpresentablePoint:(struct CGPoint { float x1; float x2; })arg1;
+ (BOOL)isUnpresentableRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (float)lengthOfVector:(struct CGVector { float x1; float x2; })arg1;
+ (struct CGPath { }*)newPathWithPath:(struct CGPath { }*)arg1 applyingExifOrientation:(int)arg2 aboutCenter:(struct CGPoint { float x1; float x2; })arg3;
+ (struct CGVector { float x1; float x2; })normalizeVector:(struct CGVector { float x1; float x2; })arg1;
+ (struct CGPoint { float x1; float x2; })normalizeVectorPoint:(struct CGPoint { float x1; float x2; })arg1;
+ (struct CGPoint { float x1; float x2; })pointAtAngle:(float)arg1 inCircleWithCenter:(struct CGPoint { float x1; float x2; })arg2 andRadius:(float)arg3;
+ (struct CGPoint { float x1; float x2; })projectPoint:(struct CGPoint { float x1; float x2; })arg1 ontoRayWithFirstPoint:(struct CGPoint { float x1; float x2; })arg2 andSecondPoint:(struct CGPoint { float x1; float x2; })arg3;
+ (struct CGPoint { float x1; float x2; })projectVector:(struct CGPoint { float x1; float x2; })arg1 ontoAspectVector:(struct CGPoint { float x1; float x2; })arg2;
+ (float)radiusOfCenteredCircleFor:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectForSize:(struct CGSize { float x1; float x2; })arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectWithSize:(struct CGSize { float x1; float x2; })arg1 centeredAtPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })renderingAlignedTextRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 alignToScreenUsingPageController:(id)arg2 orAlignToContext:(struct CGContext { }*)arg3 usingAnnotation:(id)arg4;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })renderingStrokeAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withStrokeWidth:(float)arg2 alignToScreenUsingPageController:(id)arg3 orAlignToContext:(struct CGContext { }*)arg4 usingAnnotation:(id)arg5;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })rotationTransformAroundPoint:(struct CGPoint { float x1; float x2; })arg1 withAngle:(float)arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })rotationTransformForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withAngle:(float)arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })rotationTransformForRectangularAnnotation:(id)arg1 hasRotation:(BOOL*)arg2;
+ (float)scaleOfTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
+ (struct CGPoint { float x1; float x2; })snapVector:(struct CGPoint { float x1; float x2; })arg1 toDiagonalForAspectRatio:(float)arg2 ignoreWidth:(BOOL)arg3 ignoreHeight:(BOOL)arg4;
+ (struct CGPoint { float x1; float x2; })snapVectorTo45Degrees:(struct CGPoint { float x1; float x2; })arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })stableIntegralRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (struct CGPoint { float x1; float x2; })tangentOfEllipse:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 throughRayWithFirstPoint:(struct CGPoint { float x1; float x2; })arg2 goingThrough:(struct CGPoint { float x1; float x2; })arg3;
+ (void)tangentPointsToEllipse:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromPoint:(struct CGPoint { float x1; float x2; })arg2 firstOutPoint:(struct CGPoint { float x1; float x2; }*)arg3 secondOutPoint:(struct CGPoint { float x1; float x2; }*)arg4;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })verticalFlipTransformForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (id)verticesOfPolygonWithPointCount:(unsigned int)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 rotation:(float)arg3 flippedVertically:(BOOL)arg4;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_clippingFrameForView:(id)arg1;
- (id)_rootLayer;
- (BOOL)_shouldAlignToContent;
- (BOOL)_shouldAlignToScreen;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_smartAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })adornmentLayerFrameForAnnotation:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })annotationLayerFrameForAnnotation:(id)arg1 layerIsClipped:(BOOL*)arg2;
- (struct CGPoint { float x1; float x2; })contentAlignedPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 fromModelToLayer:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromModelToLayer:(id)arg2;
- (id)initWithPageController:(id)arg1;
- (id)pageController;
- (struct CGPoint { float x1; float x2; })screenPixelAlignedPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })screenPixelAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })screenStrokeAlignedRectForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withStrokeWidth:(float)arg2;
- (void)setPageController:(id)arg1;

@end
