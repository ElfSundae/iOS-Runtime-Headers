/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoAudioControl.framework/NanoAudioControl
 */

@interface NACVolumeControllerProxy : NSObject <NACVolumeController> {
    float _EUVolumeLimit;
    NSString *_category;
    <NACVolumeControllerDelegate> *_delegate;
    NSNumber *_hapticIntensity;
    NACEventThrottler *_hapticThrottler;
    BOOL _isObserving;
    float _lastReceivedVolumeValue;
    float _lastRecievedHapticIntensity;
    BOOL _muted;
    NSObject<OS_dispatch_source> *_setHapticTimer;
    NSObject<OS_dispatch_source> *_setVolumeTimer;
    BOOL _systemMuted;
    BOOL _volumeControlAvailable;
    NACEventThrottler *_volumeThrottler;
    NSNumber *_volumeValue;
    BOOL _volumeWarningEnabled;
    NACXPCClient *_xpcClient;
}

@property (nonatomic, readonly) float EUVolumeLimit;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NACVolumeControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) float hapticIntensity;
@property (readonly) unsigned int hash;
@property (getter=isMuted, nonatomic, readonly) BOOL muted;
@property (readonly) Class superclass;
@property (getter=isSystemMuted, nonatomic) BOOL systemMuted;
@property (getter=isVolumeControlAvailable, nonatomic, readonly) BOOL volumeControlAvailable;
@property (nonatomic, readonly) float volumeValue;
@property (getter=isVolumeWarningEnabled, nonatomic, readonly) BOOL volumeWarningEnabled;

- (void).cxx_destruct;
- (float)EUVolumeLimit;
- (void)_EUVolumeLimitDidChange;
- (void)_applicationDidBecomeActiveNotification:(id)arg1;
- (void)_applicationWillResignActiveNotification:(id)arg1;
- (void)_cancelSetHapticTimer;
- (void)_cancelSetVolumeTimer;
- (void)_hapticIntensityDidChange;
- (void)_hapticTimeout;
- (void)_mutedStateDidChange;
- (void)_notifyDelegateHapticChanged;
- (void)_notifyDelegateSystemMutedStateChanged;
- (void)_notifyDelegateVolumeChanged;
- (id)_scheduleTimeoutWithBlock:(id /* block */)arg1;
- (void)_setHapticIntensity:(id)arg1;
- (void)_setVolumeValue:(id)arg1;
- (void)_systemMutedStateDidChange;
- (void)_volumeControlAvailabilityDidChange;
- (void)_volumeTimout;
- (void)_volumeValueDidChange;
- (void)_volumeWarningDidChange;
- (void)beginObservingVolume;
- (void)dealloc;
- (id)delegate;
- (void)endObservingVolume;
- (float)hapticIntensity;
- (id)init;
- (id)initWithAudioCategory:(id)arg1;
- (BOOL)isMuted;
- (BOOL)isSystemMuted;
- (BOOL)isVolumeControlAvailable;
- (BOOL)isVolumeWarningEnabled;
- (void)setDelegate:(id)arg1;
- (void)setHapticIntensity:(float)arg1;
- (void)setMuted:(BOOL)arg1;
- (void)setSystemMuted:(BOOL)arg1;
- (void)setVolumeValue:(float)arg1;
- (void)setVolumeValue:(float)arg1 muted:(BOOL)arg2 overrideEULimit:(BOOL)arg3;
- (float)volumeValue;

@end
