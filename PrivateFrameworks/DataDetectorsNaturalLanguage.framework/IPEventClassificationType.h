/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/DataDetectorsNaturalLanguage.framework/DataDetectorsNaturalLanguage
 */

@interface IPEventClassificationType : NSObject {
    BOOL  _allDayAllowed;
    NSMutableArray * _children;
    unsigned int  _classificationDepth;
    double  _defaultDuration;
    int  _defaultStartingTimeHour;
    int  _defaultStartingTimeMinutes;
    NSString * _defaultTitle;
    NSArray * _events;
    BOOL  _highPriority;
    NSString * _identifier;
    NSMutableArray * _keywords;
    NSString * _language;
    BOOL  _lowPriority;
    double  _minutesAfterDefaultStartingTime;
    double  _minutesBeforeDefaultStartingTime;
    IPEventClassificationType * _parent;
    NSString * _subjectKeywordsPattern;
    NSMutableSet * _upperPriorityEventTypes;
    BOOL  _useForTimeAdjustement;
}

@property (getter=isAllDayAllowed, nonatomic) BOOL allDayAllowed;
@property (nonatomic, retain) NSMutableArray *children;
@property (nonatomic) unsigned int classificationDepth;
@property (getter=isCultureRelated, nonatomic, readonly) BOOL cultureRelated;
@property (nonatomic) double defaultDuration;
@property (nonatomic) int defaultStartingTimeHour;
@property (nonatomic) int defaultStartingTimeMinutes;
@property (nonatomic, retain) NSString *defaultTitle;
@property (nonatomic, retain) NSArray *events;
@property (getter=isFairlyGeneric, nonatomic, readonly) BOOL fairlyGeneric;
@property (getter=isHighPriority, nonatomic) BOOL highPriority;
@property (nonatomic, retain) NSString *identifier;
@property (getter=isAppointment, nonatomic, readonly) BOOL isAppointment;
@property (nonatomic, retain) NSMutableArray *keywords;
@property (nonatomic, retain) NSString *language;
@property (getter=isLowPriority, nonatomic) BOOL lowPriority;
@property (getter=isMealRelated, nonatomic, readonly) BOOL mealRelated;
@property (nonatomic) double minutesAfterDefaultStartingTime;
@property (nonatomic) double minutesBeforeDefaultStartingTime;
@property (getter=isMovieRelated, nonatomic, readonly) BOOL movieRelated;
@property (nonatomic) IPEventClassificationType *parent;
@property (getter=isSportRelated, nonatomic, readonly) BOOL sportRelated;
@property (retain) NSString *subjectKeywordsPattern;
@property (nonatomic, retain) NSMutableSet *upperPriorityEventTypes;
@property (nonatomic) BOOL useForTimeAdjustement;

+ (id)_allClusterIdentifiers;
+ (double)_computeScoreForEventTypeBranchNode:(id)arg1 messageUnit:(id)arg2;
+ (id)_identifierForCluster:(unsigned int)arg1;
+ (id)_identifiersForClusters:(id)arg1;
+ (id)_loadTaxonomyForLanguageID:(id)arg1 clusterIdentifier:(id)arg2 error:(id*)arg3;
+ (double)_numberOfMatchingKeywordsForRegex:(id)arg1 inText:(id)arg2 message:(id)arg3 rejectionRanges:(id)arg4 eventType:(id)arg5 logDetectedKeywords:(BOOL)arg6;
+ (id)_parentFromIdentifier:(id)arg1;
+ (id)_priorityEventTypeFromCandidates:(id)arg1;
+ (id)_selectBestEventTypeFromCandidates:(id)arg1;
+ (id)_taxonomyForLanguageID:(id)arg1 clusterType:(unsigned int)arg2;
+ (id)cleanSubject:(id)arg1;
+ (id)eventClassificationTypeFromMessageUnit:(id)arg1 detectedStartDate:(id)arg2;
+ (id)eventClassificationTypeFromMessageUnit:(id)arg1 scopedClusterType:(unsigned int)arg2 fallbackClusterType:(unsigned int)arg3;
+ (id)eventTypeForCultureAndLanguageID:(id)arg1;
+ (id)eventTypeForEntertainmentAndLanguageID:(id)arg1;
+ (id)eventTypeForMealsAndLanguageID:(id)arg1;
+ (id)eventTypeForMoviesAndLanguageID:(id)arg1;
+ (id)eventTypeForSportAndLanguageID:(id)arg1;
+ (id)fallbackEventTitleForMessageUnits:(id)arg1 subject:(id)arg2 checkForDateInSubject:(BOOL)arg3;
+ (id)morePreciseEventClassificationTypeBetweenType:(id)arg1 and:(id)arg2;

- (void).cxx_destruct;
- (void)_addChild:(id)arg1;
- (void)_addParent:(id)arg1;
- (void)_addUpperPriorityEventType:(id)arg1;
- (BOOL)_hasPriorityOverEventType:(id)arg1;
- (BOOL)_hasPriorityOverEventTypes:(id)arg1;
- (id)_mealClassificationTypeUsingStartDate:(id)arg1;
- (void)addEvents:(id)arg1;
- (id)adjustedEventClassificationTypeWithStartDate:(id)arg1;
- (id)adjustedEventTitleForMessageUnits:(id)arg1;
- (id)adjustedEventTitleForMessageUnits:(id)arg1 subject:(id)arg2 isDateInSubject:(BOOL)arg3;
- (id)children;
- (unsigned int)classificationDepth;
- (double)defaultDuration;
- (int)defaultStartingTimeHour;
- (int)defaultStartingTimeMinutes;
- (id)defaultTitle;
- (id)description;
- (id)events;
- (id)identifier;
- (id)init;
- (id)initWithIdentifier:(id)arg1 language:(id)arg2 keywords:(id)arg3 defaultTitle:(id)arg4 defaultStartingTimeHour:(int)arg5 defaultStartingTimeMinutes:(int)arg6 defaultDuration:(double)arg7 parent:(id)arg8 children:(id)arg9 upperPriorityEventTypes:(id)arg10 useForTimeAdjustement:(BOOL)arg11 minutesBeforeDefaultStartingTime:(double)arg12 minutesAfterDefaultStartingTime:(double)arg13 highPriority:(BOOL)arg14 lowPriority:(BOOL)arg15 allDayAllowed:(BOOL)arg16 subjectKeywords:(id)arg17;
- (BOOL)isAllDayAllowed;
- (BOOL)isAppointment;
- (BOOL)isCultureRelated;
- (BOOL)isDateWithinRange:(id)arg1;
- (BOOL)isFairlyGeneric;
- (BOOL)isHighPriority;
- (BOOL)isLowPriority;
- (BOOL)isMealRelated;
- (BOOL)isMovieRelated;
- (BOOL)isSportRelated;
- (id)keywords;
- (id)language;
- (double)minutesAfterDefaultStartingTime;
- (double)minutesBeforeDefaultStartingTime;
- (id)parent;
- (id)properCasedTitleForTitle:(id)arg1 locale:(id)arg2;
- (void)setAllDayAllowed:(BOOL)arg1;
- (void)setChildren:(id)arg1;
- (void)setClassificationDepth:(unsigned int)arg1;
- (void)setDefaultDuration:(double)arg1;
- (void)setDefaultStartingTimeHour:(int)arg1;
- (void)setDefaultStartingTimeMinutes:(int)arg1;
- (void)setDefaultTitle:(id)arg1;
- (void)setEvents:(id)arg1;
- (void)setHighPriority:(BOOL)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setKeywords:(id)arg1;
- (void)setLanguage:(id)arg1;
- (void)setLowPriority:(BOOL)arg1;
- (void)setMinutesAfterDefaultStartingTime:(double)arg1;
- (void)setMinutesBeforeDefaultStartingTime:(double)arg1;
- (void)setParent:(id)arg1;
- (void)setSubjectKeywordsPattern:(id)arg1;
- (void)setUpperPriorityEventTypes:(id)arg1;
- (void)setUseForTimeAdjustement:(BOOL)arg1;
- (id)subjectKeywordsPattern;
- (id)upperPriorityEventTypes;
- (BOOL)useForTimeAdjustement;

@end
