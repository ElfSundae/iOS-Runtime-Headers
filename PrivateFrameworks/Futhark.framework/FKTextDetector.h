/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Futhark.framework/Futhark
 */

@interface FKTextDetector : NSObject {
    int _binarizerLimit;
    BOOL _createFeaturesForAllConcomps;
    BOOL _detectDiacritics;
    BOOL _enableBinarizerFiltering;
    BOOL _enableRecognition;
    struct { 
        int minScale; 
        int maxScale; 
    } _mergeSettings;
    BOOL _minimizeFalseDetections;
    int _minimumCharacterHeight;
    BOOL _returnSubFeatures;
    struct { /* ? */ } *_sessions;
    int _thresholdingAlgorithm;
    unsigned int _timeBinarizer;
    unsigned int _timeConcomps;
    unsigned int _timeDownscale;
    unsigned int _timeRecognizer;
    unsigned int _timeSequences;
}

@property (nonatomic) int binarizerLimit;
@property (nonatomic) BOOL createFeaturesForAllConcomps;
@property (nonatomic) BOOL detectDiacritics;
@property (nonatomic) BOOL enableBinarizerFiltering;
@property (nonatomic) BOOL enableRecognition;
@property (nonatomic) struct { int x1; int x2; } mergeSettings;
@property (nonatomic) BOOL minimizeFalseDetections;
@property (nonatomic) int minimumCharacterHeight;
@property (nonatomic) BOOL returnSubFeatures;
@property (nonatomic) int thresholdingAlgorithm;

- (int)binarizerLimit;
- (BOOL)createFeaturesForAllConcomps;
- (id)createFeaturesForROI:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 originalSize:(struct CGSize { float x1; float x2; })arg2;
- (id)createFeaturesForSessionScale:(int)arg1 roi:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 originalSize:(struct CGSize { float x1; float x2; })arg3 startID:(int*)arg4;
- (void)dealloc;
- (BOOL)detectDiacritics;
- (id)detectFeaturesInBuffer:(struct __CVBuffer { }*)arg1 error:(id*)arg2;
- (id)detectFeaturesInBuffer:(struct __CVBuffer { }*)arg1 withRegionOfInterest:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 error:(id*)arg3;
- (BOOL)enableBinarizerFiltering;
- (BOOL)enableRecognition;
- (id)initWithDimensions:(struct CGSize { float x1; float x2; })arg1;
- (unsigned char)isValidPixelBuffer:(struct __CVBuffer { }*)arg1 regionOfInterest:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 error:(id*)arg3;
- (void)mergeFeature:(id)arg1 withArray:(id)arg2;
- (struct { int x1; int x2; })mergeSettings;
- (BOOL)minimizeFalseDetections;
- (int)minimumCharacterHeight;
- (void)resetTimers;
- (BOOL)returnSubFeatures;
- (void)setBinarizerLimit:(int)arg1;
- (void)setCreateFeaturesForAllConcomps:(BOOL)arg1;
- (void)setDetectDiacritics:(BOOL)arg1;
- (void)setEnableBinarizerFiltering:(BOOL)arg1;
- (void)setEnableRecognition:(BOOL)arg1;
- (void)setMergeSettings:(struct { int x1; int x2; })arg1;
- (void)setMinimizeFalseDetections:(BOOL)arg1;
- (void)setMinimumCharacterHeight:(int)arg1;
- (void)setReturnSubFeatures:(BOOL)arg1;
- (void)setThresholdingAlgorithm:(int)arg1;
- (int)thresholdingAlgorithm;
- (void)translatePropertiesToOptionsWithNumSessions:(int)arg1;

@end
