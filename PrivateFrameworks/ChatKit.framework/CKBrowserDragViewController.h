/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKBrowserDragViewController : UIViewController <CKAnimationTimerObserver, UIDynamicAnimatorDelegate, UIGestureRecognizerDelegate> {
    struct CGPoint { 
        float x; 
        float y; 
    }  _anchorOffset;
    BOOL  _canPeel;
    BOOL  _canRotate;
    BOOL  _canScale;
    UIImage * _currentFrameImage;
    <CKBrowserDragViewControllerDelegate> * _delegate;
    CADisplayLink * _displayLink;
    CKAnimatedImage * _dragImage;
    NSArray * _dragImageFrames;
    UIView * _dragView;
    float  _dragViewScale;
    CALayer * _dropShadowLayer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _dropShadowLayerStartPosition;
    CKElasticFunction * _elasticFunctionPositionX;
    CKElasticFunction * _elasticFunctionPositionY;
    CKElasticFunction * _elasticFunctionRotation;
    CKElasticFunction * _elasticFunctionScaleX;
    CKElasticFunction * _elasticFunctionScaleY;
    double  _elasticLastTime;
    double  _elasticRemainingTime;
    float  _elasticRotationAngle;
    float  _elasticScaleX;
    float  _elasticScaleY;
    UILongPressGestureRecognizer * _gestureRecognizer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _initialDragStartPosition;
    float  _initialScale;
    struct CGSize { 
        float width; 
        float height; 
    }  _initialSize;
    CALayer * _meshLayer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _meshLayerStartPosition;
    UIPanGestureRecognizer * _panGestureRecognizer;
    CALayer * _peelImageLayer;
    CALayer * _peelLayer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _peelLayerStartPosition;
    NSMutableDictionary * _peelMaskImageCache;
    CALayer * _peelMaskLayer;
    CALayer * _perspectiveLayer;
    BOOL  _pressed;
    struct CGPoint { 
        float x; 
        float y; 
    }  _previousPanLocationInView;
    struct CGSize { 
        float width; 
        float height; 
    }  _rasterizedImageSize;
    double  _rotationAngle;
    BOOL  _scaledDown;
    CALayer * _shadowLayer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _shadowLayerStartPosition;
    CALayer * _shineLayer;
    struct CGPoint { 
        float x; 
        float y; 
    }  _shineLayerStartPosition;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  _sourceRect;
}

@property (nonatomic, readonly) float absoluteScale;
@property (nonatomic) struct CGPoint { float x1; float x2; } anchorOffset;
@property (nonatomic) BOOL canPeel;
@property (nonatomic) BOOL canRotate;
@property (nonatomic) BOOL canScale;
@property (nonatomic, retain) UIImage *currentFrameImage;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CKBrowserDragViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic, retain) CKAnimatedImage *dragImage;
@property (nonatomic, retain) NSArray *dragImageFrames;
@property (nonatomic, retain) UIView *dragView;
@property (nonatomic, readonly) struct CGPoint { float x1; float x2; } dragViewCenter;
@property (nonatomic, readonly) float dragViewRotation;
@property (nonatomic) float dragViewScale;
@property (nonatomic) CALayer *dropShadowLayer;
@property (nonatomic) struct CGPoint { float x1; float x2; } dropShadowLayerStartPosition;
@property (nonatomic, retain) CKElasticFunction *elasticFunctionPositionX;
@property (nonatomic, retain) CKElasticFunction *elasticFunctionPositionY;
@property (nonatomic, retain) CKElasticFunction *elasticFunctionRotation;
@property (nonatomic, retain) CKElasticFunction *elasticFunctionScaleX;
@property (nonatomic, retain) CKElasticFunction *elasticFunctionScaleY;
@property (nonatomic) double elasticLastTime;
@property (nonatomic) double elasticRemainingTime;
@property (nonatomic) float elasticRotationAngle;
@property (nonatomic) float elasticScaleX;
@property (nonatomic) float elasticScaleY;
@property (nonatomic, retain) UILongPressGestureRecognizer *gestureRecognizer;
@property (readonly) unsigned int hash;
@property (nonatomic) struct CGPoint { float x1; float x2; } initialDragStartPosition;
@property (nonatomic) float initialScale;
@property (nonatomic) struct CGSize { float x1; float x2; } initialSize;
@property (nonatomic) CALayer *meshLayer;
@property (nonatomic) struct CGPoint { float x1; float x2; } meshLayerStartPosition;
@property (nonatomic, retain) UIPanGestureRecognizer *panGestureRecognizer;
@property (nonatomic, retain) CALayer *peelImageLayer;
@property (nonatomic) CALayer *peelLayer;
@property (nonatomic) struct CGPoint { float x1; float x2; } peelLayerStartPosition;
@property (nonatomic, retain) NSMutableDictionary *peelMaskImageCache;
@property (nonatomic, retain) CALayer *peelMaskLayer;
@property (nonatomic) CALayer *perspectiveLayer;
@property (getter=isPressed, nonatomic) BOOL pressed;
@property (nonatomic) struct CGPoint { float x1; float x2; } previousPanLocationInView;
@property (nonatomic) struct CGSize { float x1; float x2; } rasterizedImageSize;
@property (nonatomic) double rotationAngle;
@property (getter=isScaledDown, nonatomic) BOOL scaledDown;
@property (nonatomic) CALayer *shadowLayer;
@property (nonatomic) struct CGPoint { float x1; float x2; } shadowLayerStartPosition;
@property (nonatomic) CALayer *shineLayer;
@property (nonatomic) struct CGPoint { float x1; float x2; } shineLayerStartPosition;
@property (nonatomic) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } sourceRect;
@property (readonly) Class superclass;

+ (id)meshTransform;
+ (id)springAnimationWithKeyPath:(id)arg1 speed:(float)arg2;
+ (BOOL)supportsForceTouch;

- (void).cxx_destruct;
- (void)_attachElasticEffectsForLocation:(struct CGPoint { float x1; float x2; })arg1;
- (void)_detachElasticEffects;
- (void)_displayLinkCallback:(id)arg1;
- (BOOL)_orbScalingEnabled;
- (void)_updateElasticEffectsForLocation:(struct CGPoint { float x1; float x2; })arg1;
- (float)absoluteScale;
- (struct CGPoint { float x1; float x2; })anchorOffset;
- (void)animateBackToSourceCompletionBlock:(id /* block */)arg1;
- (void)animatePeelWithCompletion:(id /* block */)arg1;
- (void)animatePlacementAtPoint:(struct CGPoint { float x1; float x2; })arg1 completionBlock:(id /* block */)arg2;
- (void)animateScaleDown;
- (void)animationTimerFired:(unsigned int)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applyTransforms;
- (BOOL)canPeel;
- (BOOL)canRotate;
- (BOOL)canScale;
- (void)commitDrag;
- (id)currentFrameImage;
- (void)dealloc;
- (id)delegate;
- (id)displayLink;
- (id)dragImage;
- (id)dragImageFrames;
- (id)dragView;
- (struct CGPoint { float x1; float x2; })dragViewCenter;
- (float)dragViewRotation;
- (float)dragViewScale;
- (id)dropShadowLayer;
- (struct CGPoint { float x1; float x2; })dropShadowLayerStartPosition;
- (id)elasticFunctionPositionX;
- (id)elasticFunctionPositionY;
- (id)elasticFunctionRotation;
- (id)elasticFunctionScaleX;
- (id)elasticFunctionScaleY;
- (double)elasticLastTime;
- (double)elasticRemainingTime;
- (float)elasticRotationAngle;
- (float)elasticScaleX;
- (float)elasticScaleY;
- (void)gestureRecognized:(id)arg1;
- (id)gestureRecognizer;
- (id)initWithDragImage:(id)arg1 inSourceRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 withSourcePoint:(struct CGPoint { float x1; float x2; })arg3 withGestureRecognizer:(id)arg4;
- (struct CGPoint { float x1; float x2; })initialDragStartPosition;
- (float)initialScale;
- (struct CGSize { float x1; float x2; })initialSize;
- (BOOL)isPressed;
- (BOOL)isScaledDown;
- (void)manuallyInitializeDragAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)manuallyUpdateDragPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)meshLayer;
- (struct CGPoint { float x1; float x2; })meshLayerStartPosition;
- (void)panGestureRecognized:(id)arg1;
- (id)panGestureRecognizer;
- (id)peelImageLayer;
- (id)peelLayer;
- (struct CGPoint { float x1; float x2; })peelLayerStartPosition;
- (id)peelMaskImageCache;
- (id)peelMaskImageFromImage:(id)arg1;
- (id)peelMaskLayer;
- (id)perspectiveLayer;
- (struct CGPoint { float x1; float x2; })previousPanLocationInView;
- (struct CGSize { float x1; float x2; })rasterizedImageSize;
- (void)reversePeelAnimationToPoint:(struct CGPoint { float x1; float x2; })arg1 forPlacement:(BOOL)arg2 completionBlock:(id /* block */)arg3;
- (double)rotationAngle;
- (id)scaleImage:(id)arg1 toSize:(struct CGSize { float x1; float x2; })arg2;
- (void)setAnchorOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setCanPeel:(BOOL)arg1;
- (void)setCanRotate:(BOOL)arg1;
- (void)setCanScale:(BOOL)arg1;
- (void)setCurrentFrameImage:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setDragImage:(id)arg1;
- (void)setDragImageFrames:(id)arg1;
- (void)setDragView:(id)arg1;
- (void)setDragViewScale:(float)arg1;
- (void)setDropShadowLayer:(id)arg1;
- (void)setDropShadowLayerStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setElasticFunctionPositionX:(id)arg1;
- (void)setElasticFunctionPositionY:(id)arg1;
- (void)setElasticFunctionRotation:(id)arg1;
- (void)setElasticFunctionScaleX:(id)arg1;
- (void)setElasticFunctionScaleY:(id)arg1;
- (void)setElasticLastTime:(double)arg1;
- (void)setElasticRemainingTime:(double)arg1;
- (void)setElasticRotationAngle:(float)arg1;
- (void)setElasticScaleX:(float)arg1;
- (void)setElasticScaleY:(float)arg1;
- (void)setGestureRecognizer:(id)arg1;
- (void)setInitialDragStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setInitialScale:(float)arg1;
- (void)setInitialSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setMeshLayer:(id)arg1;
- (void)setMeshLayerStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setPanGestureRecognizer:(id)arg1;
- (void)setPeelImageLayer:(id)arg1;
- (void)setPeelLayer:(id)arg1;
- (void)setPeelLayerStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setPeelMaskImageCache:(id)arg1;
- (void)setPeelMaskLayer:(id)arg1;
- (void)setPerspectiveLayer:(id)arg1;
- (void)setPressed:(BOOL)arg1;
- (void)setPreviousPanLocationInView:(struct CGPoint { float x1; float x2; })arg1;
- (void)setRasterizedImageSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setRotationAngle:(double)arg1;
- (void)setScaledDown:(BOOL)arg1;
- (void)setShadowLayer:(id)arg1;
- (void)setShadowLayerStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setShineLayer:(id)arg1;
- (void)setShineLayerStartPosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setSourceRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setUpPeelLayers;
- (id)shadowLayer;
- (struct CGPoint { float x1; float x2; })shadowLayerStartPosition;
- (id)shineLayer;
- (struct CGPoint { float x1; float x2; })shineLayerStartPosition;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })sourceRect;
- (void)updateAnimationTimerObserving;
- (void)viewDidAppear:(BOOL)arg1;
- (void)viewDidDisappear:(BOOL)arg1;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(struct CGSize { float x1; float x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
