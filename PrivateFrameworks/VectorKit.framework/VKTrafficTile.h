/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKTrafficTile : VKVectorTile {
    struct TrafficMeshStyle { 
        int _style[4]; 
    } _builtTrafficStyle;
    NSData *_data;
    struct _GEOTileKey { 
        unsigned int z : 6; 
        unsigned int x : 26; 
        unsigned int y : 26; 
        unsigned int type : 6; 
        unsigned int pixelSize : 8; 
        unsigned int textScale : 8; 
        unsigned int provider : 8; 
        unsigned int expires : 1; 
        unsigned int reserved1 : 7; 
        unsigned char reserved2[4]; 
    } _dataKey;
    VKTileKeyMap *_dynamicTiles;
    NSMutableArray *_incidents;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; } *_pilledTrafficCollection;
    struct unique_ptr<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> > > { 
        struct __compressed_pair<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> *, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> > > { 
            struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> {} *__first_; 
        } __ptr_; 
    } _pilledTrafficLayer;
    struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > { struct __hash_table<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true>, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> *> { struct __hash_node<std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::hash<vk::TrafficBatchKey>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<vk::TrafficBatchKey, std::__1::__hash_value_type<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > >, std::__1::equal_to<vk::TrafficBatchKey>, true> > { float x_4_2_1; } x_1_1_4; } x1; } *_solidTrafficCollection;
    struct unique_ptr<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> > > { 
        struct __compressed_pair<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> *, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> > > { 
            struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> {} *__first_; 
        } __ptr_; 
    } _solidTrafficLayer;
    struct FeatureAttributeSet { 
        struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> > { 
            struct FeatureAttributePair {} *__begin_; 
            struct FeatureAttributePair {} *__end_; 
            struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> > { 
                struct FeatureAttributePair {} *__first_; 
            } __end_cap_; 
        } _attributes; 
    } _styleAttributes;
    struct TrafficSkeletonTile { 
        struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > { 
            struct Record {} *__begin_; 
            struct Record {} *__end_; 
            struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > { 
                struct Record {} *__first_; 
            } __end_cap_; 
        } m_records; 
    } _trafficData;
}

@property (nonatomic) const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*dataKey;
@property (nonatomic, readonly) VKTileKeyMap *dynamicTiles;
@property (nonatomic, readonly) NSArray *incidents;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TrafficLayer<ggl::PilledTrafficRibbonDescriptor>=^^?{vector<vk::PilledTrafficBatch *' */ struct *pilledTrafficLayer; /* unknown property attribute:  std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> >=^^{BaseMesh}}}[1^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}[1{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{TrafficManager<ggl::PilledTrafficRibbonDescriptor>}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TrafficLayer<ggl::SolidTrafficRibbonDescriptor>=^^?{vector<vk::SolidTrafficBatch *' */ struct *solidTrafficLayer; /* unknown property attribute:  std::__1::allocator<ggl::TrafficBase::BaseMesh *> >=^^{BaseMesh}}}[2^{RenderState}]{shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >=^{ConstantDataTyped<ggl::Tile::View>}^{__shared_weak_count}}[2{shared_ptr<ggl::RenderState>=^{RenderState}^{__shared_weak_count}}]I^{TrafficManager<ggl::SolidTrafficRibbonDescriptor>}@} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{FeatureAttributeSet={vector<gss::FeatureAttributePair' */ struct *styleAttributes; /* unknown property attribute:  std::__1::allocator<gss::FeatureAttributePair> >=^{FeatureAttributePair}}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)_buildStartOffset:(float*)arg1 endOffset:(float*)arg2 forLine:(struct { struct { id x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned long long x_1_1_7; BOOL x_1_1_8; unsigned long long x_1_1_9; float x_1_1_10; unsigned long long x_1_1_11; id x_1_1_12; } x1; unsigned int x2; unsigned int x3; int x4; int x5; int x6; unsigned int x7; unsigned int x8; union { struct { struct { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_9_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; float x_2_2_4; } x_9_1_2; } x9; struct { /* ? */ } *x10; struct { unsigned short x_11_1_1[2]; unsigned short x_11_1_2[2]; } x11; unsigned char x12; struct _NSRange { unsigned int x_13_1_1; unsigned int x_13_1_2; } x13; BOOL x14; }*)arg3 forSkeleton:(const struct Record { unsigned int x1; unsigned int x2; float x3; float x4; long long x5; int x6; float x7; float x8; int x9; }*)arg4 forRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg5 forFlow:(const struct Flow { long long x1; float x2; float x3; int x4; }*)arg6 forPoints:(struct Matrix<float, 2, 1> { float x1[2]; }*)arg7;
- (void)buildIncidentsForDynamic:(id)arg1 withRoadData:(id)arg2;
- (void)buildSkeletonMap;
- (void)buildTrafficIncidentsWithRoadData:(id)arg1;
- (void)buildTrafficMeshWithRoadData:(id)arg1 dynamicTile:(id)arg2 trafficAccum:(struct TrafficAccum { int x1; struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_2_1_1; struct Matrix<float, 2, 1> {} *x_2_1_2; struct __compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_3_2_1; } x_2_1_3; } x2; unsigned char x3; int x4; int x5; struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > > {} *x6; struct unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > > {} *x7; int x8; struct { /* ? */ } *x9; struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x_10_1_1; struct __shared_weak_count {} *x_10_1_2; } x10; int x11; float x12; }*)arg3 styleSession:(struct StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > { struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct unordered_map<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<std::__1::shared_ptr<gss::StyleQuery> >, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::shared_ptr<gss::StyleQuery>, std::__1::__hash_value_type<std::__1::shared_ptr<gss::StyleQuery>, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<std::__1::shared_ptr<gss::StyleQuery> >, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; bool x3; unsigned char x4; }*)arg4 trafficMeshStyle:(const struct TrafficMeshStyle { int x1[4]; }*)arg5;
- (void)buildTrafficMeshWithRoadData:(id)arg1 withLoader:(struct Loader { struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > { struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > { struct LoaderImpl {} *x_1_2_1; } x_1_1_1; } x1; }*)arg2 trafficMeshStyle:(const struct TrafficMeshStyle { int x1[4]; }*)arg3;
- (const struct TrafficMeshStyle { int x1[4]; }*)builtTrafficStyle;
- (const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)dataKey;
- (void)dealloc;
- (id)dynamicTiles;
- (void)enumerateTrafficRoadPiecesForTile:(id)arg1 usingFunction:(const struct function<void (const vk::RoadPiece &)>={type=[12C] {}*)arg2;
- (id)incidents;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 downloadKey:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg2 data:(id)arg3 styleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg4 sharedResources:(id)arg5 contentScale:(float)arg6 device:(struct Device { int (**x1)(); int x2; }*)arg7;
- (struct TrafficLayer<ggl::PilledTrafficRibbonDescriptor> { int (**x1)(); struct vector<vk::PilledTrafficBatch *, std::__1::allocator<vk::PilledTrafficBatch *> > { struct PilledTrafficBatch {} **x_2_1_1; struct PilledTrafficBatch {} **x_2_1_2; struct __compressed_pair<vk::PilledTrafficBatch **, std::__1::allocator<vk::PilledTrafficBatch *> > { struct PilledTrafficBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[1]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[1]; unsigned int x7; struct TrafficManager<ggl::PilledTrafficRibbonDescriptor> {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; double x26; void*x27; float x28; int x29; long x30; void*x31; const void*x32; void*x33; void*x34; void*x35; void*x36; SEL x37; void*x38; void*x39; void*x40; void*x41; void*x42; short x43; int x44; in void*x45; void*x46; void*x47; void x48; out int x49; double x50; char *x51; void*x52; void*x53; char *x54; void*x55; void*x56; void x57; out int x58; double x59; char *x60; void*x61; void*x62; void*x63; void*x64; void*x65; void x66; out int x67; double x68; char *x69; void*x70; void*x71; void*x72; void*x73; void*x74; void x75; out int x76; double x77; char *x78; void*x79; void*x80; void*x81; void*x82; void*x83; void x84; out int x85; double x86; char *x87; void*x88; void*x89; void*x90; void*x91; void*x92; void x93; out int x94; double x95; char *x96; void*x97; void*x98; void*x99; void*x100; void*x101; void x102; out int x103; double x104; char *x105; void*x106; void*x107; void*x108; void*x109; void*x110; void x111; out int x112; double x113; char *x114; void*x115; void*x116; void*x117; void*x118; void*x119; void x120; out int x121; double x122; char *x123; void*x124; void*x125; void*x126; void*x127; void*x128; void x129; out int x130; double x131; char *x132; void*x133; void*x134; void*x135; void*x136; void*x137; void x138; out int x139; double x140; char *x141; void*x142; void*x143; void*x144; void*x145; void*x146; void x147; out int x148; double x149; char *x150; void*x151; void*x152; void*x153; void*x154; void*x155; void x156; out int x157; double x158; char *x159; void*x160; void*x161; void*x162; void*x163; void*x164; void x165; out int x166; double x167; char *x168; void*x169; void*x170; void*x171; void*x172; void*x173; void x174; out int x175; double x176; char *x177; void*x178; void*x179; void*x180; void*x181; void*x182; void x183; out int x184; double x185; char *x186; void*x187; void*x188; void*x189; void*x190; void*x191; void x192; out int x193; double x194; char *x195; void*x196; void*x197; short x198; void*x199; void*x200; void*x201; const void*x202; void*x203; void*x204; BOOL x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; BOOL x215; void*x216; out void*x217; void*x218; void*x219; void*x220; void*x221; const void*x222; void*x223; void*x224; short x225; void*x226; short x227; void*x228; void*x229; void*x230; double x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; int x239; void*x240; const void*x241; void*x242; void*x243; short x244; void*x245; void*x246; void*x247; double x248; void*x249; SEL x250; void*x251; SEL x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; SEL x260; void*x261; SEL x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; short x272; void*x273; void*x274; void*x275; void*x276; void*x277; in void*x278; out void*x279; double x280; void*x281; void*x282; void*x283; void*x284; void*x285; unsigned int x286/* : ? */; void*x287; void*x288; void*x289; short x290; void*x291; void*x292; void*x293; void*x294; void*x295; short x296; void*x297; void*x298; void*x299; double x300; void*x301; SEL x302; void*x303; SEL x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; SEL x312; void*x313; SEL x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; short x324; void*x325; void*x326; void*x327; void*x328; void*x329; in void*x330; out void*x331; double x332; void*x333; void*x334; void*x335; void*x336; void*x337; short x338; void*x339; void*x340; void*x341; double x342; void*x343; SEL x344; void*x345; SEL x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; SEL x354; void*x355; SEL x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; short x366; void*x367; void*x368; void*x369; void*x370; void*x371; void x372; void*x373; void*x374; void*x375; long x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; short x394; void*x395; void*x396; void*x397; double x398; void*x399; SEL x400; void*x401; SEL x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; SEL x410; void*x411; SEL x412; void*x413; short x414; void*x415; void*x416; void*x417; void*x418; void*x419; const void*x420; void*x421; void*x422; double x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; const void*x431; void*x432; void*x433; void*x434; void*x435; short x436; void*x437; short x438; void*x439; SEL x440; void*x441; SEL x442; void*x443; unsigned short x444; void*x445; void*x446; void*x447; void*x448; void*x449; long x450; void*x451; void*x452; void*x453; unsigned long long x454; void*x455; void*x456; void*x457; void*x458; void*x459; const void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; out void*x473; SEL x474; void*x475; SEL x476; void*x477; void*x478; void*x479; const void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; int x487; void*x488; in void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; const void*x496; void*x497; void*x498; int x499; void*x500; double x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; out void*x511; SEL x512; void*x513; SEL x514; void*x515; void*x516; void*x517; const void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; int x525; void*x526; in void*x527; void*x528; void*x529; out void*x530; unsigned int x531/* : ? */; void*x532; void*x533; void*x534; BOOL x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; out void*x545; SEL x546; void*x547; SEL x548; void*x549; void*x550; void*x551; const void*x552; void*x553; void*x554; long x555; void*x556; void*x557; void*x558; void*x559; void*x560; short x561; void*x562; void*x563; void*x564; void*x565; void*x566; out void*x567; unsigned int x568/* : ? */; void*x569; void*x570; void*x571; BOOL x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; out void*x582; SEL x583; void*x584; SEL x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; short x593; void*x594; void*x595; void*x596; void*x597; void*x598; out void*x599; unsigned int x600/* : ? */; void*x601; void*x602; void*x603; BOOL x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; out void*x614; SEL x615; void*x616; SEL x617; void*x618; void*x619; void*x620; void*x621; void*x622; long long x623; void*x624; void*x625; void*x626; void*x627; void*x628; long x629; void*x630; void*x631; void*x632; out void*x633; unsigned int x634/* : ? */; void*x635; void*x636; void*x637; BOOL x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void x650; void*x651; out void*x652; int x653; void*x654; double x655; void*x656; void*x657; void*x658; char *x659; void*x660; void*x661; void*x662; void*x663; void*x664; char *x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; short x673; void*x674; void*x675; void*x676; double x677; void*x678; SEL x679; void*x680; SEL x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; SEL x689; void*x690; SEL x691; void*x692; void*x693; void*x694; long x695; void*x696; long x697; void*x698; out void*x699; BOOL x700; void*x701; void*x702; void*x703; void*x704; void*x705; out void*x706; const void*x707; void*x708; void*x709; short x710; void*x711; void*x712; void*x713; double x714; void*x715; SEL x716; void*x717; SEL x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; SEL x726; void*x727; SEL x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; short x738; void*x739; void*x740; void*x741; void*x742; void*x743; in void*x744; out void*x745; double x746; void*x747; void*x748; void*x749; void*x750; void*x751; short x752; void*x753; void*x754; void*x755; double x756; void*x757; SEL x758; void*x759; SEL x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; SEL x768; void*x769; SEL x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; short x780; void*x781; void*x782; void*x783; void*x784; void*x785; void x786; void*x787; void*x788; void*x789; long x790; void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; short x808; void*x809; void*x810; void*x811; double x812; void*x813; SEL x814; void*x815; SEL x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; SEL x824; void*x825; SEL x826; void*x827; short x828; void*x829; void*x830; void*x831; void*x832; void*x833; const void*x834; void*x835; void*x836; double x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; const void*x845; void*x846; void*x847; void*x848; void*x849; short x850; void*x851; short x852; void*x853; SEL x854; void*x855; SEL x856; void*x857; unsigned short x858; void*x859; void*x860; void*x861; void*x862; void*x863; long x864; void*x865; void*x866; void*x867; unsigned long long x868; void*x869; void*x870; void*x871; void*x872; void*x873; const void*x874; void*x875; void*x876; void*x877; void*x878; void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; void*x885; void*x886; out void*x887; SEL x888; void*x889; SEL x890; void*x891; void*x892; void*x893; const void*x894; void*x895; void*x896; void*x897; void*x898; void*x899; void*x900; int x901; void*x902; in void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; const void*x910; void*x911; void*x912; int x913; void*x914; double x915; void*x916; void*x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; void*x924; out void*x925; SEL x926; void*x927; SEL x928; void*x929; void*x930; void*x931; const void*x932; void*x933; void*x934; void*x935; void*x936; void*x937; void*x938; int x939; void*x940; in void*x941; void*x942; void*x943; out void*x944; unsigned int x945/* : ? */; void*x946; void*x947; void*x948; BOOL x949; void*x950; void*x951; void*x952; void*x953; void*x954; void*x955; void*x956; void*x957; void*x958; out void*x959; SEL x960; void*x961; SEL x962; void*x963; void*x964; void*x965; const void*x966; void*x967; void*x968; long x969; void*x970; void*x971; void*x972; void*x973; void*x974; short x975; void*x976; void*x977; void*x978; void*x979; void*x980; out void*x981; unsigned int x982/* : ? */; void*x983; void*x984; void*x985; BOOL x986; void*x987; void*x988; void*x989; void*x990; void*x991; void*x992; void*x993; void*x994; void*x995; out void*x996; SEL x997; void*x998; SEL x999; void*x1000; void*x1001; void*x1002; void*x1003; void*x1004; void*x1005; void*x1006; short x1007; void*x1008; void*x1009; void*x1010; void*x1011; void*x1012; out void*x1013; unsigned int x1014/* : ? */; void*x1015; void*x1016; void*x1017; BOOL x1018; void*x1019; void*x1020; void*x1021; void*x1022; void*x1023; void*x1024; void*x1025; void*x1026; void*x1027; out void*x1028; SEL x1029; void*x1030; SEL x1031; void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; long long x1037; void*x1038; void*x1039; void*x1040; void*x1041; void*x1042; long x1043; void*x1044; void*x1045; void*x1046; out void*x1047; unsigned int x1048/* : ? */; void*x1049; void*x1050; void*x1051; BOOL x1052; void*x1053; void*x1054; void*x1055; void*x1056; void*x1057; void*x1058; void*x1059; void*x1060; void*x1061; void*x1062; void*x1063; void x1064; void*x1065; out void*x1066; int x1067; void*x1068; double x1069; void*x1070; void*x1071; void*x1072; char *x1073; void*x1074; void*x1075; void*x1076; void*x1077; void*x1078; void*x1079; void*x1080; void*x1081; void*x1082; void*x1083; void*x1084; void*x1085; void*x1086; struct x1087; void*x1088; void*x1089; void*x1090; short x1091; void*x1092; void*x1093; void*x1094; const void*x1095; void*x1096; void*x1097; BOOL x1098; void*x1099; void*x1100; void*x1101; void*x1102; void*x1103; void*x1104; void*x1105; void*x1106; void*x1107; void*x1108; void*x1109; void*x1110; void*x1111; short x1112; void*x1113; void*x1114; void*x1115; void*x1116; void*x1117; in void*x1118; out void*x1119; double x1120; void*x1121; void*x1122; void*x1123; void*x1124; void*x1125; unsigned int x1126/* : ? */; void*x1127; void*x1128; void*x1129; short x1130; void*x1131; void*x1132; void*x1133; void*x1134; void*x1135; short x1136; void*x1137; void*x1138; void*x1139; double x1140; void*x1141; SEL x1142; void*x1143; SEL x1144; void*x1145; void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; void*x1151; SEL x1152; void*x1153; SEL x1154; void*x1155; void*x1156; void*x1157; void*x1158; void*x1159; void*x1160; void*x1161; void*x1162; void*x1163; short x1164; void*x1165; void*x1166; void*x1167; void*x1168; void*x1169; in void*x1170; out void*x1171; double x1172; void*x1173; void*x1174; void*x1175; void*x1176; void*x1177; short x1178; void*x1179; void*x1180; void*x1181; double x1182; void*x1183; SEL x1184; void*x1185; SEL x1186; void*x1187; void*x1188; void*x1189; void*x1190; void*x1191; void*x1192; void*x1193; SEL x1194; void*x1195; SEL x1196; void*x1197; void*x1198; void*x1199; void*x1200; void*x1201; void*x1202; void*x1203; void*x1204; void*x1205; short x1206; void*x1207; void*x1208; void*x1209; void*x1210; void*x1211; void x1212; void*x1213; void*x1214; void*x1215; long x1216; void*x1217; void*x1218; void*x1219; void*x1220; void*x1221; void*x1222; void*x1223; void*x1224; void*x1225; void*x1226; void*x1227; void*x1228; void*x1229; void*x1230; void*x1231; void*x1232; void*x1233; short x1234; void*x1235; void*x1236; void*x1237; double x1238; void*x1239; SEL x1240; void*x1241; SEL x1242; void*x1243; void*x1244; void*x1245; void*x1246; void*x1247; void*x1248; void*x1249; SEL x1250; void*x1251; SEL x1252; void*x1253; short x1254; void*x1255; void*x1256; void*x1257; void*x1258; void*x1259; const void*x1260; void*x1261; void*x1262; double x1263; void*x1264; void*x1265; void*x1266; void*x1267; void*x1268; void*x1269; void*x1270; const void*x1271; void*x1272; void*x1273; void*x1274; void*x1275; short x1276; void*x1277; short x1278; void*x1279; SEL x1280; void*x1281; SEL x1282; void*x1283; unsigned short x1284; void*x1285; void*x1286; void*x1287; void*x1288; void*x1289; long x1290; void*x1291; void*x1292; void*x1293; unsigned long long x1294; void*x1295; void*x1296; void*x1297; void*x1298; void*x1299; const void*x1300; void*x1301; void*x1302; void*x1303; void*x1304; void*x1305; void*x1306; void*x1307; void*x1308; void*x1309; void*x1310; void*x1311; void*x1312; out void*x1313; SEL x1314; void*x1315; SEL x1316; void*x1317; void*x1318; void*x1319; const void*x1320; void*x1321; void*x1322; void*x1323; void*x1324; void*x1325; void*x1326; int x1327; void*x1328; in void*x1329; void*x1330; void*x1331; void*x1332; void*x1333; void*x1334; void*x1335; const void*x1336; void*x1337; void*x1338; int x1339; void*x1340; double x1341; void*x1342; void*x1343; void*x1344; void*x1345; void*x1346; void*x1347; void*x1348; void*x1349; void*x1350; out void*x1351; SEL x1352; void*x1353; SEL x1354; void*x1355; void*x1356; void*x1357; const void*x1358; void*x1359; void*x1360; void*x1361; void*x1362; void*x1363; void*x1364; int x1365; void*x1366; in void*x1367; void*x1368; void*x1369; out void*x1370; unsigned int x1371/* : ? */; void*x1372; void*x1373; void*x1374; BOOL x1375; void*x1376; void*x1377; void*x1378; void*x1379; void*x1380; void*x1381; void*x1382; void*x1383; void*x1384; out void*x1385; SEL x1386; void*x1387; SEL x1388; void*x1389; void*x1390; void*x1391; const void*x1392; void*x1393; void*x1394; long x1395; void*x1396; void*x1397; void*x1398; void*x1399; void*x1400; short x1401; void*x1402; void*x1403; void*x1404; void*x1405; void*x1406; out void*x1407; unsigned int x1408/* : ? */; void*x1409; void*x1410; void*x1411; BOOL x1412; void*x1413; void*x1414; void*x1415; void*x1416; void*x1417; void*x1418; void*x1419; void*x1420; void*x1421; out void*x1422; SEL x1423; void*x1424; SEL x1425; void*x1426; void*x1427; void*x1428; void*x1429; void*x1430; void*x1431; void*x1432; short x1433; void*x1434; void*x1435; void*x1436; void*x1437; void*x1438; out void*x1439; unsigned int x1440/* : ? */; void*x1441; void*x1442; void*x1443; BOOL x1444; void*x1445; void*x1446; void*x1447; void*x1448; void*x1449; void*x1450; void*x1451; void*x1452; void*x1453; out void*x1454; SEL x1455; void*x1456; SEL x1457; void*x1458; void*x1459; void*x1460; void*x1461; void*x1462; long long x1463; void*x1464; void*x1465; void*x1466; void*x1467; void*x1468; long x1469; void*x1470; void*x1471; void*x1472; out void*x1473; unsigned int x1474/* : ? */; void*x1475; void*x1476; void*x1477; BOOL x1478; void*x1479; void*x1480; void*x1481; void*x1482; void*x1483; void*x1484; void*x1485; void*x1486; void*x1487; void*x1488; void*x1489; void x1490; void*x1491; out void*x1492; int x1493; void*x1494; double x1495; void*x1496; void*x1497; void*x1498; char *x1499; void*x1500; void*x1501; void*x1502; void*x1503; void*x1504; char *x1505; void*x1506; void*x1507; void*x1508; void*x1509; void*x1510; struct x1511; void*x1512; void*x1513; void*x1514; short x1515; void*x1516; void*x1517; void*x1518; const void*x1519; void*x1520; void*x1521; BOOL x1522; void*x1523; void*x1524; void*x1525; void*x1526; void*x1527; void*x1528; void*x1529; void*x1530; void*x1531; void*x1532; void*x1533; void*x1534; void*x1535; short x1536; void*x1537; void*x1538; void*x1539; void*x1540; void*x1541; in void*x1542; out void*x1543; double x1544; void*x1545; void*x1546; void*x1547; void*x1548; void*x1549; short x1550; void*x1551; void*x1552; void*x1553; double x1554; void*x1555; SEL x1556; void*x1557; SEL x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; SEL x1566; void*x1567; SEL x1568; void*x1569; void*x1570; void*x1571; void*x1572; void*x1573; void*x1574; void*x1575; void*x1576; void*x1577; short x1578; void*x1579; void*x1580; void*x1581; void*x1582; void*x1583; void x1584; void*x1585; void*x1586; void*x1587; long x1588; void*x1589; void*x1590; void*x1591; void*x1592; void*x1593; void*x1594; void*x1595; void*x1596; void*x1597; void*x1598; void*x1599; void*x1600; void*x1601; void*x1602; void*x1603; void*x1604; void*x1605; short x1606; void*x1607; void*x1608; void*x1609; double x1610; void*x1611; SEL x1612; void*x1613; SEL x1614; void*x1615; void*x1616; void*x1617; void*x1618; void*x1619; void*x1620; void*x1621; SEL x1622; void*x1623; SEL x1624; void*x1625; short x1626; void*x1627; void*x1628; void*x1629; void*x1630; void*x1631; const void*x1632; void*x1633; void*x1634; double x1635; void*x1636; void*x1637; void*x1638; void*x1639; void*x1640; void*x1641; void*x1642; const void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; short x1648; void*x1649; short x1650; void*x1651; SEL x1652; void*x1653; SEL x1654; void*x1655; unsigned short x1656; void*x1657; void*x1658; void*x1659; void*x1660; void*x1661; long x1662; void*x1663; void*x1664; void*x1665; unsigned long long x1666; void*x1667; void*x1668; void*x1669; void*x1670; void*x1671; const void*x1672; void*x1673; void*x1674; void*x1675; void*x1676; void*x1677; void*x1678; void*x1679; void*x1680; void*x1681; void*x1682; void*x1683; void*x1684; out void*x1685; SEL x1686; void*x1687; SEL x1688; void*x1689; void*x1690; void*x1691; const void*x1692; void*x1693; void*x1694; void*x1695; void*x1696; void*x1697; void*x1698; int x1699; void*x1700; in void*x1701; void*x1702; void*x1703; void*x1704; void*x1705; void*x1706; void*x1707; const void*x1708; void*x1709; void*x1710; int x1711; void*x1712; double x1713; void*x1714; void*x1715; void*x1716; void*x1717; void*x1718; void*x1719; void*x1720; void*x1721; void*x1722; out void*x1723; SEL x1724; void*x1725; SEL x1726; void*x1727; void*x1728; void*x1729; const void*x1730; void*x1731; void*x1732; void*x1733; void*x1734; void*x1735; void*x1736; int x1737; void*x1738; in void*x1739; void*x1740; void*x1741; out void*x1742; unsigned int x1743/* : ? */; void*x1744; void*x1745; void*x1746; BOOL x1747; void*x1748; void*x1749; void*x1750; void*x1751; void*x1752; void*x1753; void*x1754; void*x1755; void*x1756; out void*x1757; SEL x1758; void*x1759; SEL x1760; void*x1761; void*x1762; void*x1763; const void*x1764; void*x1765; void*x1766; long x1767; void*x1768; void*x1769; void*x1770; void*x1771; void*x1772; short x1773; void*x1774; void*x1775; void*x1776; void*x1777; void*x1778; out void*x1779; unsigned int x1780/* : ? */; void*x1781; void*x1782; void*x1783; BOOL x1784; void*x1785; void*x1786; void*x1787; void*x1788; void*x1789; void*x1790; void*x1791; void*x1792; void*x1793; out void*x1794; SEL x1795; void*x1796; SEL x1797; void*x1798; void*x1799; void*x1800; void*x1801; void*x1802; void*x1803; void*x1804; short x1805; void*x1806; void*x1807; void*x1808; void*x1809; void*x1810; out void*x1811; unsigned int x1812/* : ? */; void*x1813; void*x1814; void*x1815; BOOL x1816; void*x1817; void*x1818; void*x1819; void*x1820; void*x1821; void*x1822; void*x1823; void*x1824; void*x1825; out void*x1826; SEL x1827; void*x1828; SEL x1829; void*x1830; void*x1831; void*x1832; void*x1833; void*x1834; long long x1835; void*x1836; void*x1837; void*x1838; void*x1839; void*x1840; long x1841; void*x1842; void*x1843; void*x1844; out void*x1845; unsigned int x1846/* : ? */; void*x1847; void*x1848; void*x1849; BOOL x1850; void*x1851; void*x1852; void*x1853; void*x1854; void*x1855; void*x1856; void*x1857; void*x1858; void*x1859; void*x1860; void*x1861; void x1862; void*x1863; out void*x1864; int x1865; void*x1866; double x1867; void*x1868; void*x1869; void*x1870; char *x1871; void*x1872; void*x1873; void*x1874; void*x1875; void*x1876; struct x1877; void*x1878; }*)pilledTrafficLayer;
- (void)setDataKey:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg1;
- (void)setupStyleAttributesWithRoadData:(id)arg1;
- (struct TrafficLayer<ggl::SolidTrafficRibbonDescriptor> { int (**x1)(); struct vector<vk::SolidTrafficBatch *, std::__1::allocator<vk::SolidTrafficBatch *> > { struct SolidTrafficBatch {} **x_2_1_1; struct SolidTrafficBatch {} **x_2_1_2; struct __compressed_pair<vk::SolidTrafficBatch **, std::__1::allocator<vk::SolidTrafficBatch *> > { struct SolidTrafficBatch {} **x_3_2_1; } x_2_1_3; } x2; struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *> > { struct BaseMesh {} **x_3_1_1; struct BaseMesh {} **x_3_1_2; struct __compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *> > { struct BaseMesh {} **x_3_2_1; } x_3_1_3; } x3; struct RenderState {} *x4[2]; struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct shared_ptr<ggl::RenderState> { struct RenderState {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6[2]; unsigned int x7; struct TrafficManager<ggl::SolidTrafficRibbonDescriptor> {} *x8; id x9; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; SEL x22; void*x23; SEL x24; void*x25; void*x26; void*x27; long x28; void*x29; long x30; void*x31; out void*x32; BOOL x33; void*x34; void*x35; void*x36; void*x37; void*x38; out void*x39; const void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; long x47; void*x48; SEL x49; void*x50; SEL x51; void*x52; bycopy void*x53; void*x54; void*x55; void*x56; void*x57; int x58; void*x59; void*x60; void*x61; int x62; void*x63; void*x64; void*x65; void*x66; void*x67; double x68; void*x69; void*x70; void*x71; const void*x72; void*x73; void*x74; float x75; void*x76; float x77; void*x78; int x79; void*x80; BOOL x81; void*x82; SEL x83; void*x84; SEL x85; void*x86; bool x87; void*x88; void*x89; void*x90; short x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; short x99; void*x100; void*x101; void*x102; void*x103; void*x104; char *x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; struct x115; void*x116; void*x117; void*x118; short x119; void*x120; void*x121; void*x122; const void*x123; void*x124; void*x125; BOOL x126; void*x127; void*x128; void*x129; void*x130; void*x131; bool x132; void*x133; void*x134; void*x135; short x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; short x144; void*x145; void*x146; void*x147; void*x148; void*x149; struct x150; void*x151; }*)solidTrafficLayer;
- (struct FeatureAttributeSet { struct vector<gss::FeatureAttributePair, std::__1::allocator<gss::FeatureAttributePair> > { struct FeatureAttributePair {} *x_1_1_1; struct FeatureAttributePair {} *x_1_1_2; struct __compressed_pair<gss::FeatureAttributePair *, std::__1::allocator<gss::FeatureAttributePair> > { struct FeatureAttributePair {} *x_3_2_1; } x_1_1_3; } x1; }*)styleAttributes;

@end
