/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticMapModel : VKVectorMapModel <VKMapLayer> {
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableRoadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableTexturedShaderSetupPool;
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    } _batcher;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingFacadeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingShadowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingTopRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingTopShaderSetupPool;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> > { 
        struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > { 
            struct ClearItem {} *__first_; 
        } __ptr_; 
    } _clearItem;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _coastlineRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _debugRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _debugShaderSetupPool;
    BOOL _disableRealisticLand;
    BOOL _disableRealisticRoads;
    double _fade;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithoutBlending;
    bool _needDebugReset;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadStencilShaderSetupPool;
    <GEORoutePreloadSession> *_routePreloadSession;
    float _sceneAlpha;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _sidewalkShadowRenderItemPool;
    VKSkyModel *_skyModel;
    struct shared_ptr<gss::StyleManager> { 
        struct StyleManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _styleManager;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _texturedRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _texturedShaderSetupPool;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant> > { 
        struct ConstantDataTyped<ggl::AnimatableTexture::Variant> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _variantData;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithoutBlending;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableRealisticLand;
@property (nonatomic) BOOL disableRealisticRoads;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) <GEORoutePreloadSession> *routePreloadSession;
@property (nonatomic) float sceneAlpha;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (nonatomic) struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)_calculateZoomLevelWithContext:(id)arg1;
- (void)appendDebugPreloadMissesToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; short x31; void*x32; const void*x33; BOOL x34; void*x35; void*x36; void x37; void*x38; BOOL x39; void*x40; out const void*x41; void*x42; void*x43; long x44; SEL x45; SEL x46; void*x47; void*x48; long x49; void*x50; int x51; void*x52; void*x53; in void*x54; void*x55; void*x56; void*x57; short x58; void*x59; double x60; SEL x61; SEL x62; void*x63; void*x64; void*x65; SEL x66; SEL x67; void*x68; long x69; long x70; out BOOL x71; void*x72; void*x73; out const void*x74; void*x75; void*x76; long x77; SEL x78; SEL x79; void*x80; void*x81; long x82; void*x83; int x84; void*x85; void*x86; in void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; struct  
            struct MultiRange { {} x93; void*x94; char *x95; void*x96; void*x97; unsigned int x98/* : ? */; void*x99; void*x100; int x101; in void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; short x118; void*x119; const void*x120; BOOL x121; void*x122; void*x123; void*x124; void*x125; long x126; void*x127; int x128; void*x129; void*x130; in void*x131; void*x132; void*x133; struct  {} x134; void*x135; char *x136; void*x137; void*x138; void*x139; in double x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; short x157; void*x158; const void*x159; BOOL x160; void*x161; void*x162; void*x163; void*x164; BOOL x165; out void*x166; void*x167; const void*x168; short x169; short x170; void*x171; double x172; void*x173; void*x174; void*x175; int x176; const void*x177; void*x178; void*x179; long x180; SEL x181; SEL x182; void*x183; void*x184; long x185; void*x186; int x187; void*x188; void*x189; in void*x190; void*x191; void*x192; char *x193; void*x194; void*x195; short x196; void*x197; double x198; SEL x199; SEL x200; void*x201; void*x202; void*x203; SEL x204; SEL x205; void*x206; long x207; long x208; out BOOL x209; void*x210; void*x211; out const void*x212; void*x213; void*x214; long x215; SEL x216; SEL x217; void*x218; void*x219; long x220; void*x221; int x222; void*x223; void*x224; in void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; struct  
                struct MultiRange { {} x231; void*x232; char *x233; void*x234; void*x235; float x236; int x237; const short x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendDebugPreloadStatusToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; long x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; in void*x41; short x42; void*x43; int x44; void*x45; void*x46; void*x47; in void*x48; void*x49; void*x50; double x51; void*x52; void*x53; void*x54; long x55; void*x56; out void*x57; in void*x58; void*x59; void*x60; void*x61; void*x62; long x63; void*x64; out void*x65; in void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; short x73; void*x74; void*x75; void*x76; double x77; void*x78; SEL x79; void*x80; SEL x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; SEL x89; void*x90; SEL x91; void*x92; void x93; void*x94; void*x95; void*x96; BOOL x97; void*x98; void*x99; void*x100; out void*x101; const void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; bycopy void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; const void*x120; void*x121; void*x122; unsigned short x123; void*x124; void*x125; void*x126; void*x127; void*x128; long x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; int x137; void*x138; const void*x139; void*x140; void*x141; void*x142; void*x143; short x144; void*x145; void*x146; void*x147; double x148; void*x149; SEL x150; void*x151; SEL x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; SEL x160; void*x161; SEL x162; void*x163; void*x164; void*x165; long x166; void*x167; long x168; void*x169; out void*x170; BOOL x171; void*x172; void*x173; void*x174; void*x175; void*x176; out void*x177; const void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; bycopy void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; const void*x196; void*x197; void*x198; unsigned short x199; void*x200; void*x201; void*x202; void*x203; void*x204; long x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; int x213; void*x214; const void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void x230; void*x231; out void*x232; int x233; void*x234; double x235; void*x236; void*x237; void*x238; char *x239; void*x240; void*x241; void*x242; void*x243; void*x244; char *x245; void*x246; void*x247; void*x248; void*x249; void*x250; struct x251; void*x252; void*x253; void*x254; short x255; void*x256; void*x257; void*x258; const void*x259; void*x260; void*x261; BOOL x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; short x276; void*x277; void*x278; void*x279; void*x280; void*x281; in void*x282; out void*x283; double x284; void*x285; void*x286; void*x287; void*x288; void*x289; short x290; void*x291; void*x292; void*x293; double x294; void*x295; SEL x296; void*x297; SEL x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; SEL x306; void*x307; SEL x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; short x318; void*x319; void*x320; void*x321; void*x322; void*x323; void x324; void*x325; void*x326; void*x327; long x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; in void*x348; short x349; void*x350; int x351; void*x352; void*x353; void*x354; in void*x355; void*x356; void*x357; double x358; void*x359; void*x360; void*x361; long x362; void*x363; out void*x364; in void*x365; void*x366; void*x367; void*x368; void*x369; long x370; void*x371; out void*x372; in void*x373; void*x374; void*x375; short x376; void*x377; void*x378; void*x379; const void*x380; void*x381; void*x382; BOOL x383; void*x384; void*x385; void*x386; void*x387; void*x388; double x389; void*x390; void*x391; void*x392; long long x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; out void*x405; SEL x406; void*x407; SEL x408; void*x409; float x410; void*x411; void*x412; void*x413; short x414; void*x415; void*x416; void*x417; void*x418; void*x419; short x420; void*x421; void*x422; void*x423; void*x424; void*x425; const void*x426; void*x427; void*x428; double x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; const void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; long x444; void*x445; SEL x446; void*x447; SEL x448; void*x449; unsigned long long x450; void*x451; void*x452; void*x453; void*x454; void*x455; const void*x456; void*x457; void*x458; unsigned int x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; short x473; void*x474; void*x475; void*x476; double x477; void*x478; SEL x479; void*x480; SEL x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; SEL x489; void*x490; SEL x491; void*x492; void*x493; void*x494; long x495; void*x496; long x497; void*x498; out void*x499; BOOL x500; void*x501; void*x502; void*x503; void*x504; void*x505; out void*x506; const void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; out void*x514; SEL x515; void*x516; SEL x517; void*x518; float x519; void*x520; void*x521; void*x522; short x523; void*x524; void*x525; void*x526; void*x527; void*x528; short x529; void*x530; void*x531; void*x532; void*x533; void*x534; const void*x535; void*x536; void*x537; double x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; const void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; long x553; void*x554; SEL x555; void*x556; SEL x557; void*x558; unsigned long long x559; void*x560; void*x561; void*x562; void*x563; void*x564; const void*x565; void*x566; void*x567; unsigned int x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; struct x588; void*x589; void*x590; void*x591; short x592; void*x593; void*x594; void*x595; const void*x596; void*x597; void*x598; BOOL x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; short x609; void*x610; void*x611; void*x612; long x613; void*x614; int x615; void*x616; void*x617; void*x618; void*x619; void*x620; unsigned int x621/* : ? */; void*x622; void*x623; void*x624; float x625; void*x626; float x627; void*x628; void*x629; void*x630; const void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; out void*x638; SEL x639; void*x640; SEL x641; void*x642; float x643; void*x644; void*x645; void*x646; short x647; void*x648; void*x649; void*x650; void*x651; void*x652; short x653; void*x654; void*x655; void*x656; void*x657; void*x658; const void*x659; void*x660; void*x661; double x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; const void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; long x677; void*x678; SEL x679; void*x680; SEL x681; void*x682; unsigned long long x683; void*x684; void*x685; void*x686; void*x687; void*x688; const void*x689; void*x690; void*x691; unsigned int x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; char *x704; void*x705; void*x706; void*x707; void*x708; void*x709; short x710; void*x711; void*x712; void*x713; double x714; void*x715; SEL x716; void*x717; SEL x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; SEL x726; void*x727; SEL x728; void*x729; void*x730; void*x731; long x732; void*x733; long x734; void*x735; out void*x736; BOOL x737; void*x738; void*x739; void*x740; void*x741; void*x742; out void*x743; const void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; out void*x751; SEL x752; void*x753; SEL x754; void*x755; float x756; void*x757; void*x758; void*x759; short x760; void*x761; void*x762; void*x763; void*x764; void*x765; short x766; void*x767; void*x768; void*x769; void*x770; void*x771; const void*x772; void*x773; void*x774; double x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; const void*x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; long x790; void*x791; SEL x792; void*x793; SEL x794; void*x795; unsigned long long x796; void*x797; void*x798; void*x799; void*x800; void*x801; const void*x802; void*x803; void*x804; unsigned int x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; char *x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; struct x827; void*x828; void*x829; void*x830; short x831; void*x832; void*x833; void*x834; const void*x835; void*x836; void*x837; BOOL x838; void*x839; void*x840; void*x841; void*x842; void*x843; float x844; void*x845; void*x846; void*x847; short x848; void*x849; void*x850; void*x851; void*x852; void*x853; short x854; void*x855; void*x856; void*x857; void*x858; void*x859; const void*x860; void*x861; void*x862; double x863; void*x864; void*x865; void*x866; void*x867; void*x868; void*x869; void*x870; const void*x871; void*x872; void*x873; void*x874; void*x875; void*x876; void*x877; long x878; void*x879; SEL x880; void*x881; SEL x882; void*x883; unsigned long long x884; void*x885; void*x886; void*x887; void*x888; void*x889; const void*x890; void*x891; void*x892; unsigned int x893; void*x894; void*x895; void*x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; struct x905; void*x906; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendLandCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; struct x31; void*x32; void*x33; void*x34; short x35; void*x36; void*x37; void*x38; const void*x39; void*x40; void*x41; BOOL x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; short x52; void*x53; void*x54; void*x55; long x56; void*x57; int x58; void*x59; void*x60; void*x61; void*x62; void*x63; unsigned int x64/* : ? */; void*x65; void*x66; void*x67; float x68; void*x69; float x70; void*x71; void*x72; void*x73; const void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; out void*x81; SEL x82; void*x83; SEL x84; void*x85; float x86; void*x87; void*x88; void*x89; short x90; void*x91; void*x92; void*x93; void*x94; void*x95; short x96; void*x97; void*x98; void*x99; void*x100; void*x101; const void*x102; void*x103; void*x104; double x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; long x120; void*x121; SEL x122; void*x123; SEL x124; void*x125; unsigned long long x126; void*x127; void*x128; void*x129; void*x130; void*x131; const void*x132; void*x133; void*x134; unsigned int x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; char *x147; void*x148; void*x149; void*x150; void*x151; void*x152; short x153; void*x154; void*x155; void*x156; double x157; void*x158; SEL x159; void*x160; SEL x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; SEL x169; void*x170; SEL x171; void*x172; void*x173; void*x174; long x175; void*x176; long x177; void*x178; out void*x179; BOOL x180; void*x181; void*x182; void*x183; void*x184; void*x185; out void*x186; const void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; out void*x194; SEL x195; void*x196; SEL x197; void*x198; float x199; void*x200; void*x201; void*x202; short x203; void*x204; void*x205; void*x206; void*x207; void*x208; short x209; void*x210; void*x211; void*x212; void*x213; void*x214; const void*x215; void*x216; void*x217; double x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; const void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; long x233; void*x234; SEL x235; void*x236; SEL x237; void*x238; unsigned long long x239; void*x240; void*x241; void*x242; void*x243; void*x244; const void*x245; void*x246; void*x247; unsigned int x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; char *x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; struct x270; void*x271; void*x272; void*x273; short x274; void*x275; void*x276; void*x277; const void*x278; void*x279; void*x280; BOOL x281; void*x282; void*x283; void*x284; void*x285; void*x286; float x287; void*x288; void*x289; void*x290; short x291; void*x292; void*x293; void*x294; void*x295; void*x296; short x297; void*x298; void*x299; void*x300; void*x301; void*x302; const void*x303; void*x304; void*x305; double x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; const void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; long x321; void*x322; SEL x323; void*x324; SEL x325; void*x326; unsigned long long x327; void*x328; void*x329; void*x330; void*x331; void*x332; const void*x333; void*x334; void*x335; unsigned int x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; struct x348; void*x349; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendRoadCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void x23; void*x24; out void*x25; int x26; void*x27; double x28; void*x29; char *x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void x44; void*x45; out void*x46; int x47; void*x48; double x49; void*x50; char *x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void x65; void*x66; out void*x67; int x68; void*x69; double x70; void*x71; char *x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void x86; void*x87; out void*x88; int x89; void*x90; double x91; void*x92; char *x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; BOOL x107; void*x108; out void*x109; in void*x110; short x111; void*x112; void*x113; void*x114; void*x115; void*x116; void x117; void*x118; out void*x119; int x120; void*x121; double x122; void*x123; char *x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void x138; void*x139; out void*x140; int x141; void*x142; double x143; void*x144; char *x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void x159; void*x160; out void*x161; int x162; void*x163; double x164; void*x165; char *x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; in void*x182; short x183; void*x184; int x185; void*x186; void*x187; void*x188; in void*x189; void*x190; void*x191; double x192; void*x193; void*x194; void*x195; int x196; void*x197; in void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void x215; void*x216; out void*x217; int x218; void*x219; double x220; void*x221; char *x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void x236; void*x237; out void*x238; int x239; void*x240; double x241; void*x242; char *x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void x257; void*x258; out void*x259; int x260; void*x261; double x262; void*x263; char *x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void x278; void*x279; out void*x280; int x281; void*x282; double x283; void*x284; char *x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void x299; void*x300; out void*x301; int x302; void*x303; double x304; void*x305; char *x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void x320; void*x321; out void*x322; int x323; void*x324; double x325; void*x326; char *x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void x341; void*x342; out void*x343; int x344; void*x345; double x346; void*x347; char *x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void x362; void*x363; out void*x364; int x365; void*x366; double x367; void*x368; char *x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; short x383; void*x384; void*x385; void*x386; const void*x387; void*x388; void*x389; BOOL x390; void*x391; void*x392; void*x393; void*x394; void*x395; void x396; void*x397; void*x398; void*x399; BOOL x400; void*x401; void*x402; void*x403; out void*x404; const void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; long x412; void*x413; SEL x414; void*x415; SEL x416; void*x417; void*x418; void*x419; void*x420; void*x421; in void*x422; double x423; void*x424; void*x425; void*x426; const void*x427; unsigned int x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; char *x438; void*x439; void*x440; void*x441; void*x442; void*x443; short x444; void*x445; void*x446; void*x447; double x448; void*x449; SEL x450; void*x451; SEL x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; SEL x460; void*x461; SEL x462; void*x463; void*x464; void*x465; long x466; void*x467; long x468; void*x469; out void*x470; BOOL x471; void*x472; void*x473; void*x474; void*x475; void*x476; out void*x477; const void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; long x485; void*x486; SEL x487; void*x488; SEL x489; void*x490; void*x491; void*x492; void*x493; void*x494; in void*x495; double x496; void*x497; void*x498; void*x499; const void*x500; unsigned int x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; char *x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; struct x521; void*x522; void*x523; void*x524; short x525; void*x526; void*x527; void*x528; const void*x529; void*x530; void*x531; BOOL x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; in void*x542; double x543; void*x544; void*x545; void*x546; const void*x547; unsigned int x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; struct x558; void*x559; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendStencilCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; struct x27; void*x28; void*x29; void*x30; short x31; void*x32; void*x33; void*x34; const void*x35; void*x36; void*x37; BOOL x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; short x52; void*x53; void*x54; void*x55; void*x56; void*x57; in void*x58; out void*x59; double x60; void*x61; void*x62; void*x63; void*x64; void*x65; short x66; void*x67; void*x68; void*x69; double x70; void*x71; SEL x72; void*x73; SEL x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; SEL x82; void*x83; SEL x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; short x94; void*x95; void*x96; void*x97; void*x98; void*x99; void x100; void*x101; void*x102; void*x103; long x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; in void*x124; short x125; void*x126; int x127; void*x128; void*x129; void*x130; in void*x131; void*x132; void*x133; double x134; void*x135; void*x136; void*x137; long x138; void*x139; out void*x140; in void*x141; void*x142; void*x143; void*x144; void*x145; long x146; void*x147; out void*x148; in void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; in void*x158; short x159; void*x160; int x161; void*x162; void*x163; void*x164; in void*x165; void*x166; void*x167; double x168; void*x169; void*x170; void*x171; long x172; void*x173; out void*x174; in void*x175; void*x176; void*x177; void*x178; void*x179; long x180; void*x181; out void*x182; in void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void x192; void*x193; out void*x194; int x195; void*x196; double x197; void*x198; void*x199; void*x200; char *x201; void*x202; void*x203; void*x204; void*x205; void*x206; struct x207; void*x208; }*)arg1 inContext:(id)arg2;
- (void)appendWaterCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; SEL x21; SEL x22; void*x23; void*x24; void*x25; in out const double x26; void*x27; const void*x28; double x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; short x37; void*x38; void*x39; const void*x40; void*x41; in short x42; int x43; void*x44; in void*x45; double x46; void*x47; long x48; out in void*x49; void*x50; long x51; out in void*x52; void*x53; void*x54; short x55; void*x56; double x57; SEL x58; SEL x59; void*x60; void*x61; void*x62; SEL x63; SEL x64; void*x65; void*x66; void*x67; void*x68; short x69; void*x70; void*x71; void x72; void*x73; long x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; in short x84; int x85; void*x86; in void*x87; double x88; void*x89; long x90; out in void*x91; void*x92; long x93; out in void*x94; void*x95; void*x96; short x97; void*x98; double x99; SEL x100; SEL x101; void*x102; void*x103; void*x104; SEL x105; SEL x106; short x107; void*x108; void*x109; const void*x110; double x111; void*x112; void*x113; void*x114; const void*x115; void x116; void*x117; SEL x118; SEL x119; unsigned long x120; void*x121; unsigned int x122/* : ? */; void*x123; long x124; void*x125; void*x126; void*x127; void*x128; const in void*x129; long x130; bycopy unsigned int x131/* : ? */; void*x132; void*x133; BOOL x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; short x141; void*x142; double x143; SEL x144; SEL x145; void*x146; void*x147; void*x148; SEL x149; SEL x150; void*x151; void*x152; short x153; void*x154; void*x155; void*x156; in short x157; int x158; void*x159; in void*x160; double x161; void*x162; long x163; out in void*x164; void*x165; long x166; out in void*x167; void*x168; void*x169; void*x170; void*x171; const void*x172; void*x173; void*x174; void*x175; void*x176; short x177; void*x178; double x179; SEL x180; SEL x181; void*x182; void*x183; void*x184; SEL x185; SEL x186; void*x187; void*x188; void*x189; in out const double x190; void*x191; const void*x192; double x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; long long x200; void*x201; void*x202; long x203; void*x204; void*x205; in short x206; int x207; void*x208; in void*x209; double x210; void*x211; long x212; out in void*x213; void*x214; long x215; out in void*x216; void*x217; void*x218; short x219; void*x220; double x221; SEL x222; SEL x223; void*x224; void*x225; void*x226; SEL x227; SEL x228; void*x229; void*x230; void*x231; void*x232; short x233; void*x234; void*x235; void x236; void*x237; long x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; in short x248; int x249; void*x250; in void*x251; double x252; void*x253; long x254; out in void*x255; void*x256; long x257; out in void*x258; void*x259; void*x260; short x261; void*x262; double x263; SEL x264; SEL x265; void*x266; void*x267; void*x268; SEL x269; SEL x270; short x271; void*x272; void*x273; const void*x274; double x275; void*x276; void*x277; void*x278; const void*x279; void x280; void*x281; SEL x282; SEL x283; unsigned long x284; void*x285; unsigned int x286/* : ? */; void*x287; long x288; void*x289; void*x290; void*x291; void*x292; const in void*x293; long x294; bycopy unsigned int x295/* : ? */; void*x296; void*x297; BOOL x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; short x305; void*x306; double x307; SEL x308; SEL x309; void*x310; void*x311; void*x312; SEL x313; SEL x314; void*x315; long long x316; void*x317; void*x318; long x319; void*x320; void*x321; out void*x322; void*x323; in short x324; int x325; void*x326; in void*x327; double x328; void*x329; long x330; out in void*x331; void*x332; long x333; out in void*x334; void*x335; void*x336; void*x337; void*x338; const void*x339; void*x340; void*x341; void*x342; void*x343; short x344; short x345; void*x346; void*x347; void*x348; const void*x349; void*x350; void*x351; BOOL x352; void*x353; void*x354; void*x355; void*x356; void*x357; double x358; void*x359; void*x360; void*x361; long long x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; out void*x374; SEL x375; void*x376; SEL x377; void*x378; float x379; void*x380; void*x381; void*x382; short x383; void*x384; void*x385; void*x386; void*x387; void*x388; short x389; void*x390; void*x391; void*x392; void*x393; void*x394; const void*x395; void*x396; void*x397; double x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; const void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; long x413; void*x414; SEL x415; void*x416; SEL x417; void*x418; unsigned long long x419; void*x420; void*x421; void*x422; void*x423; void*x424; const void*x425; void*x426; void*x427; unsigned int x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; short x442; void*x443; void*x444; void*x445; double x446; void*x447; SEL x448; void*x449; SEL x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; SEL x458; void*x459; SEL x460; void*x461; void*x462; void*x463; long x464; void*x465; long x466; void*x467; out void*x468; BOOL x469; void*x470; void*x471; void*x472; void*x473; void*x474; out void*x475; const void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; out void*x483; SEL x484; void*x485; SEL x486; void*x487; float x488; void*x489; void*x490; void*x491; short x492; void*x493; void*x494; void*x495; void*x496; void*x497; short x498; void*x499; void*x500; void*x501; void*x502; void*x503; const void*x504; void*x505; void*x506; double x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; const void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; long x522; void*x523; SEL x524; void*x525; SEL x526; void*x527; unsigned long long x528; void*x529; void*x530; void*x531; void*x532; void*x533; const void*x534; void*x535; void*x536; unsigned int x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; struct x557; void*x558; void*x559; void*x560; short x561; void*x562; void*x563; void*x564; const void*x565; void*x566; void*x567; BOOL x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; short x578; void*x579; void*x580; void*x581; long x582; void*x583; int x584; void*x585; void*x586; void*x587; void*x588; void*x589; unsigned int x590/* : ? */; void*x591; void*x592; void*x593; float x594; void*x595; float x596; void*x597; void*x598; void*x599; const void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; out void*x607; SEL x608; void*x609; SEL x610; void*x611; float x612; void*x613; void*x614; void*x615; short x616; void*x617; void*x618; void*x619; void*x620; void*x621; short x622; void*x623; void*x624; void*x625; void*x626; void*x627; const void*x628; void*x629; void*x630; double x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; const void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; long x646; void*x647; SEL x648; void*x649; SEL x650; void*x651; unsigned long long x652; void*x653; void*x654; void*x655; void*x656; void*x657; const void*x658; void*x659; void*x660; unsigned int x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; char *x673; void*x674; void*x675; void*x676; void*x677; void*x678; short x679; void*x680; void*x681; void*x682; double x683; void*x684; SEL x685; void*x686; SEL x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; SEL x695; void*x696; SEL x697; void*x698; void*x699; void*x700; long x701; void*x702; long x703; void*x704; out void*x705; BOOL x706; void*x707; void*x708; void*x709; void*x710; void*x711; out void*x712; const void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; out void*x720; SEL x721; void*x722; SEL x723; void*x724; float x725; void*x726; void*x727; void*x728; short x729; void*x730; void*x731; void*x732; void*x733; void*x734; short x735; void*x736; void*x737; void*x738; void*x739; void*x740; const void*x741; void*x742; void*x743; double x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; void*x751; const void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; long x759; void*x760; SEL x761; void*x762; SEL x763; void*x764; unsigned long long x765; void*x766; void*x767; void*x768; void*x769; void*x770; const void*x771; void*x772; void*x773; unsigned int x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; char *x786; void*x787; void*x788; void*x789; void*x790; void*x791; void*x792; void*x793; void*x794; void*x795; struct x796; void*x797; void*x798; void*x799; short x800; void*x801; void*x802; void*x803; const void*x804; void*x805; void*x806; BOOL x807; void*x808; void*x809; void*x810; void*x811; void*x812; float x813; void*x814; void*x815; void*x816; short x817; void*x818; void*x819; void*x820; void*x821; void*x822; short x823; void*x824; void*x825; void*x826; void*x827; void*x828; const void*x829; void*x830; void*x831; double x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; const void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; long x847; void*x848; SEL x849; void*x850; SEL x851; void*x852; unsigned long long x853; void*x854; void*x855; void*x856; void*x857; void*x858; const void*x859; void*x860; void*x861; unsigned int x862; void*x863; void*x864; void*x865; void*x866; void*x867; void*x868; void*x869; void*x870; void*x871; void*x872; void*x873; struct x874; void*x875; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)dealloc;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)disableRealisticLand;
- (BOOL)disableRealisticRoads;
- (void)flushPools;
- (void)gatherRenderingPreloadItems:(struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x1; struct ShaderLoadItem {} *x2; struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x_3_1_1; } x3; }*)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (BOOL)minimumZoomLevelBoundsCamera;
- (void)reset;
- (void)resetDebugPools:(id)arg1;
- (void)resetPools;
- (id)routePreloadSession;
- (float)sceneAlpha;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setSceneAlpha:(float)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setupRealisticUniformBuffer:(struct ConstantDataTyped<ggl::RealisticTexture::Realistic> { int x1; int x2; int x3; struct shared_ptr<ggl::Buffer> { struct Buffer {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct Range { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; unsigned int x6; struct Range { unsigned int x_7_1_1; unsigned int x_7_1_2; } x7; struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x_8_1_1; char *x_8_1_2; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x_3_2_1; } x_8_1_3; } x8; struct ConstantCReflection {} *x9; }*)arg1 forTile:(id)arg2;
- (id)skyModel;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetDidChange;
- (void)stylesheetDoneChanging;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillTransition:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;

@end
