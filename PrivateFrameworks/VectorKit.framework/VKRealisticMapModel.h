/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticMapModel : VKVectorMapModel <VKMapLayer> {
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableRoadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _animatableTexturedShaderSetupPool;
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    } _batcher;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingFacadeRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingFacadeShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingShadowShaderSetupPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingSidewalkShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _casingTopRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _casingTopRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _casingTopShaderSetupPool;
    struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> > { 
        struct __compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > { 
            struct ClearItem {} *__first_; 
        } __ptr_; 
    } _clearItem;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _coastlineRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _debugRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _debugRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _debugShaderSetupPool;
    BOOL _disableRealisticLand;
    BOOL _disableRealisticRoads;
    double _fade;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _landRenderStateWithoutBlending;
    bool _needDebugReset;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadRenderStateWithoutBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoad::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadShadowRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadShadowShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderItemPool;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _roadStencilRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _roadStencilShaderSetupPool;
    <GEORoutePreloadSession> *_routePreloadSession;
    float _sceneAlpha;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _sidewalkShadowRenderItemPool;
    VKSkyModel *_skyModel;
    struct shared_ptr<gss::StyleManager> { 
        struct StyleManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _styleManager;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _texturedRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > { 
            struct FragmentedPool<ggl::RealisticTexture::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _texturedShaderSetupPool;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant> > { 
        struct ConstantDataTyped<ggl::AnimatableTexture::Variant> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _variantData;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithBlending;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > { 
        struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > { 
            struct RenderState {} *__first_; 
        } __ptr_; 
    } _waterRenderStateWithoutBlending;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableRealisticLand;
@property (nonatomic) BOOL disableRealisticRoads;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) <GEORoutePreloadSession> *routePreloadSession;
@property (nonatomic) float sceneAlpha;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (nonatomic) struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)_calculateZoomLevelWithContext:(id)arg1;
- (void)appendDebugPreloadMissesToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> > { float __first_; } x23; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendDebugPreloadStatusToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; struct x25; void*x26; void*x27; void*x28; short x29; void*x30; void*x31; void*x32; const void*x33; void*x34; void*x35; BOOL x36; void*x37; void*x38; void*x39; void*x40; void*x41; unsigned int x42; void*x43; in void*x44; double x45; void*x46; void*x47; void*x48; void*x49; void*x50; long doublex51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; struct x61; void*x62; }*)arg1 inContext:(id)arg2 forScene:(id)arg3;
- (void)appendLandCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; unsigned int x19; void*x20; void*x21; void*x22; void*x23; void*x24; char *x25; void*x26; void*x27; void*x28; void*x29; struct  struct fast_shared_ptr<ggl::QueryItem> { {} x30; void*x31; char *x32; char *x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; short x43; void*x44; const void*x45; BOOL x46; void*x47; void*x48; float x49; void*x50; short x51; void*x52; void*x53; short x54; void*x55; void*x56; const void*x57; double x58; void*x59; void*x60; void*x61; const void*x62; void*x63; void*x64; long x65; SEL x66; SEL x67; unsigned long long x68; void*x69; void*x70; const void*x71; unsigned int x72; void*x73; void*x74; void*x75; void*x76; void*x77; struct  {} x78; void*x79; char *x80; char *x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; short x91; void*x92; const void*x93; BOOL x94; void*x95; void*x96; float x97; void*x98; short x99; void*x100; void*x101; short x102; void*x103; void*x104; const void*x105; double x106; void*x107; void*x108; void*x109; const void*x110; void*x111; void*x112; long x113; SEL x114; SEL x115; unsigned long long x116; void*x117; void*x118; const void*x119; unsigned int x120; void*x121; void*x122; void*x123; void*x124; void*x125; struct  {} x126; void*x127; char *x128; char *x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; short x139; void*x140; const void*x141; BOOL x142; void*x143; void*x144; void*x145; void*x146; BOOL x147; out void*x148; void*x149; const void*x150; short x151; short x152; void*x153; double x154; void*x155; void*x156; void*x157; int x158; const void*x159; void*x160; void*x161; out SEL x162; SEL x163; float x164; void*x165; short x166; void*x167; void*x168; short x169; void*x170; void*x171; const void*x172; double x173; void*x174; void*x175; void*x176; const void*x177; void*x178; void*x179; long x180; SEL x181; SEL x182; unsigned long long x183; void*x184; void*x185; const void*x186; unsigned int x187; void*x188; void*x189; void*x190; void*x191; void*x192; char *x193; char *x194; void*x195; void*x196; short x197; void*x198; double x199; SEL x200; SEL x201; void*x202; void*x203; void*x204; SEL x205; SEL x206; void*x207; long x208; long x209; out BOOL x210; void*x211; void*x212; out const void*x213; void*x214; void*x215; out SEL x216; SEL x217; float x218; void*x219; short x220; void*x221; void*x222; short x223; void*x224; void*x225; const void*x226; double x227; void*x228; void*x229; void*x230; const void*x231; void*x232; void*x233; long x234; SEL x235; SEL x236; unsigned long long x237; void*x238; void*x239; const void*x240; unsigned int x241; void*x242; void*x243; void*x244; void*x245; void*x246; char *x247; void*x248; void*x249; void*x250; void*x251; struct  struct fast_shared_ptr<ggl::QueryItem> { {} x252; void*x253; char *x254; char *x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendRoadCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void x25; out int x26; double x27; char *x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void x35; out int x36; double x37; char *x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void x45; out int x46; double x47; char *x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; unsigned short x55; void*x56; unsigned long x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void x65; out int x66; double x67; char *x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; unsigned short x75; void*x76; unsigned long x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void x85; out int x86; double x87; char *x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void x95; out int x96; double x97; char *x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void x105; out int x106; double x107; char *x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; long x115; out in void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void x124; out int x125; double x126; char *x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; long x134; out in void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void x143; out int x144; double x145; char *x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; out void*x153; void*x154; void*x155; void x156; out int x157; double x158; char *x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; bool x166; bycopy bycopy unsigned long x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void x175; out int x176; double x177; char *x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void x185; out int x186; double x187; char *x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void x195; out int x196; double x197; char *x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void x205; out int x206; double x207; char *x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void x215; out int x216; double x217; char *x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; out void*x225; void*x226; void*x227; void x228; out int x229; double x230; char *x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; BOOL x238; out in short x239; void*x240; void*x241; void x242; out int x243; double x244; char *x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void x252; out int x253; double x254; char *x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void x262; out int x263; double x264; char *x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void x272; out int x273; double x274; char *x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void x282; out int x283; double x284; char *x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void x292; out int x293; double x294; char *x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void x302; out int x303; double x304; char *x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; long x312; out in void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void x321; out int x322; double x323; char *x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; unsigned short x331; void*x332; unsigned long x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void x341; out int x342; double x343; char *x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; unsigned short x351; void*x352; unsigned long x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void x361; out int x362; double x363; char *x364; short x365; void*x366; void*x367; void*x368; const void*x369; void*x370; void*x371; BOOL x372; void*x373; void*x374; void*x375; void*x376; void*x377; double x378; void*x379; void*x380; void*x381; long long x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; out void*x394; SEL x395; void*x396; SEL x397; void*x398; float x399; void*x400; void*x401; void*x402; short x403; void*x404; void*x405; void*x406; void*x407; void*x408; short x409; void*x410; void*x411; void*x412; void*x413; void*x414; const void*x415; void*x416; void*x417; double x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; const void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; long x433; void*x434; SEL x435; void*x436; SEL x437; void*x438; unsigned long long x439; void*x440; void*x441; void*x442; void*x443; void*x444; const void*x445; void*x446; void*x447; unsigned int x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; short x462; void*x463; void*x464; void*x465; double x466; void*x467; SEL x468; void*x469; SEL x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; SEL x478; void*x479; SEL x480; void*x481; void*x482; void*x483; long x484; void*x485; long x486; void*x487; out void*x488; BOOL x489; void*x490; void*x491; void*x492; void*x493; void*x494; out void*x495; const void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; out void*x503; SEL x504; void*x505; SEL x506; void*x507; float x508; void*x509; void*x510; void*x511; short x512; void*x513; void*x514; void*x515; void*x516; void*x517; short x518; void*x519; void*x520; void*x521; void*x522; void*x523; const void*x524; void*x525; void*x526; double x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; const void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; long x542; void*x543; SEL x544; void*x545; SEL x546; void*x547; unsigned long long x548; void*x549; void*x550; void*x551; void*x552; void*x553; const void*x554; void*x555; void*x556; unsigned int x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; struct x577; void*x578; void*x579; void*x580; short x581; void*x582; void*x583; void*x584; const void*x585; void*x586; void*x587; BOOL x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; short x598; void*x599; void*x600; void*x601; long x602; void*x603; int x604; void*x605; void*x606; void*x607; void*x608; void*x609; unsigned int x610/* : ? */; void*x611; void*x612; void*x613; float x614; void*x615; float x616; void*x617; void*x618; void*x619; const void*x620; void*x621; void*x622; void*x623; void*x624; void*x625; void*x626; out void*x627; SEL x628; void*x629; SEL x630; void*x631; float x632; void*x633; void*x634; void*x635; short x636; void*x637; void*x638; void*x639; void*x640; void*x641; short x642; void*x643; void*x644; void*x645; void*x646; void*x647; const void*x648; void*x649; void*x650; double x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; const void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; long x666; void*x667; SEL x668; void*x669; SEL x670; void*x671; unsigned long long x672; void*x673; void*x674; void*x675; void*x676; void*x677; const void*x678; void*x679; void*x680; unsigned int x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; char *x693; void*x694; void*x695; void*x696; void*x697; void*x698; short x699; void*x700; void*x701; void*x702; double x703; void*x704; SEL x705; void*x706; SEL x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; SEL x715; void*x716; SEL x717; void*x718; void*x719; void*x720; long x721; void*x722; long x723; void*x724; out void*x725; BOOL x726; void*x727; void*x728; void*x729; void*x730; void*x731; out void*x732; const void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; out void*x740; SEL x741; void*x742; SEL x743; void*x744; float x745; void*x746; void*x747; void*x748; short x749; void*x750; void*x751; void*x752; void*x753; void*x754; short x755; void*x756; void*x757; void*x758; void*x759; void*x760; const void*x761; void*x762; void*x763; double x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; const void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; long x779; void*x780; SEL x781; void*x782; SEL x783; void*x784; unsigned long long x785; void*x786; void*x787; void*x788; void*x789; void*x790; const void*x791; void*x792; void*x793; unsigned int x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; char *x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; struct x816; void*x817; void*x818; void*x819; short x820; void*x821; void*x822; void*x823; const void*x824; void*x825; void*x826; BOOL x827; void*x828; void*x829; void*x830; void*x831; void*x832; float x833; void*x834; void*x835; void*x836; short x837; void*x838; void*x839; void*x840; void*x841; void*x842; short x843; void*x844; void*x845; void*x846; void*x847; void*x848; const void*x849; void*x850; void*x851; double x852; void*x853; void*x854; void*x855; void*x856; void*x857; void*x858; void*x859; const void*x860; void*x861; void*x862; void*x863; void*x864; void*x865; void*x866; long x867; void*x868; SEL x869; void*x870; SEL x871; void*x872; unsigned long long x873; void*x874; void*x875; void*x876; void*x877; void*x878; const void*x879; void*x880; void*x881; unsigned int x882; void*x883; void*x884; void*x885; void*x886; void*x887; void*x888; void*x889; void*x890; void*x891; void*x892; void*x893; struct x894; void*x895; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)appendStencilCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; SEL x22; SEL x23; void*x24; void*x25; void*x26; void*x27; short x28; void*x29; void*x30; in out double x31; void*x32; void*x33; short x34; void*x35; double x36; SEL x37; SEL x38; void*x39; void*x40; void*x41; SEL x42; SEL x43; void*x44; void*x45; void*x46; void*x47; short x48; void*x49; void*x50; void x51; void*x52; long x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; bycopy void*x64; void*x65; in void*x66; const int x67; BOOL x68; void*x69; int x70; long x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; short x79; void*x80; double x81; SEL x82; SEL x83; void*x84; void*x85; void*x86; SEL x87; SEL x88; short x89; void*x90; void*x91; const void*x92; double x93; void*x94; void*x95; void*x96; const void*x97; void*x98; void*x99; long x100; SEL x101; SEL x102; void*x103; void*x104; void*x105; void*x106; void*x107; const void*x108; void*x109; long doublex110; void*x111; void*x112; void*x113; void*x114; void*x115; void x116; out int x117; double x118; void*x119; char *x120; void*x121; void*x122; char *x123; void* x124[ /* ? */ ]; void*x125; void*x126; short x127; void*x128; double x129; SEL x130; SEL x131; void*x132; void*x133; void*x134; SEL x135; SEL x136; void*x137; void*x138; unsigned int x139/* : ? */; void*x140; BOOL x141; void*x142; void*x143; void*x144; void*x145; long x146; int x147; short x148; void*x149; void*x150; double x151; void*x152; void*x153; long x154; long x155; out BOOL x156; void*x157; void*x158; out const void*x159; short x160; void*x161; double x162; SEL x163; SEL x164; void*x165; void*x166; void*x167; SEL x168; SEL x169; void*x170; long x171; long x172; out BOOL x173; void*x174; void*x175; out const void*x176; short x177; void*x178; double x179; SEL x180; SEL x181; void*x182; void*x183; void*x184; SEL x185; SEL x186; void*x187; void*x188; void*x189; void*x190; short x191; void*x192; void*x193; in out double x194; void*x195; void*x196; short x197; void*x198; double x199; SEL x200; SEL x201; void*x202; void*x203; void*x204; SEL x205; SEL x206; void*x207; void*x208; void*x209; void*x210; short x211; void*x212; void*x213; void x214; void*x215; long x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; bycopy void*x227; void*x228; in void*x229; const int x230; BOOL x231; void*x232; int x233; long x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; short x242; void*x243; double x244; SEL x245; SEL x246; void*x247; void*x248; void*x249; SEL x250; SEL x251; short x252; void*x253; void*x254; const void*x255; double x256; void*x257; void*x258; void*x259; const void*x260; void*x261; void*x262; long x263; SEL x264; SEL x265; void*x266; void*x267; void*x268; void*x269; void*x270; const void*x271; void*x272; long doublex273; void*x274; void*x275; void*x276; void*x277; void*x278; void x279; out int x280; double x281; void*x282; char *x283; void*x284; void*x285; char *x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; struct x293; void*x294; char *x295; char *x296; void*x297; void*x298; float x299; int x300; const short x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; short x327; void*x328; const void*x329; BOOL x330; void*x331; void*x332; void*x333; void*x334; unsigned int x335/* : ? */; void*x336; BOOL x337; void*x338; void*x339; void*x340; void*x341; long x342; int x343; short x344; void*x345; void*x346; double x347; void*x348; void*x349; long x350; long x351; out BOOL x352; void*x353; void*x354; out const void*x355; short x356; void*x357; double x358; SEL x359; SEL x360; void*x361; void*x362; void*x363; SEL x364; SEL x365; void*x366; long x367; long x368; out BOOL x369; void*x370; void*x371; out const void*x372; short x373; void*x374; double x375; SEL x376; SEL x377; void*x378; void*x379; void*x380; SEL x381; SEL x382; void*x383; void*x384; void*x385; void*x386; short x387; void*x388; void*x389; in out double x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; short x398; void*x399; const void*x400; BOOL x401; void*x402; void*x403; void*x404; void*x405; in double x406; void*x407; const unsigned int x408; void*x409; void*x410; void*x411; bool x412; void*x413; void*x414; BOOL x415; void*x416; void*x417; const void*x418; struct  
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range { {} x419; void*x420; char *x421; void*x422; void*x423; unsigned int x424/* : ? */; void*x425; void*x426; int x427; in void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; short x444; void*x445; const void*x446; BOOL x447; void*x448; void*x449; void*x450; void*x451; in void*x452; void*x453; void*x454; struct  {} x455; void*x456; char *x457; void*x458; void*x459; void*x460; in double x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; short x478; void*x479; const void*x480; BOOL x481; void*x482; void*x483; void*x484; void*x485; BOOL x486; out void*x487; void*x488; const void*x489; short x490; short x491; void*x492; double x493; void*x494; void*x495; void*x496; int x497; const void*x498; void*x499; void*x500; long x501; SEL x502; SEL x503; void*x504; void*x505; in void*x506; void*x507; void*x508; char *x509; void*x510; void*x511; short x512; void*x513; double x514; SEL x515; SEL x516; void*x517; void*x518; void*x519; SEL x520; SEL x521; void*x522; long x523; long x524; out BOOL x525; void*x526; void*x527; out const void*x528; void*x529; void*x530; long x531; SEL x532; SEL x533; void*x534; void*x535; in void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; struct  
                struct Range { {} x542; void*x543; char *x544; void*x545; void*x546; float x547; int x548; const short x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; }*)arg1 inContext:(id)arg2;
- (void)appendWaterCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; double x19; void*x20; int x21; in void*x22; void*x23; void*x24; unsigned short x25; long x26; void*x27; unsigned int x28/* : ? */; unsigned short x29; int x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; short x48; void*x49; const void*x50; BOOL x51; void*x52; void*x53; void*x54; const void*x55; void*x56; unsigned long x57; int x58; short x59; void*x60; void*x61; struct  {} x62; void*x63; char *x64; void*x65; void*x66; const void*x67; void*x68; void*x69; long x70; void*x71; void*x72; void*x73; in void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; }*)arg1 inContext:(id)arg2 skyParameters:(const struct SkyParameters { float x1; float x2; float x3; struct Matrix<float, 4, 1> { float x_4_1_1[4]; } x4; struct Matrix<float, 4, 1> { float x_5_1_1[4]; } x5; }*)arg3;
- (void)dealloc;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)disableRealisticLand;
- (BOOL)disableRealisticRoads;
- (void)flushPools;
- (void)gatherRenderingPreloadItems:(struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x1; struct ShaderLoadItem {} *x2; struct __compressed_pair<ggl::ShaderLoadItem *, std::__1::allocator<ggl::ShaderLoadItem> > { struct ShaderLoadItem {} *x_3_1_1; } x3; }*)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (id)init;
- (unsigned long long)mapLayerPosition;
- (BOOL)minimumZoomLevelBoundsCamera;
- (void)reset;
- (void)resetDebugPools:(id)arg1;
- (void)resetPools;
- (id)routePreloadSession;
- (float)sceneAlpha;
- (void)setDisableRealisticLand:(BOOL)arg1;
- (void)setDisableRealisticRoads:(BOOL)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setSceneAlpha:(float)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setupRealisticUniformBuffer:(struct ConstantDataTyped<ggl::RealisticTexture::Realistic> { int x1; int x2; int x3; struct shared_ptr<ggl::Buffer> { struct Buffer {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct Range { unsigned int x_5_1_1; unsigned int x_5_1_2; } x5; unsigned int x6; struct Range { unsigned int x_7_1_1; unsigned int x_7_1_2; } x7; struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x_8_1_1; char *x_8_1_2; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x_3_2_1; } x_8_1_3; } x8; struct ConstantCReflection {} *x9; }*)arg1 forTile:(id)arg2;
- (id)skyModel;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetDidChange;
- (void)stylesheetDoneChanging;
- (void)stylesheetTransitionDidProgress;
- (void)stylesheetWillTransition:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;

@end
