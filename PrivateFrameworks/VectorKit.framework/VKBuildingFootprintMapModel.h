/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMapLayer, VKMercatorTerrainHeightProvider> {
    struct RenderItemBatcher { 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
        struct vector<ggl::Range, std::__1::allocator<ggl::Range> > { 
            struct Range {} *__begin_; 
            struct Range {} *__end_; 
            struct __compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > { 
                struct Range {} *__first_; 
            } __end_cap_; 
        } _activeRanges; 
        struct RenderItem {} *_prototype; 
        struct Pool<ggl::RenderItem> { 
            struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { 
                    struct __tree_node<void *, void *> {} *__begin_node_; 
                    struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { 
                        struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                            struct __tree_node_base<void *> {} *__left_; 
                        } __first_; 
                    } __pair1_; 
                    struct __compressed_pair<unsigned long, std::__1::less<void *> > { 
                        unsigned long __first_; 
                    } __pair3_; 
                } __tree_; 
            } mAllocatedSlabs; 
            unsigned int mElementsPerSlab; 
            unsigned int mSlabSize; 
            struct FreeList {} *mFreeElement; 
        } _pool; 
        unsigned int _rangePoolCount; 
        struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > { 
            struct MultiRange {} *__begin_; 
            struct MultiRange {} *__end_; 
            struct __compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > { 
                struct MultiRange {} *__first_; 
            } __end_cap_; 
        } _rangePool; 
    } _batcher;
    float _brightness;
    int _buildingMode;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _buildingRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > { 
            struct FragmentedPool<ggl::Building::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _buildingShaderSetupPool;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _currentOccluders;
    <VKBuildingFootprintMapModelDelegate> *_delegate;
    VKTimedAnimation *_fadeBuildingAnimation;
    BOOL _fadeTiles;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _fillRenderState;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _fillRenderStateWithBlending;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingFlat::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _fillShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> > > { 
            struct FragmentedPool<ggl::FoggedBuilding::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _foggedBuildingShaderSetupPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _foggedTopShaderSetupPool;
    VKMercatorTerrainHeightCache *_heightCache;
    BOOL _initializedStyles;
    VK3DObjectSubMapModel *_landmarksModel;
    float _maxLayeringHeight;
    float _minLayeringHeight;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _pointyRoofShaderSetupPool;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _previousOccluders;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _shadowRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingShadow::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _shadowShaderSetupPool;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _shadowsRenderState;
    bool _shouldDraw3DBuildingsIn3DBuildingsRenderPass;
    bool _shouldDraw3DBuildingsInVectorBuildingsRenderPass;
    VKSkyModel *_skyModel;
    int _stencilRef;
    struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > { 
            struct FragmentedPool<ggl::RenderItem> {} *__first_; 
        } __ptr_; 
    } _stroke3DRenderItemPool;
    struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > { 
            struct FragmentedPool<ggl::PrefilteredLine::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _stroke3DShaderSetupPool;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _strokeRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _strokeShaderSetupPool;
    VKTimedAnimation *_styleChangeAnimation;
    struct shared_ptr<gss::StyleManager> { 
        struct StyleManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _styleManager;
    BOOL _supports3DBuildings;
    BOOL _supports3DStrokes;
    BOOL _supportsBuildingShadows;
    BOOL _supportsStrokes;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _threeDRenderStateWithBlending;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _threeDRenderStateWithoutBlending;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _threeDStrokeRenderState;
    struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > { 
        struct __compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > { 
            struct FragmentedPool<ggl::BuildingTop::Shader::Setup> {} *__first_; 
        } __ptr_; 
    } _topShaderSetupPool;
    int _vectorType;
}

@property (nonatomic) int buildingMode;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKBuildingFootprintMapModelDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL fadeTiles;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) VKMercatorTerrainHeightCache *heightCache;
@property (nonatomic, retain) VK3DObjectSubMapModel *landmarksModel;
@property (nonatomic, retain) VKSkyModel *skyModel;
@property (nonatomic) struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; } styleManager;
@property (readonly) Class superclass;
@property (nonatomic) int vectorType;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_clearOccluders;
- (void)_updateBuildingModeForContext:(id)arg1;
- (void)_updateStyles;
- (void)animateTiles:(id)arg1 fromAlpha:(float)arg2 toAlpha:(float)arg3 fromScale:(float)arg4 toScale:(float)arg5;
- (int)buildingMode;
- (void)dealloc;
- (id)delegate;
- (void)didReceiveMemoryWarning:(BOOL)arg1;
- (BOOL)fadeTiles;
- (id)featureMarkerInTile:(id)arg1 atPoint:(struct VKPoint { double x1; double x2; double x3; }*)arg2;
- (void)flushPools;
- (void)generate2DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; const void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; }*)arg3;
- (void)generate2DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; in short x24; int x25; void*x26; in void*x27; double x28; void*x29; int x30; in void*x31; void*x32; void*x33; void*x34; const double x35; unsigned char x36; void*x37; void*x38; const void*x39; BOOL x40; void*x41; void*x42; const void*x43; const out void*x44; void*x45; const void*x46; int x47; void*x48; short x49; void*x50; char *x51; void*x52; void*x53; void*x54; void x55; out int x56; double x57; void*x58; char *x59; void*x60; void*x61; struct  {} x62; void*x63; char *x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; short x74; void*x75; const void*x76; BOOL x77; void*x78; void*x79; void*x80; void*x81; BOOL x82; out void*x83; void*x84; const void*x85; short x86; short x87; void*x88; double x89; void*x90; void*x91; void*x92; int x93; const void*x94; short x95; void*x96; double x97; SEL x98; SEL x99; void*x100; void*x101; void*x102; SEL x103; SEL x104; void*x105; void*x106; void*x107; const void*x108; void*x109; void*x110; void*x111; in double x112; void*x113; in out double x114; void*x115; void*x116; short x117; void*x118; double x119; SEL x120; SEL x121; void*x122; void*x123; void*x124; SEL x125; SEL x126; void*x127; void*x128; void*x129; const void*x130; void*x131; void*x132; in out double x133; void*x134; void*x135; unsigned int x136/* : ? */; void*x137; short x138; void*x139; void*x140; void x141; out int x142; double x143; void*x144; char *x145; void*x146; void*x147; char *x148; void*x149; void*x150; void*x151; short x152; void*x153; double x154; SEL x155; SEL x156; void*x157; void*x158; void*x159; SEL x160; SEL x161; void*x162; long x163; long x164; out BOOL x165; void*x166; void*x167; out const void*x168; short x169; void*x170; double x171; SEL x172; SEL x173; void*x174; void*x175; void*x176; SEL x177; SEL x178; void*x179; void*x180; void*x181; const void*x182; void*x183; void*x184; in out double x185; void*x186; void*x187; short x188; void*x189; double x190; SEL x191; SEL x192; void*x193; void*x194; void*x195; SEL x196; SEL x197; void*x198; void*x199; void x200; void*x201; long x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; in short x212; int x213; void*x214; in void*x215; double x216; void*x217; int x218; in void*x219; void*x220; void*x221; void*x222; const double x223; unsigned char x224; void*x225; void*x226; const void*x227; BOOL x228; void*x229; void*x230; const void*x231; const out void*x232; void*x233; const void*x234; int x235; void*x236; short x237; void*x238; char *x239; void*x240; void*x241; void*x242; void x243; out int x244; double x245; void*x246; char *x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; struct  struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> { {} x254; void*x255; char *x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void x266; void*x267; void*x268; void*x269; BOOL x270; void*x271; void*x272; void*x273; out void*x274; const void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; long x282; void*x283; SEL x284; void*x285; SEL x286; void*x287; bool x288; void*x289; void*x290; void*x291; float x292; void*x293; float x294; void*x295; void*x296; void*x297; const void*x298; unsigned long x299; void*x300; out void*x301; void*x302; void*x303; double x304; void*x305; unsigned int x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; short x318; void*x319; void*x320; void*x321; double x322; void*x323; SEL x324; void*x325; SEL x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; SEL x334; void*x335; SEL x336; void*x337; void*x338; void*x339; long x340; void*x341; long x342; void*x343; out void*x344; BOOL x345; void*x346; void*x347; void*x348; void*x349; void*x350; out void*x351; const void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; long x359; void*x360; SEL x361; void*x362; SEL x363; void*x364; bool x365; void*x366; void*x367; void*x368; float x369; void*x370; float x371; void*x372; void*x373; void*x374; const void*x375; unsigned long x376; void*x377; out void*x378; void*x379; void*x380; double x381; void*x382; unsigned int x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; struct x399; void*x400; void*x401; void*x402; short x403; void*x404; void*x405; void*x406; const void*x407; void*x408; void*x409; BOOL x410; void*x411; void*x412; void*x413; void*x414; void*x415; bool x416; void*x417; void*x418; void*x419; float x420; void*x421; float x422; void*x423; void*x424; void*x425; const void*x426; unsigned long x427; void*x428; out void*x429; void*x430; void*x431; double x432; void*x433; unsigned int x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; struct x444; void*x445; }*)arg3;
- (void)generate3DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; int x19; void*x20; double x21; void*x22; char *x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; unsigned short x37; void*x38; void*x39; void*x40; unsigned long x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void x57; void*x58; out void*x59; int x60; void*x61; double x62; void*x63; char *x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; unsigned short x78; void*x79; void*x80; void*x81; unsigned long x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void x98; void*x99; out void*x100; int x101; void*x102; double x103; void*x104; char *x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void x119; void*x120; out void*x121; int x122; void*x123; double x124; void*x125; char *x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void x140; void*x141; out void*x142; int x143; void*x144; double x145; void*x146; char *x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; long x161; void*x162; out void*x163; in void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void x181; void*x182; out void*x183; int x184; void*x185; double x186; void*x187; char *x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; long x202; void*x203; out void*x204; in void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void x222; void*x223; out void*x224; int x225; void*x226; double x227; void*x228; char *x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; out void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void x250; void*x251; out void*x252; int x253; void*x254; double x255; void*x256; char *x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; bool x271; void*x272; bycopy void*x273; bycopy void*x274; unsigned long x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void x291; void*x292; out void*x293; int x294; void*x295; double x296; void*x297; char *x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void x312; void*x313; out void*x314; int x315; void*x316; double x317; void*x318; char *x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void x333; void*x334; out void*x335; int x336; void*x337; double x338; void*x339; char *x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void x354; void*x355; out void*x356; int x357; void*x358; double x359; void*x360; char *x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void x375; void*x376; out void*x377; int x378; void*x379; double x380; void*x381; char *x382; void*x383; short x384; void*x385; void*x386; void*x387; const void*x388; void*x389; void*x390; BOOL x391; void*x392; void*x393; void*x394; void*x395; void*x396; double x397; void*x398; void*x399; void*x400; long long x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; out void*x413; SEL x414; void*x415; SEL x416; void*x417; float x418; void*x419; void*x420; void*x421; short x422; void*x423; void*x424; void*x425; void*x426; void*x427; short x428; void*x429; void*x430; void*x431; void*x432; void*x433; const void*x434; void*x435; void*x436; double x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; const void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; long x452; void*x453; SEL x454; void*x455; SEL x456; void*x457; unsigned long long x458; void*x459; void*x460; void*x461; void*x462; void*x463; const void*x464; void*x465; void*x466; unsigned int x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; short x481; void*x482; void*x483; void*x484; double x485; void*x486; SEL x487; void*x488; SEL x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; SEL x497; void*x498; SEL x499; void*x500; void*x501; void*x502; long x503; void*x504; long x505; void*x506; out void*x507; BOOL x508; void*x509; void*x510; void*x511; void*x512; void*x513; out void*x514; const void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; out void*x522; SEL x523; void*x524; SEL x525; void*x526; float x527; void*x528; void*x529; void*x530; short x531; void*x532; void*x533; void*x534; void*x535; void*x536; short x537; void*x538; void*x539; void*x540; void*x541; void*x542; const void*x543; void*x544; void*x545; double x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; const void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; long x561; void*x562; SEL x563; void*x564; SEL x565; void*x566; unsigned long long x567; void*x568; void*x569; void*x570; void*x571; void*x572; const void*x573; void*x574; void*x575; unsigned int x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; struct x596; void*x597; void*x598; void*x599; short x600; void*x601; void*x602; void*x603; const void*x604; void*x605; void*x606; BOOL x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; short x617; void*x618; void*x619; void*x620; long x621; void*x622; int x623; void*x624; void*x625; void*x626; void*x627; void*x628; unsigned int x629/* : ? */; void*x630; void*x631; void*x632; float x633; void*x634; float x635; void*x636; void*x637; void*x638; const void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; out void*x646; SEL x647; void*x648; SEL x649; void*x650; float x651; void*x652; void*x653; void*x654; short x655; void*x656; void*x657; void*x658; void*x659; void*x660; short x661; void*x662; void*x663; void*x664; void*x665; void*x666; const void*x667; void*x668; void*x669; double x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; const void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; long x685; void*x686; SEL x687; void*x688; SEL x689; void*x690; unsigned long long x691; void*x692; void*x693; void*x694; void*x695; void*x696; const void*x697; void*x698; void*x699; unsigned int x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; char *x712; void*x713; void*x714; void*x715; void*x716; void*x717; short x718; void*x719; void*x720; void*x721; double x722; void*x723; SEL x724; void*x725; SEL x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; SEL x734; void*x735; SEL x736; void*x737; void*x738; void*x739; long x740; void*x741; long x742; void*x743; out void*x744; BOOL x745; void*x746; void*x747; void*x748; void*x749; void*x750; out void*x751; const void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; out void*x759; SEL x760; void*x761; SEL x762; void*x763; float x764; void*x765; void*x766; void*x767; short x768; void*x769; void*x770; void*x771; void*x772; void*x773; short x774; void*x775; void*x776; void*x777; void*x778; void*x779; const void*x780; void*x781; void*x782; double x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; void*x790; const void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; long x798; void*x799; SEL x800; void*x801; SEL x802; void*x803; unsigned long long x804; void*x805; void*x806; void*x807; void*x808; void*x809; const void*x810; void*x811; void*x812; unsigned int x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; char *x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; struct x835; void*x836; void*x837; void*x838; short x839; void*x840; void*x841; void*x842; const void*x843; void*x844; void*x845; BOOL x846; void*x847; void*x848; void*x849; void*x850; void*x851; float x852; void*x853; void*x854; void*x855; short x856; void*x857; void*x858; void*x859; void*x860; void*x861; short x862; void*x863; void*x864; void*x865; void*x866; void*x867; const void*x868; void*x869; void*x870; double x871; void*x872; void*x873; void*x874; void*x875; void*x876; void*x877; void*x878; const void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; void*x885; long x886; void*x887; SEL x888; void*x889; SEL x890; void*x891; unsigned long long x892; void*x893; void*x894; void*x895; void*x896; void*x897; const void*x898; void*x899; void*x900; unsigned int x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; void*x912; struct x913; void*x914; }*)arg3;
- (void)generate3DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; struct x31; void*x32; void*x33; void*x34; short x35; void*x36; void*x37; void*x38; const void*x39; void*x40; void*x41; BOOL x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; short x52; void*x53; void*x54; void*x55; long x56; void*x57; int x58; void*x59; void*x60; void*x61; void*x62; void*x63; unsigned int x64/* : ? */; void*x65; void*x66; void*x67; float x68; void*x69; float x70; void*x71; void*x72; void*x73; const void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; out void*x81; SEL x82; void*x83; SEL x84; void*x85; float x86; void*x87; void*x88; void*x89; short x90; void*x91; void*x92; void*x93; void*x94; void*x95; short x96; void*x97; void*x98; void*x99; void*x100; void*x101; const void*x102; void*x103; void*x104; double x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; long x120; void*x121; SEL x122; void*x123; SEL x124; void*x125; unsigned long long x126; void*x127; void*x128; void*x129; void*x130; void*x131; const void*x132; void*x133; void*x134; unsigned int x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; char *x147; void*x148; void*x149; void*x150; void*x151; void*x152; short x153; void*x154; void*x155; void*x156; double x157; void*x158; SEL x159; void*x160; SEL x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; SEL x169; void*x170; SEL x171; void*x172; void*x173; void*x174; long x175; void*x176; long x177; void*x178; out void*x179; BOOL x180; void*x181; void*x182; void*x183; void*x184; void*x185; out void*x186; const void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; out void*x194; SEL x195; void*x196; SEL x197; void*x198; float x199; void*x200; void*x201; void*x202; short x203; void*x204; void*x205; void*x206; void*x207; void*x208; short x209; void*x210; void*x211; void*x212; void*x213; void*x214; const void*x215; void*x216; void*x217; double x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; const void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; long x233; void*x234; SEL x235; void*x236; SEL x237; void*x238; unsigned long long x239; void*x240; void*x241; void*x242; void*x243; void*x244; const void*x245; void*x246; void*x247; unsigned int x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; char *x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; struct x270; void*x271; void*x272; void*x273; short x274; void*x275; void*x276; void*x277; const void*x278; void*x279; void*x280; BOOL x281; void*x282; void*x283; void*x284; void*x285; void*x286; float x287; void*x288; void*x289; void*x290; short x291; void*x292; void*x293; void*x294; void*x295; void*x296; short x297; void*x298; void*x299; void*x300; void*x301; void*x302; const void*x303; void*x304; void*x305; double x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; const void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; long x321; void*x322; SEL x323; void*x324; SEL x325; void*x326; unsigned long long x327; void*x328; void*x329; void*x330; void*x331; void*x332; const void*x333; void*x334; void*x335; unsigned int x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; struct x348; void*x349; }*)arg3;
- (void)generateRenderItemsForBuildingShadowsInScene:(id)arg1 withContext:(id)arg2 commandBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; bool x37; void*x38; bycopy void*x39; bycopy void*x40; unsigned long x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; }*)arg3;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (double)heightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (id)heightCache;
- (id)init;
- (id)landmarksModel;
- (unsigned long long)mapLayerPosition;
- (double)maxTileHeightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (void)removePersistingExitingTiles:(id)arg1;
- (void)reset;
- (void)resetPools;
- (void)setActive:(BOOL)arg1;
- (void)setBuildingMode:(int)arg1;
- (void)setBuildingMode:(int)arg1 animated:(BOOL)arg2;
- (void)setDelegate:(id)arg1;
- (void)setFadeTiles:(BOOL)arg1;
- (void)setLandmarksModel:(id)arg1;
- (void)setSkyModel:(id)arg1;
- (void)setStyleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)setVectorType:(int)arg1;
- (id)skyModel;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetDidChange;
- (int)vectorType;
- (void)vectorTypeDidChange;
- (BOOL)wantsCategorizedSourceTiles;
- (void)willStartDrawingTiles:(id)arg1;
- (void)willStopDrawingTiles:(id)arg1;

@end
