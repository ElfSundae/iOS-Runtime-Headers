/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKLabelMarker : VKFeatureMarker <GEOTransitArtworkDataSource, MKCalloutSource> {
    float _contentScale;
    unsigned long long _featureID;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long> > { 
        unsigned long long *__begin_; 
        unsigned long long *__end_; 
        struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > { 
            unsigned long long *__first_; 
        } __end_cap_; 
    } _featureIDs;
    struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { 
        int (**_vptr$_retain_ptr)(); 
        GEOVectorTile *_obj; 
        struct _retain_objc { } _retain; 
        struct _release_objc { } _release; 
    } _featureTile;
    int _featureType;
    NSArray *_iconImageKeys;
    NSArray *_imageKeys;
    struct shared_ptr<vk::InfoLabel> { 
        struct InfoLabel {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _label;
    unsigned char _labelFeatureType;
    struct shared_ptr<vk::LabelManager> { 
        struct LabelManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _manager;
    NSArray *_relatedTexts;
    NSArray *_shields;
    int _sortKey;
}

@property (nonatomic, readonly) NSString *accessibilityText;
@property (nonatomic, readonly) int artworkSourceType;
@property (nonatomic, readonly) int artworkUseType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIView *detailCalloutAccessoryView;
@property (nonatomic, readonly) BOOL hasRoutingIncidentBadge;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) <GEOTransitIconDataSource> *iconDataSource;
@property (nonatomic, readonly) NSArray *iconImageKeys;
@property (nonatomic, readonly) NSArray *imageKeys;
@property (nonatomic, retain) UIView *leftCalloutAccessoryView;
@property (nonatomic, readonly) NSArray *relatedTexts;
@property (nonatomic, retain) UIView *rightCalloutAccessoryView;
@property (nonatomic, readonly) <GEOTransitShieldDataSource> *shieldDataSource;
@property (nonatomic, readonly) NSArray *shields;
@property (nonatomic, copy) NSString *subtitle;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *title;
@property (nonatomic, readonly) NSArray *transitSystems;

// Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct { double x1; double x2; double x3; double x4; })_bounds;
- (id)_iconImageKeysForLabel;
- (void)_populateIconImageKeysFromTransitAccessPointFeature:(struct { struct { struct { id x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; unsigned long long x_1_2_7; BOOL x_1_2_8; unsigned long long x_1_2_9; float x_1_2_10; unsigned long long x_1_2_11; id x_1_2_12; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; struct { /* ? */ } *x_1_1_4; float x_1_1_5; unsigned int x_1_1_6; unsigned char x_1_1_7; BOOL x_1_1_8; BOOL x_1_1_9; } x1; unsigned long long x2; unsigned char x3; float x4; unsigned short x5; float x6; }*)arg1;
- (void)_populateImageKeysFromRouteTransitNodeFeature:(const struct LabelExternalPointFeature { int (**x1)(); unsigned char x2; unsigned long long x3; unsigned long long x4; struct Matrix<double, 2, 1> { double x_5_1_1[2]; } x5; struct _retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_6_1_1)(); id x_6_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_6_1_3; const void*x_6_1_4; void*x_6_1_5; void*x_6_1_6; int x_6_1_7; in void*x_6_1_8; out unsigned int x_6_1_9/* : ? */; void*x_6_1_10; BOOL x_6_1_11; void*x_6_1_12; } x6; struct _release_objc { } x7; }*)arg1;
- (void)_populateImageKeysFromTransitAccessPointFeature:(struct { struct { struct { id x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; unsigned long long x_1_2_7; BOOL x_1_2_8; unsigned long long x_1_2_9; float x_1_2_10; unsigned long long x_1_2_11; id x_1_2_12; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; struct { /* ? */ } *x_1_1_4; float x_1_1_5; unsigned int x_1_1_6; unsigned char x_1_1_7; BOOL x_1_1_8; BOOL x_1_1_9; } x1; unsigned long long x2; unsigned char x3; float x4; unsigned short x5; float x6; }*)arg1;
- (void)_populateImageKeysFromTransitLineFeature:(struct { struct { id x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned long long x_1_1_7; BOOL x_1_1_8; unsigned long long x_1_1_9; float x_1_1_10; unsigned long long x_1_1_11; id x_1_1_12; } x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; unsigned int x6; float x7; unsigned int x8; unsigned int x9; unsigned int x10; }*)arg1;
- (void)_populateImageKeysFromTransitLinkFeature:(const struct TransitLinksLabelFeature { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long x_1_2_1; BOOL x_1_2_2[40]; } x_2_1_1; } x2; unsigned long long x3; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_4_1_1; struct __shared_weak_count {} *x_4_1_2; } x4; struct vector<std::__1::shared_ptr<vk::LabelStyle>, std::__1::allocator<std::__1::shared_ptr<vk::LabelStyle> > > { struct shared_ptr<vk::LabelStyle> {} *x_5_1_1; struct shared_ptr<vk::LabelStyle> {} *x_5_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelStyle> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelStyle> > > { struct shared_ptr<vk::LabelStyle> {} *x_3_2_1; } x_5_1_3; } x5; float x6; unsigned int x7; unsigned int x8; bool x9; unsigned char x10; struct LabelFeatureThunkBase {} *x11; struct vector<geo::fast_shared_ptr<vk::TextDataStringInfo>, std::__1::allocator<geo::fast_shared_ptr<vk::TextDataStringInfo> > > { struct fast_shared_ptr<vk::TextDataStringInfo> {} *x_12_1_1; struct fast_shared_ptr<vk::TextDataStringInfo> {} *x_12_1_2; struct __compressed_pair<geo::fast_shared_ptr<vk::TextDataStringInfo> *, std::__1::allocator<geo::fast_shared_ptr<vk::TextDataStringInfo> > > { struct fast_shared_ptr<vk::TextDataStringInfo> {} *x_3_2_1; } x_12_1_3; } x12; struct vector<std::__1::shared_ptr<vk::TextDataFontVariant>, std::__1::allocator<std::__1::shared_ptr<vk::TextDataFontVariant> > > { struct shared_ptr<vk::TextDataFontVariant> {} *x_13_1_1; struct shared_ptr<vk::TextDataFontVariant> {} *x_13_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::TextDataFontVariant> *, std::__1::allocator<std::__1::shared_ptr<vk::TextDataFontVariant> > > { struct shared_ptr<vk::TextDataFontVariant> {} *x_3_2_1; } x_13_1_3; } x13; unsigned long long x14; unsigned char x15; struct shared_ptr<vk::LabelExternalRoadFeature> { struct LabelExternalRoadFeature {} *x_16_1_1; struct __shared_weak_count {} *x_16_1_2; } x16; struct vector<vk::LabelShieldEntry, std::__1::allocator<vk::LabelShieldEntry> > { struct LabelShieldEntry {} *x_17_1_1; struct LabelShieldEntry {} *x_17_1_2; struct __compressed_pair<vk::LabelShieldEntry *, std::__1::allocator<vk::LabelShieldEntry> > { struct LabelShieldEntry {} *x_3_2_1; } x_17_1_3; } x17; struct RoadMetricsEntry { double x_18_1_1; double x_18_1_2; double x_18_1_3; double x_18_1_4; double x_18_1_5; double x_18_1_6; double x_18_1_7; double x_18_1_8; int x_18_1_9; bool x_18_1_10; bool x_18_1_11; bool x_18_1_12; bool x_18_1_13; } x18[20]; struct RoadPositions { struct map<vk::LabelIdentifier, vk::RoadPosition, std::__1::less<vk::LabelIdentifier>, std::__1::allocator<std::__1::pair<const vk::LabelIdentifier, vk::RoadPosition> > > { struct __tree<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::__map_value_compare<vk::LabelIdentifier, std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::less<vk::LabelIdentifier>, true>, std::__1::allocator<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition> > > { struct __tree_node<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<vk::LabelIdentifier, std::__1::__value_type<vk::LabelIdentifier, vk::RoadPosition>, std::__1::less<vk::LabelIdentifier>, true> > { unsigned long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_19_1_1; struct LabelIdentifier { unsigned int x_2_2_1; } x_19_1_2; unsigned int x_19_1_3; struct shared_ptr<vk::LabelPath> { struct LabelPath {} *x_4_2_1; struct __shared_weak_count {} *x_4_2_2; } x_19_1_4; unsigned int x_19_1_5; bool x_19_1_6; struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > { struct __tree_node<void *, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::less<void *> > { unsigned long x_3_4_1; } x_1_3_3; } x_7_2_1; } x_19_1_7; unsigned char x_19_1_8; } x19; struct vector<bool, std::__1::allocator<bool> > { unsigned long *x_20_1_1; unsigned int x_20_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long x_3_2_1; } x_20_1_3; } x20; bool x21; bool x22; struct vector<vk::StringWithLocale, std::__1::allocator<vk::StringWithLocale> > { struct StringWithLocale {} *x_23_1_1; struct StringWithLocale {} *x_23_1_2; struct __compressed_pair<vk::StringWithLocale *, std::__1::allocator<vk::StringWithLocale> > { struct StringWithLocale {} *x_3_2_1; } x_23_1_3; } x23; struct vector<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink>, std::__1::allocator<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> > > { struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> {} *x_24_1_1; struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> {} *x_24_1_2; struct __compressed_pair<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> *, std::__1::allocator<geo::fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> > > { struct fast_shared_ptr<vk::TransitLinksLabelFeature::LabelTransitLink> {} *x_3_2_1; } x_24_1_3; } x24; struct vector<vk::TransitLinksLabelFeature::LabelTransitLine, std::__1::allocator<vk::TransitLinksLabelFeature::LabelTransitLine> > { struct LabelTransitLine {} *x_25_1_1; struct LabelTransitLine {} *x_25_1_2; struct __compressed_pair<vk::TransitLinksLabelFeature::LabelTransitLine *, std::__1::allocator<vk::TransitLinksLabelFeature::LabelTransitLine> > { struct LabelTransitLine {} *x_3_2_1; } x_25_1_3; } x25; struct map<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *, std::__1::less<GEOTransitLink *>, std::__1::allocator<std::__1::pair<GEOTransitLink *const, vk::TransitLinksLabelFeature::LabelTransitLink *> > > { struct __tree<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::__map_value_compare<GEOTransitLink *, std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::less<GEOTransitLink *>, true>, std::__1::allocator<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *> > > { struct __tree_node<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<GEOTransitLink *, std::__1::__value_type<GEOTransitLink *, vk::TransitLinksLabelFeature::LabelTransitLink *>, std::__1::less<GEOTransitLink *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_26_1_1; } x26; unsigned char x27; struct vector<vk::TransitLinksLabelFeature::LabelStyleInfo, std::__1::allocator<vk::TransitLinksLabelFeature::LabelStyleInfo> > { struct LabelStyleInfo {} *x_28_1_1; struct LabelStyleInfo {} *x_28_1_2; struct __compressed_pair<vk::TransitLinksLabelFeature::LabelStyleInfo *, std::__1::allocator<vk::TransitLinksLabelFeature::LabelStyleInfo> > { struct LabelStyleInfo {} *x_3_2_1; } x_28_1_3; } x28; struct unordered_map<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char, vk::TransitLinksLabelFeature::AttributesHash, vk::TransitLinksLabelFeature::AttributesEqual, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char> > > { struct __hash_table<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, std::__1::__unordered_map_hasher<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesHash, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesEqual, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> *> { struct __hash_node<std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesHash, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<GEOFeatureStyleAttributes *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, unsigned char>, vk::TransitLinksLabelFeature::AttributesEqual, true> > { float x_4_3_1; } x_1_2_4; } x_29_1_1; } x29; struct mutex { struct _opaque_pthread_mutex_t { long x_1_2_1; BOOL x_1_2_2[40]; } x_30_1_1; } x30; bool x31; struct vector<vk::TransitLinksLabelFeature::WorkUnit, std::__1::allocator<vk::TransitLinksLabelFeature::WorkUnit> > { struct WorkUnit {} *x_32_1_1; struct WorkUnit {} *x_32_1_2; struct __compressed_pair<vk::TransitLinksLabelFeature::WorkUnit *, std::__1::allocator<vk::TransitLinksLabelFeature::WorkUnit> > { struct WorkUnit {} *x_3_2_1; } x_32_1_3; } x32; }*)arg1;
- (void)_populateImageKeysFromTransitNodeFeature:(struct GEOTransitNodeFeature { struct { struct { id x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; unsigned long long x_1_2_7; BOOL x_1_2_8; unsigned long long x_1_2_9; float x_1_2_10; unsigned long long x_1_2_11; id x_1_2_12; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; struct { /* ? */ } *x_1_1_4; float x_1_1_5; unsigned int x_1_1_6; unsigned char x_1_1_7; BOOL x_1_1_8; BOOL x_1_1_9; } x1; struct _NSRange { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; struct { /* ? */ } *x3; struct GEOTransitNodeFeature {} *x4; unsigned long long *x5; unsigned long long *x6; BOOL x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned short x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; float x16; struct _NSRange { unsigned int x_17_1_1; unsigned int x_17_1_2; } x17; bool x18; bool x19; bool x20; struct _NSRange { unsigned int x_21_1_1; unsigned int x_21_1_2; } x21; }*)arg1;
- (void)_populateRelatedTextForTransitAccessPointFeature:(struct { struct { struct { id x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; unsigned int x_1_2_6; unsigned long long x_1_2_7; BOOL x_1_2_8; unsigned long long x_1_2_9; float x_1_2_10; unsigned long long x_1_2_11; id x_1_2_12; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; struct { /* ? */ } *x_1_1_4; float x_1_1_5; unsigned int x_1_1_6; unsigned char x_1_1_7; BOOL x_1_1_8; BOOL x_1_1_9; } x1; unsigned long long x2; unsigned char x3; float x4; unsigned short x5; float x6; }*)arg1;
- (void)_populateRelatedTextFromTransitlines;
- (unsigned long long)animationID;
- (unsigned long long)businessID;
- (struct CGPoint { float x1; float x2; })calloutAnchorPointWithCanvasSize:(struct CGSize { float x1; float x2; })arg1 canvasScale:(float)arg2 snapToPixels:(BOOL)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })calloutAnchorRect;
- (struct { double x1; double x2; })coordinate;
- (unsigned int)countFeatureIDs;
- (void)dealloc;
- (id)debugAnchorPointString;
- (id)featureHandles;
- (unsigned long long)featureID;
- (const unsigned long long*)featureIDs;
- (id)featureTile;
- (int)featureType;
- (BOOL)hasBusinessID;
- (id)iconImageKeys;
- (const struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_4_1; unsigned int x_1_4_2; char *x_1_4_3; } x_1_3_1; struct __short { union { unsigned char x_1_5_1; BOOL x_1_5_2; } x_2_4_1; BOOL x_2_4_2[11]; } x_1_3_2; struct __raw { unsigned long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; }*)iconName;
- (id)iconNameAsNSString;
- (id)imageKeys;
- (id)incident;
- (struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x1; struct __shared_weak_count {} *x2; })infoLabel;
- (id)initWithManager:(const struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; }*)arg1 infoLabel:(const struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x1; struct __shared_weak_count {} *x2; }*)arg2 contentScale:(float)arg3 featureInfo:(const struct LabelFeatureInfo { unsigned long long x1; unsigned char x2; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg4;
- (BOOL)isFlyoverTour;
- (BOOL)isLabelHitAtScreenPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (BOOL)isOnRoute;
- (BOOL)isOneWayArrow;
- (BOOL)isSelectable;
- (BOOL)isTextVisible;
- (BOOL)isTrafficIncident;
- (BOOL)isTransit;
- (BOOL)isTransitLine;
- (id)mapRegion;
- (id)name;
- (id)relatedTexts;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })screenCollisionBounds;
- (struct CGPoint { float x1; float x2; })screenPointToScrollRelativeToWithCanvasSize:(struct CGSize { float x1; float x2; })arg1 canvasScale:(float)arg2;
- (int)selectionType;
- (void)setLabelPressed:(BOOL)arg1;
- (void)setLabelSelected:(BOOL)arg1;
- (id)shields;
- (BOOL)shouldActivateFeatureSelectionMode;
- (int)sortKey;
- (id)styleAttributes;
- (id)subtext;
- (id)text;
- (id)transitSystems;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

- (id)_annotationTitle;
- (id)accessibilityText;
- (int)artworkSourceType;
- (int)artworkUseType;
- (id)detailCalloutAccessoryView;
- (BOOL)hasRoutingIncidentBadge;
- (id)iconDataSource;
- (id)leftCalloutAccessoryView;
- (id)rightCalloutAccessoryView;
- (void)setDetailCalloutAccessoryView:(id)arg1;
- (void)setLeftCalloutAccessoryView:(id)arg1;
- (void)setRightCalloutAccessoryView:(id)arg1;
- (void)setSubtitle:(id)arg1;
- (id)shieldDataSource;
- (id)subtitle;
- (id)title;

@end
