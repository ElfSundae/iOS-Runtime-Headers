/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKAnnotationMarkerLayer : NSObject {
    struct CGPoint { 
        float x; 
        float y; 
    } _accumulatedCenterOffset;
    VKAnnotationMarker *_annotationMarker;
    struct CGPoint { 
        float x; 
        float y; 
    } _centerOffset;
    float _contentScale;
    BOOL _hasMass;
    BOOL _hasScreenRect;
    VKAnnotationModel *_model;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    } _screenRect;
    int _styleType;
    NSMutableArray *_sublayers;
    VKAnnotationMarkerLayer *_superlayer;
}

@property (nonatomic) struct CGPoint { float x1; float x2; } accumulatedCenterOffset;
@property (nonatomic) VKAnnotationMarker *annotationMarker;
@property (nonatomic) struct CGPoint { float x1; float x2; } centerOffset;
@property (nonatomic, readonly) float contentScale;
@property (nonatomic) BOOL hasMass;
@property (nonatomic, readonly) BOOL hasScreenRect;
@property (nonatomic) VKAnnotationModel *model;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } screenRect;
@property (nonatomic) int styleType;
@property (nonatomic, readonly, copy) NSArray *sublayers;
@property (nonatomic) VKAnnotationMarkerLayer *superlayer;

- (id)_styleAttributes;
- (void)_updateStyle;
- (unsigned char)_vectorType;
- (struct CGPoint { float x1; float x2; })accumulatedCenterOffset;
- (void)addSublayer:(id)arg1;
- (id)annotationMarker;
- (void)appendCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned int x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned int x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; in void*x21; double x22; void*x23; bool x24; void*x25; void*x26; void*x27; float x28; void*x29; float x30; void*x31; void*x32; void*x33; const void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; struct x43; void*x44; void*x45; void*x46; short x47; void*x48; void*x49; void*x50; const void*x51; void*x52; void*x53; BOOL x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; BOOL x64; void*x65; out void*x66; void*x67; void*x68; void*x69; void*x70; const void*x71; void*x72; void*x73; short x74; void*x75; short x76; void*x77; void*x78; void*x79; double x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; int x88; void*x89; const void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; long x97; void*x98; SEL x99; void*x100; SEL x101; void*x102; unsigned char x103; void*x104; out void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; in void*x112; double x113; void*x114; bool x115; void*x116; void*x117; void*x118; float x119; void*x120; float x121; void*x122; void*x123; void*x124; const void*x125; void*x126; void*x127; char *x128; void*x129; void*x130; void*x131; void*x132; void*x133; short x134; void*x135; void*x136; void*x137; double x138; void*x139; SEL x140; void*x141; SEL x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; SEL x150; void*x151; SEL x152; void*x153; double x154; void*x155; void*x156; void*x157; float x158; void*x159; void*x160; void*x161; void*x162; void*x163; long x164; void*x165; void*x166; void*x167; void*x168; void*x169; double x170; void*x171; void*x172; void*x173; long x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; long x188; void*x189; SEL x190; void*x191; SEL x192; void*x193; unsigned char x194; void*x195; out void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; in void*x203; double x204; void*x205; bool x206; void*x207; void*x208; void*x209; float x210; void*x211; float x212; void*x213; void*x214; void*x215; const void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; struct x225; void*x226; void*x227; void*x228; short x229; void*x230; void*x231; void*x232; const void*x233; void*x234; void*x235; BOOL x236; void*x237; void*x238; void*x239; void*x240; void*x241; unsigned char x242; void*x243; out void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; in void*x251; double x252; void*x253; bool x254; void*x255; void*x256; void*x257; float x258; void*x259; float x260; void*x261; void*x262; void*x263; const void*x264; void*x265; void*x266; struct x267; void*x268; }*)arg1 inContext:(id)arg2;
- (struct CGPoint { float x1; float x2; })centerOffset;
- (float)contentScale;
- (void)dealloc;
- (float)distanceFromPoint:(struct VKPoint { double x1; double x2; double x3; })arg1 canvasSize:(struct CGSize { float x1; float x2; })arg2;
- (BOOL)hasMass;
- (BOOL)hasScreenRect;
- (id)init;
- (void)insertSublayer:(id)arg1 aboveSublayer:(id)arg2;
- (void)insertSublayer:(id)arg1 belowSublayer:(id)arg2;
- (void)layoutWithContext:(id)arg1;
- (id)model;
- (void)removeFromSuperlayer;
- (void)removeSublayer:(id)arg1;
- (void)runAnimation:(id)arg1;
- (struct { double x1; double x2; double x3; double x4; })screenRect;
- (void)setAccumulatedCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setAnnotationMarker:(id)arg1;
- (void)setCenterOffset:(struct CGPoint { float x1; float x2; })arg1;
- (void)setHasMass:(BOOL)arg1;
- (void)setModel:(id)arg1;
- (void)setScreenRect:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setStyleType:(int)arg1;
- (void)setSuperlayer:(id)arg1;
- (BOOL)shouldSnapToPixelsWithContext:(id)arg1;
- (int)styleType;
- (void)stylesheetDidChange;
- (id)sublayers;
- (id)superlayer;
- (void)updateWithContentScale:(float)arg1;
- (void)updateWithStyleQuery:(const struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)willLayoutWithContext:(id)arg1;

@end
