/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKClassicGlobeCanvas : VKScreenCanvas <GEOResourceManifestTileGroupObserver, LabelManagerDelegate, VKCameraControllerDelegate, VKGlobeLineContainerDelegate, VKInteractiveMap> {
    VKAnchorContext *_anchorContext;
    VKAnnotationModel *_annotationModel;
    id /* block */ _artworkIsReadyBlock;
    VKGlobeCameraController *_cameraController;
    BOOL _canShowFlyover;
    BOOL _coarseLoading;
    float _contentScale;
    double _currentZoomLevel;
    struct AltitudeDebugSettings { 
        BOOL altitudePauseLoading; 
        BOOL altitudeFreezeViewNode; 
        BOOL altitudeTexturePaging; 
        BOOL altitudeShowTileBounds; 
        BOOL altitudeThreadDrawing; 
        BOOL altitudeHighResSatellite; 
        BOOL altitudeMipmapSatellite; 
        BOOL altitudeMipmapFlyover; 
        BOOL altitudeMipmapObjectTree; 
        BOOL altitudeShowNightLight; 
        float lodScale; 
        float tileQualityThreshold; 
        float hideMeshTime; 
        float fadeSpeed; 
        BOOL tourSpeedup; 
        float tourSpeedupFactor; 
    } _debugSettings;
    <VKInteractiveMapDelegate> *_delegate;
    BOOL _disableLabels;
    BOOL _disableRoads;
    NSMutableArray *_externalAnchors;
    struct GlobeAdapter { struct shared_ptr<vk::GlobeAdapterData> { struct GlobeAdapterData {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeView {} *x2; struct VKPoint { double x_3_1_1; double x_3_1_2; double x_3_1_3; } x3; struct { double x_4_1_1; double x_4_1_2; } x4; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_5_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_5_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_5_1_3; } x5; struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; bool x7; bool x8; } *_globeAdapter;
    struct shared_ptr<vk::VKGlobeStylesheet> { 
        struct VKGlobeStylesheet {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _globeStyleSheet;
    BOOL _initialized;
    struct shared_ptr<bool> { 
        bool *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _isDead;
    BOOL _isDownloading;
    BOOL _isLoading;
    VKGlobeLineContainer *_lineContainer;
    GEOResourceManifestConfiguration *_manifestConfiguration;
    struct { 
        unsigned char timePeriod; 
        unsigned char overlayType; 
        unsigned char applicationState; 
    } _mapDisplayStyle;
    int _mapType;
    struct shared_ptr<md::GlobeOverlayContainer> { 
        struct GlobeOverlayContainer {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _overlayContainer;
    VKGlobePointCache *_pointCache;
    id /* block */ _sceneDidLoadCallback;
    BOOL _showsBuildings;
    BOOL _tourIsDownloading;
    VKViewTransform *_viewTransform;
    struct Viewer { int (**x1)(); } *_viewer;
}

@property (nonatomic, readonly) double altitude;
@property (getter=isAnimatingToTrackAnnotation, nonatomic, readonly) BOOL animatingToTrackAnnotation;
@property (nonatomic) int annotationTrackingHeadingAnimationDisplayRate;
@property (nonatomic) int annotationTrackingZoomStyle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKInteractiveMapDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableLabels;
@property (nonatomic) BOOL disableRoads;
@property (nonatomic, readonly) VKAnchorWrapper *externalAnchors;
@property (nonatomic, retain) NSArray *externalTrafficIncidents;
@property (nonatomic, readonly) BOOL flyoverAvailable;
@property (nonatomic, readonly) int flyoverMode;
@property (getter=isFullyDrawn, nonatomic, readonly) BOOL fullyDrawn;
@property (getter=isFullyPitched, nonatomic, readonly) BOOL fullyPitched;
@property (readonly) unsigned int hash;
@property (nonatomic) BOOL isPitchable;
@property (nonatomic) BOOL labelMarkerSelectionEnabled;
@property (nonatomic) unsigned char labelScaleFactor;
@property (nonatomic) BOOL localizeLabels;
@property (nonatomic, retain) GEOMapRegion *mapRegion;
@property (nonatomic, readonly) GEOMapRegion *mapRegionOfInterest;
@property (nonatomic) int mapType;
@property (nonatomic, readonly) double maximumZoomLevel;
@property (nonatomic, readonly) double minimumZoomLevel;
@property (nonatomic) int navigationShieldSize;
@property (nonatomic, readonly) struct GlobeOverlayContainer { struct weak_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeViewImp {} *x2; struct NSMutableArray { Class x_3_1_1; } *x3; struct mutex { struct _opaque_pthread_mutex_t { long x_1_2_1; BOOL x_1_2_2[40]; } x_4_1_1; } x4; float x5; }*overlayContainer;
@property (nonatomic, readonly) NSArray *overlays;
@property (nonatomic, readonly) NSSet *persistentOverlays;
@property (nonatomic, readonly) double pitch;
@property (getter=isPitched, nonatomic, readonly) BOOL pitched;
@property (nonatomic, readonly) double presentationYaw;
@property (nonatomic, readonly) NSArray *rasterOverlays;
@property (nonatomic) <VKRouteMatchedAnnotationPresentation> *routeLineSplitAnnotation;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } routeUserOffset;
@property (nonatomic, copy) id /* block */ sceneDidLoadCallback;
@property (nonatomic) int shieldIdiom;
@property (nonatomic) int shieldSize;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (nonatomic) BOOL staysCenteredDuringPinch;
@property (nonatomic) BOOL staysCenteredDuringRotation;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <VKTrackableAnnotation> *trackingAnnotation;
@property (getter=isTrackingHeading, nonatomic, readonly) BOOL trackingHeading;
@property (nonatomic) BOOL trafficEnabled;
@property (nonatomic) BOOL trafficIncidentsEnabled;
@property (nonatomic, readonly) NSArray *visibleTileSets;
@property (nonatomic, readonly) double yaw;

+ (BOOL)supportsMapType:(int)arg1 scale:(int)arg2 manifestConfiguration:(id)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGPoint { float x1; float x2; })_centerScreenPoint;
- (void)_reachabilityChanged:(id)arg1;
- (void)_reloadStylesheet;
- (void)_setDefaultFov:(float)arg1;
- (void)_setStyleTransitionProgress:(float)arg1 targetStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg2 step:(int)arg3;
- (float)_styleTransitionProgress;
- (void)_update;
- (void)_updateDebugSettings;
- (void)_viewTransformSetup;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)addExternalAnchor:(id)arg1;
- (id)addHandleAtCoordinate:(struct { double x1; double x2; })arg1 withHighPrecision:(BOOL)arg2;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (double)altitude;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id /* block */)arg5;
- (id /* block */)annotationCoordinateTest;
- (id /* block */)annotationMarkerDeselectionCallback;
- (id)annotationMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 avoidCurrent:(BOOL)arg2;
- (id)annotationMarkers;
- (id /* block */)annotationRectTest;
- (int)annotationTrackingHeadingAnimationDisplayRate;
- (int)annotationTrackingZoomStyle;
- (id)attributionsForCurrentRegion;
- (void)beginStyleAnimationGroup;
- (id)boundsForSelectedTransitLines;
- (id)camera;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)cameraController:(id)arg1 flyoverModeDidChange:(int)arg2;
- (void)cameraController:(id)arg1 flyoverModeWillChange:(int)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraControllerDidFinishInitialTrackingAnimation:(id)arg1;
- (BOOL)canEnter3DMode;
- (BOOL)canRender;
- (BOOL)canShowAnimationForSearchResultWithMapRegion:(id)arg1;
- (BOOL)canZoomInForTileSize:(int)arg1;
- (BOOL)canZoomOutForTileSize:(int)arg1;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (void)clearSceneIsEffectivelyHidden:(BOOL)arg1;
- (id)closestRoadMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)consoleString:(BOOL)arg1;
- (struct CGPoint { float x1; float x2; })convertCoordinateToCameraModelPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertCoordinateToPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { float x1; float x2; })convertMapPointToPoint:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinate:(struct CGPoint { float x1; float x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinateOnSphere:(struct CGPoint { float x1; float x2; })arg1;
- (struct { double x1; double x2; })convertPointToMapPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)currentSceneRequiresMSAA;
- (double)currentZoomLevel;
- (BOOL)currentZoomLevelAllowsRotation;
- (double)currentZoomLevelForTileSize:(int)arg1;
- (void)dealloc;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)delegate;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)deselectLabelMarker;
- (void)deselectTransitLineMarker;
- (id)detailedDescription;
- (void)didEnterBackground;
- (void)didPresent;
- (void)didReceiveMemoryWarning:(BOOL)arg1 beAggressive:(BOOL)arg2;
- (void)didStartPanningDeceleration;
- (void)disableFlyoverStatistics;
- (BOOL)disableLabels;
- (BOOL)disableRoads;
- (void)disableTileAnalytics;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)enableFlyoverStatistics;
- (void)enableTileAnalytics;
- (void)endStyleAnimationGroup;
- (void)enter3DMode;
- (void)exit3DMode;
- (id)externalAnchors;
- (id)externalTrafficIncidents;
- (BOOL)flyoverAvailable;
- (int)flyoverMode;
- (id)flyoverStatistics;
- (void)gglWillDrawWithTimestamp;
- (id)initWithTarget:(id)arg1 device:(const struct shared_ptr<ggl::Device> { }*)arg2 inBackground:(BOOL)arg3 manifestConfiguration:(id)arg4;
- (void)initializeScene;
- (void)initializeWithRenderer:(struct GLRenderer { int (**x1)(); struct Device {} *x2; unsigned int x3; unsigned int x4; bool x5; float x6; struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > > { struct shared_ptr<ggl::DebugRenderer> {} *x_7_1_1; struct shared_ptr<ggl::DebugRenderer> {} *x_7_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > > { struct shared_ptr<ggl::DebugRenderer> {} *x_3_2_1; } x_7_1_3; } x7; struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> > { struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > { struct RenderQueue {} *x_1_2_1; } x_8_1_1; } x8; struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > { struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> > { struct CommandBuffer {} *x_1_2_1; } x_9_1_1; } x9; bool x10; id x11; struct RenderState {} x12; struct unique_ptr<ggl::OESContext, std::__1::default_delete<ggl::OESContext> > { struct __compressed_pair<ggl::OESContext *, std::__1::default_delete<ggl::OESContext> > { struct OESContext {} *x_1_2_1; } x_13_1_1; } x13; struct RenderTarget {} *x14; struct TransactionBuffer { struct deque<std::__1::shared_ptr<ggl::RenderTransaction>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction> > > { struct __split_buffer<std::__1::shared_ptr<ggl::RenderTransaction> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction> *> > { struct shared_ptr<ggl::RenderTransaction> {} **x_1_3_1; struct shared_ptr<ggl::RenderTransaction> {} **x_1_3_2; struct shared_ptr<ggl::RenderTransaction> {} **x_1_3_3; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderTransaction> **, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction> *> > { struct shared_ptr<ggl::RenderTransaction> {} **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned int x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<ggl::RenderTransaction> > > { unsigned long x_3_3_1; } x_1_2_3; } x_15_1_1; } x15; struct unique_ptr<ggl::PerformanceHUD, std::__1::default_delete<ggl::PerformanceHUD> > { struct __compressed_pair<ggl::PerformanceHUD *, std::__1::default_delete<ggl::PerformanceHUD> > { struct PerformanceHUD {} *x_1_2_1; } x_16_1_1; } x16; struct deque<std::__1::pair<unsigned long, void *>, std::__1::allocator<std::__1::pair<unsigned long, void *> > > { struct __split_buffer<std::__1::pair<unsigned long, void *> *, std::__1::allocator<std::__1::pair<unsigned long, void *> *> > { struct pair<unsigned long, void *> {} **x_1_2_1; struct pair<unsigned long, void *> {} **x_1_2_2; struct pair<unsigned long, void *> {} **x_1_2_3; struct __compressed_pair<std::__1::pair<unsigned long, void *> **, std::__1::allocator<std::__1::pair<unsigned long, void *> *> > { struct pair<unsigned long, void *> {} **x_4_3_1; } x_1_2_4; } x_17_1_1; unsigned int x_17_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<unsigned long, void *> > > { unsigned long x_3_2_1; } x_17_1_3; } x17; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_18_1_1; struct BufferLoadItem {} *x_18_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_18_1_3; } x18; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_19_1_1; struct Texture2DLoadItem {} *x_19_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_19_1_3; } x19; unsigned int x20; }*)arg1;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (BOOL)isAnimatingToTrackAnnotation;
- (BOOL)isFullyDrawn;
- (BOOL)isFullyPitched;
- (BOOL)isPitchable;
- (BOOL)isPitched;
- (BOOL)isPointValidForGesturing:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isShowingNoDataPlaceholders;
- (BOOL)isTrackingHeading;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 pendingArtworkIsReady:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 setNeedsDisplay:(BOOL)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 setNeedsLayout:(BOOL)arg2;
- (void)labelManagerDidLayout:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1 selectableLabelsOnly:(BOOL)arg2;
- (BOOL)labelMarkerSelectionEnabled;
- (id)labelMarkers;
- (unsigned char)labelScaleFactor;
- (void)lineContainerNeedsDisplay:(id)arg1;
- (BOOL)localizeLabels;
- (id)mapRegion;
- (id)mapRegionOfInterest;
- (int)mapType;
- (double)maximumZoomLevel;
- (double)maximumZoomLevelForTileSize:(int)arg1;
- (double)minimumZoomLevel;
- (double)minimumZoomLevelForTileSize:(int)arg1;
- (int)navigationShieldSize;
- (struct GlobeOverlayContainer { struct weak_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeViewImp {} *x2; struct NSMutableArray { Class x_3_1_1; } *x3; struct mutex { struct _opaque_pthread_mutex_t { long x_1_2_1; BOOL x_1_2_2[40]; } x_4_1_1; } x4; float x5; }*)overlayContainer;
- (id)overlays;
- (void)panWithOffset:(struct CGPoint { float x1; float x2; })arg1 relativeToScreenPoint:(struct CGPoint { float x1; float x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)pauseFlyoverTourAnimation;
- (id)persistentOverlays;
- (double)pitch;
- (struct VKPoint { double x1; double x2; double x3; })pointForHandle:(id)arg1 atCoordinate:(struct { double x1; double x2; })arg2 withHighPrecision:(BOOL)arg3;
- (void)prepareFlyoverAnimation:(id)arg1 completion:(id /* block */)arg2;
- (double)presentationYaw;
- (id)rasterOverlays;
- (void)removeAnnotationMarker:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)removeHandle:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)removeRasterOverlay:(id)arg1;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg2 setupHandler:(id /* block */)arg3;
- (void)resetFlyoverStatistics;
- (void)resetRenderQueue:(struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (void)resumeFlyoverTourAnimation;
- (id)routeLineSplitAnnotation;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (id /* block */)sceneDidLoadCallback;
- (struct VKPoint { double x1; double x2; double x3; })screenPointForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)selectAnnotationMarker:(id)arg1;
- (void)selectLabelMarker:(id)arg1;
- (void)selectTransitLineMarker:(id)arg1;
- (id)selectedAnnotationMarker;
- (id)selectedLabelMarker;
- (id)selectedTransitLineIDs;
- (void)setAnnotationMarkerDeselectionCallback:(id /* block */)arg1;
- (void)setAnnotationTrackingHeadingAnimationDisplayRate:(int)arg1;
- (void)setAnnotationTrackingZoomStyle:(int)arg1;
- (void)setBackgroundViewLoading:(BOOL)arg1;
- (void)setCenterCoordinate3D:(struct { double x1; double x2; double x3; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(int)arg6 timingCurve:(id /* block */)arg7 completion:(id /* block */)arg8;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 animationStyle:(int)arg6 timingCurve:(id /* block */)arg7 completion:(id /* block */)arg8;
- (void)setContentsScale:(float)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableLabels:(BOOL)arg1;
- (void)setDisableRoads:(BOOL)arg1;
- (void)setEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIsPitchable:(BOOL)arg1;
- (void)setLabelMarkerSelectionEnabled:(BOOL)arg1;
- (void)setLabelScaleFactor:(unsigned char)arg1;
- (void)setLocalizeLabels:(BOOL)arg1;
- (void)setMapRegion:(id)arg1;
- (void)setMapRegion:(id)arg1 animated:(BOOL)arg2;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(BOOL)arg4 completion:(id /* block */)arg5;
- (void)setMapType:(int)arg1;
- (void)setMapType:(int)arg1 animated:(BOOL)arg2;
- (void)setNavigationShieldSize:(int)arg1;
- (void)setNightMode:(BOOL)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setSceneDidLoadCallback:(id /* block */)arg1;
- (void)setShieldIdiom:(int)arg1;
- (void)setShieldSize:(int)arg1;
- (void)setShowsBuildings:(BOOL)arg1;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (void)setStaysCenteredDuringPinch:(BOOL)arg1;
- (void)setStaysCenteredDuringRotation:(BOOL)arg1;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setTrafficEnabled:(BOOL)arg1;
- (void)setTrafficIncidentsEnabled:(BOOL)arg1;
- (void)setYaw:(double)arg1 animated:(BOOL)arg2;
- (void)setupMapScene;
- (int)shieldIdiom;
- (int)shieldSize;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)showSearchResultAnimationAtCoordinate:(struct { double x1; double x2; })arg1 withMapRegion:(id)arg2;
- (BOOL)showsBuildings;
- (BOOL)showsPointsOfInterest;
- (struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })sourceMapDisplayStyle;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(BOOL)arg2 labelChanged:(id /* block */)arg3 stateChange:(id /* block */)arg4;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(BOOL)arg2 labelChanged:(id /* block */)arg3 stateChange:(id /* block */)arg4;
- (void)startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1 panAtStartPoint:(BOOL)arg2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (BOOL)staysCenteredDuringPinch;
- (BOOL)staysCenteredDuringRotation;
- (void)stopAnimations;
- (void)stopFlyoverAnimation;
- (void)stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stopSearchResultAnimation;
- (void)stopSnappingAnimations;
- (void)stopTrackingAnnotation;
- (struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetAnimationDidEnd:(BOOL)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1 toStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg2;
- (BOOL)supportsMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (double)topDownMinimumZoomLevelForTileSize:(int)arg1;
- (id)trackingAnnotation;
- (BOOL)trafficEnabled;
- (BOOL)trafficIncidentsEnabled;
- (void)transferCamera:(id)arg1;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)transitLineMarkersInCurrentViewport;
- (void)transitionToFlyoverMode:(int)arg1 animated:(BOOL)arg2;
- (void)updateCameraForFrameResize;
- (void)updateCameraFromGlobe;
- (void)updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { float x1; float x2; })arg1 newValue:(double)arg2;
- (void)updateWithTimestamp:(double)arg1;
- (BOOL)useNewRenderPath;
- (id)viewportInfo;
- (id)visibleTileSets;
- (void)waitForLoading;
- (BOOL)wantsRender;
- (double)yaw;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id /* block */)arg3;
- (double)zoomLevelAdjustmentForTileSize:(int)arg1;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { float x1; float x2; })arg2;

@end
