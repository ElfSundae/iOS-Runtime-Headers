/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF
 */

@interface CPTextLine : CPTextObject <CPDisposable> {
    BOOL baseLineIsNull;
    float baseline;
    CPCharSequence *charSequence;
    NSArray *columnBreaks;
    int columnNumber;
    BOOL disposed;
    BOOL hasBeenProcessed;
    BOOL hasBeenSplit;
    BOOL hasTabs;
    struct CPInlineContainer { unsigned int x1; id x2; struct CPInlineContainer {} x3; } *inlineList;
    BOOL irregular;
    BOOL isListItem;
    unsigned int leftSpacerIndex;
    int levels;
    BOOL lineBreakAfter;
    int lineNumber;
    unsigned int listSpacerIndex;
    float maximumLetterGap;
    float maximumWordGap;
    BOOL maySplit;
    float monospaceWidth;
    unsigned int rightSpacerIndex;
    unsigned int *spacesBefore;
    int tabsBefore;
    struct CPPDFStyle { struct CGColor {} *x1; struct CGColorSpace {} *x2; struct CGColor {} *x3; struct CGColorSpace {} *x4; float x5; float x6; unsigned char x7; unsigned char x8; int x9; float x10; id x11; union { unsigned char x_12_1_1; /* Warning: Unrecognized filer type: 'G' using 'void*' */ void*x_12_1_2; void*x_12_1_3; long doublex_12_1_4; void*x_12_1_5; bycopy unsigned int x_12_1_6/* : ? */; void*x_12_1_7; void*x_12_1_8; BOOL x_12_1_9; void*x_12_1_10; } *x12; union { unsigned char x_13_1_1; void*x_13_1_2; void*x_13_1_3; long doublex_13_1_4; void*x_13_1_5; bycopy unsigned int x_13_1_6/* : ? */; void*x_13_1_7; void*x_13_1_8; BOOL x_13_1_9; void*x_13_1_10; } *x13; struct CGColor {} *x14; struct CPPDFStyle {} *x15; } *uniformStyle;
    unsigned short uniformStyleFlags;
    struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; } *wordArray;
    unsigned int wordCount;
    NSArray *xsegments;
}

@property (nonatomic) BOOL isListItem;
@property (nonatomic) unsigned int leftSpacerIndex;
@property (nonatomic) BOOL lineBreakAfter;
@property (nonatomic) unsigned int listSpacerIndex;
@property (nonatomic) unsigned int rightSpacerIndex;

- (void)accept:(id)arg1;
- (int)align;
- (struct CGPoint { float x1; float x2; })anchor;
- (void)anchorChunk:(id)arg1 atWordIndex:(unsigned int)arg2;
- (id)attributes;
- (int)baseLineAscending:(id)arg1;
- (int)baseLineDescending:(id)arg1;
- (float)baseline;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsOfWordAtIndex:(unsigned int)arg1;
- (BOOL)changesFontAt:(id)arg1;
- (id)charSequence;
- (id)columnBreaks;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)dispose;
- (void)finalize;
- (struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)firstWord;
- (void)fitBoundsToChildren;
- (BOOL)hasBeenProcessed;
- (BOOL)hasBeenSplit;
- (BOOL)hasDropCap;
- (BOOL)hasJustifiedAlignment;
- (BOOL)hasTabs;
- (BOOL)hyphenated;
- (id)init;
- (unsigned int)inlineCount;
- (struct CPInlineContainer { unsigned int x1; id x2; struct CPInlineContainer {} x3; }*)inlineList;
- (BOOL)irregular;
- (BOOL)isIndivisible;
- (BOOL)isListItem;
- (BOOL)isMonospaced;
- (struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)lastWord;
- (unsigned int)leftSpacerIndex;
- (int)levels;
- (BOOL)lineBreakAfter;
- (unsigned int)listSpacerIndex;
- (BOOL)mapToWordPairs:(int (*)arg1 passing:(void*)arg2;
- (BOOL)mapToWordPairsWithIndex:(int (*)arg1 passing:(void*)arg2;
- (BOOL)mapToWords:(int (*)arg1 passing:(void*)arg2;
- (BOOL)mapToWordsWithIndex:(int (*)arg1 passing:(void*)arg2;
- (float)maximumLetterGap;
- (float)maximumWordGap;
- (float)medianFontSize;
- (float)monospaceWidth;
- (id)newTextLineFromWordAt:(unsigned int)arg1 lengthInWords:(unsigned int)arg2;
- (BOOL)overlapsHorizontally:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)overlapsWith:(id)arg1;
- (id)properties;
- (void)recomputeBaseline;
- (void)recomputeLevels;
- (BOOL)removeTextLines:(id)arg1 whereTrue:(int (*)arg2 passing:(void*)arg3;
- (unsigned int)rightSpacerIndex;
- (void)setBaseline:(float)arg1;
- (void)setBaselineToNull;
- (void)setCharSequence:(id)arg1;
- (void)setColumnBreaks:(id)arg1;
- (void)setHasBeenProcessed:(BOOL)arg1;
- (void)setHasBeenSplit:(BOOL)arg1;
- (void)setHasTabs:(BOOL)arg1;
- (void)setIrregular:(BOOL)arg1;
- (void)setIsListItem:(BOOL)arg1;
- (void)setLeftSpacerIndex:(unsigned int)arg1;
- (void)setLevels:(int)arg1;
- (void)setLineBreakAfter:(BOOL)arg1;
- (void)setListSpacerIndex:(unsigned int)arg1;
- (void)setMaximumLetterGap:(float)arg1;
- (void)setMaximumWordGap:(float)arg1;
- (void)setRightSpacerIndex:(unsigned int)arg1;
- (void)setSpaces:(unsigned int)arg1 beforeWordAtIndex:(unsigned int)arg2;
- (void)setTabsBefore:(int)arg1;
- (unsigned int)spacesBeforeWordAtIndex:(unsigned int)arg1;
- (BOOL)styleIsUniform:(struct CPPDFStyle {}**)arg1 styleFlags:(unsigned short)arg2;
- (int)tabsBefore;
- (int)topIsAbove:(id)arg1;
- (void)translateObjectYBy:(float)arg1;
- (struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordArray;
- (struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordArrayOfSize:(unsigned int)arg1;
- (struct { unsigned int x1; unsigned int x2; int x3; int x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; }*)wordAtIndex:(unsigned int)arg1;
- (unsigned int)wordCount;
- (long)zOrder;

@end
