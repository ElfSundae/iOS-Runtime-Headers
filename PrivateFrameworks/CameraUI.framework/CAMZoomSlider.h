/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI
 */

@interface CAMZoomSlider : UISlider {
    BOOL  __autozooming;
    UIView * __maxTrackMaskView;
    UIView * __minTrackMaskView;
    NSTimer * __visibilityTimer;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  _alignmentRectInsets;
    <CAMZoomSliderDelegate> * _delegate;
    int  _layoutStyle;
    BOOL  _maximumAutozooming;
    BOOL  _minimumAutozooming;
    int  _orientation;
    BOOL  _visibilityTimerSuspended;
}

@property (getter=_isAutozooming, setter=_setAutozooming:, nonatomic) BOOL _autozooming;
@property (nonatomic, readonly) UIView *_maxTrackMaskView;
@property (nonatomic, readonly) UIView *_minTrackMaskView;
@property (nonatomic, readonly) NSTimer *_visibilityTimer;
@property (nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } alignmentRectInsets;
@property (nonatomic) <CAMZoomSliderDelegate> *delegate;
@property (nonatomic) int layoutStyle;
@property (getter=isMaximumAutozooming, setter=_setMaximumAutozooming:, nonatomic) BOOL maximumAutozooming;
@property (getter=isMinimumAutozooming, setter=_setMinimumAutozooming:, nonatomic) BOOL minimumAutozooming;
@property (nonatomic) int orientation;
@property (getter=isVisibilityTimerSuspended, nonatomic) BOOL visibilityTimerSuspended;

+ (BOOL)shouldFadeOutZoomSliderForLayoutStyle:(int)arg1;

- (void).cxx_destruct;
- (void)_beginAutozooming;
- (void)_commonCAMZoomSliderInitializationWithLayoutStyle:(int)arg1;
- (void)_endAutozooming;
- (void)_handleTouchUpInside:(id)arg1;
- (void)_hideZoomSlider:(id)arg1;
- (BOOL)_isAutozooming;
- (BOOL)_isMinimumOrMaximumAutozooming;
- (void)_makeInvisibleAnimationDuration:(double)arg1;
- (id)_maxTrackMaskView;
- (id)_minTrackMaskView;
- (void)_setAutozooming:(BOOL)arg1;
- (void)_setMaximumAutozooming:(BOOL)arg1;
- (void)_setMinimumAutozooming:(BOOL)arg1;
- (void)_startVisibilityTimer;
- (void)_stopVisibilityTimer;
- (float)_thumbCenterMaximumXForTrackRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (float)_thumbCenterMinimumXForTrackRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (float)_thumbCenterXForValue:(float)arg1 trackRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)_updateAutozooming;
- (void)_updateForLayoutStyle;
- (float)_valueForThumbCenterX:(float)arg1 trackRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (id)_visibilityTimer;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })alignmentRectInsets;
- (BOOL)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (BOOL)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)dealloc;
- (id)delegate;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithLayoutStyle:(int)arg1;
- (struct CGSize { float x1; float x2; })intrinsicContentSize;
- (BOOL)isMaximumAutozooming;
- (BOOL)isMinimumAutozooming;
- (BOOL)isVisibilityTimerSuspended;
- (int)layoutStyle;
- (void)layoutSubviews;
- (int)locationOfTouch:(id)arg1;
- (void)makeInvisibleAnimated:(BOOL)arg1;
- (void)makeVisibleAnimated:(BOOL)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (int)orientation;
- (void)setAlignmentRectInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setLayoutStyle:(int)arg1;
- (void)setOrientation:(int)arg1;
- (void)setOrientation:(int)arg1 animated:(BOOL)arg2;
- (void)setVisibilityTimerSuspended:(BOOL)arg1;
- (BOOL)shouldHideForExpiredVisibilityTimer;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 value:(float)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;

@end
