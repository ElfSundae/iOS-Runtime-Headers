/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
 */

@interface MUPDFViewController : UIViewController <MUPDFViewDelegate, MUPDFViewPrivateDelegate, UIDocumentPasswordViewDelegate, UIScrollViewDelegate> {
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _additionalEdgeInsets;
    UIColor *_backgroundColorForUnRenderedContent;
    UIAlertController *_currentAlert;
    unsigned int _currentPageIndex;
    NSObject<MUPDFViewControllerDelegate> *_delegate;
    UIPDFDocument *_document;
    BOOL _hideActivityIndicatorForUnRenderedContent;
    BOOL _hidePageViewsUntilReadyToRender;
    float _initialZoomScale;
    MUPDFNumberFormatter *_labelViewFormatter;
    MUPDFPageLabelView *_pageLabelView;
    UIDocumentPasswordView *_passwordEntryView;
    UIPDFDocument *_pdfDocument;
    struct CGPDFDocument { } *_pdfDocumentRef;
    MUPDFViewPlaceholder *_pdfPlaceholder;
    MUPDFView *_pdfView;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _rectOfInterest;
    BOOL _rectOfInterestConsidersHeight;
    BOOL _scalesPageToFit;
    UIScrollView *_scrollView;
    BOOL _shouldLoadDocAfterViewDidLoad;
    BOOL _showPageLabels;
}

@property (nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } additionalEdgeInsets;
@property (nonatomic, retain) UIColor *backgroundColorForUnRenderedContent;
@property (nonatomic) unsigned int currentPageIndex;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) NSObject<MUPDFViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UIPDFDocument *document;
@property (nonatomic, readonly) NSString *documentPassword;
@property (nonatomic, readonly) UIView *frontView;
@property (readonly) unsigned int hash;
@property (nonatomic) BOOL hideActivityIndicatorForUnRenderedContent;
@property (nonatomic) BOOL hidePageViewsUntilReadyToRender;
@property (nonatomic, readonly) unsigned int pageCount;
@property (retain) UIPDFDocument *pdfDocument;
@property struct CGPDFDocument { }*pdfDocumentRef;
@property (nonatomic, retain) MUPDFViewPlaceholder *pdfPlaceholder;
@property (nonatomic, retain) UIView *pdfView;
@property (nonatomic) BOOL scalesPageToFit;
@property (nonatomic, retain) UIScrollView *scrollView;
@property (nonatomic) BOOL showPageLabels;
@property (readonly) Class superclass;
@property (nonatomic, readonly) float zoomToFitZoomFactor;

- (void).cxx_destruct;
- (float)__jetsam_workaround_minimumZoomScale;
- (void)_adjustContentOffsetForKeyboardIfNeeded;
- (void)_adjustZoomScalesForScrollViewInternal:(id)arg1;
- (unsigned int)_calculateCurrentPageIndex;
- (void)_commonInit;
- (void)_createPDFViewIfNeeded:(id)arg1;
- (void)_ensurePDFViewInHierarchyForWebDocView:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_frameForDocumentBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)_getLabelViewFormatter;
- (id)_getPDFDocumentViewForWebView:(id)arg1;
- (void)_keyboardDidShow:(id)arg1;
- (void)_pdfView:(id)arg1 didAddPage:(id)arg2 atIndex:(unsigned int)arg3;
- (void)_pdfView:(id)arg1 didRemovePage:(id)arg2 atIndex:(unsigned int)arg3;
- (void)_pdfView:(id)arg1 willAddPage:(id)arg2 atIndex:(unsigned int)arg3;
- (void)_pdfView:(id)arg1 willRemovePage:(id)arg2 atIndex:(unsigned int)arg3;
- (float)_pinValueForVerticalEdge:(unsigned int)arg1 inScrollView:(id)arg2;
- (void)_postdidDetermineDocumentBounds;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_rectForPasswordView:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_rectForPdfView:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)_scroller:(id)arg1;
- (void)_setupWithDocument:(struct CGPDFDocument { }*)arg1;
- (void)_showPasswordEntryViewForFile:(id)arg1;
- (void)_showPasswordErrorAlert;
- (void)_updateViewHierarchyForDocumentViewNewLoad:(id)arg1;
- (unsigned int)_verticalEdgeForContentOffsetInScrollView:(id)arg1;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })additionalEdgeInsets;
- (void)adjustZoomScalesForScrollView;
- (id)backgroundColorForUnRenderedContent;
- (void)clearAllViews;
- (void)clearPageLabel;
- (id)contentSnapshotPDFDataIncludingAdornments:(BOOL)arg1 atScale:(float)arg2 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 onPageAtIndex:(unsigned int)arg4;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 fromView:(id)arg2 toPDFPageSpaceAtIndex:(unsigned int)arg3;
- (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 inPDFPageSpaceAtIndex:(unsigned int)arg2 toView:(id)arg3;
- (id)createPageLabel;
- (unsigned int)currentPageIndex;
- (void)dealloc;
- (id)delegate;
- (void)didBeginEditingPassword:(id)arg1 inView:(id)arg2;
- (void)didDetermineDocumentBounds:(id)arg1;
- (void)didEndEditingPassword:(id)arg1 inView:(id)arg2;
- (void)didReceiveMemoryWarning;
- (void)didScroll:(id)arg1;
- (id)document;
- (id)documentPassword;
- (void)ensureCorrectPagesAreInstalled:(BOOL)arg1;
- (id)frontView;
- (BOOL)hideActivityIndicatorForUnRenderedContent;
- (BOOL)hidePageViewsUntilReadyToRender;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)loadView;
- (unsigned int)pageCount;
- (void)pageWasRendered:(id)arg1;
- (id)passwordForPDFView:(id)arg1;
- (id)pdfDocument;
- (struct CGPDFDocument { }*)pdfDocumentRef;
- (id)pdfPlaceholder;
- (id)pdfView;
- (void)pdfView:(id)arg1 zoomToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 forPoint:(struct CGPoint { float x1; float x2; })arg3 considerHeight:(BOOL)arg4;
- (void)resetZoom:(id)arg1;
- (struct { float x1; float x2; float x3; })scalesForContainerSize:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)scalesPageToFit;
- (void)scrollToPageNumber:(int)arg1 animate:(BOOL)arg2;
- (id)scrollView;
- (void)setAdditionalEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setBackgroundColorForUnRenderedContent:(id)arg1;
- (void)setCurrentPageIndex:(unsigned int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHideActivityIndicatorForUnRenderedContent:(BOOL)arg1;
- (void)setHidePageViewsUntilReadyToRender:(BOOL)arg1;
- (void)setPdfDocument:(id)arg1;
- (void)setPdfDocumentRef:(struct CGPDFDocument { }*)arg1;
- (void)setPdfPlaceholder:(id)arg1;
- (void)setPdfView:(id)arg1;
- (void)setScalesPageToFit:(BOOL)arg1;
- (void)setScrollView:(id)arg1;
- (void)setShowPageLabels:(BOOL)arg1;
- (void)setupWithDocument:(struct CGPDFDocument { }*)arg1;
- (BOOL)showPageLabels;
- (void)updatePageNumberLabelWithUserScrolling:(BOOL)arg1 animated:(BOOL)arg2;
- (void)updateViewSettings;
- (void)userDidEnterPassword:(id)arg1 forPasswordView:(id)arg2;
- (id)viewAtIndex:(int)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (id)viewForZoomingInScrollView:(id)arg1;
- (float)zoomToFitZoomFactor;

@end
