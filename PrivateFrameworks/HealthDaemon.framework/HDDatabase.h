/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDDatabase : NSObject <HDContentProtectionObserver, HDDiagnosticObject, HDHealthDatabase, HDSQLiteDatabasePoolDelegate> {
    NSOperationQueue *_asynchronousOperationQueue;
    BOOL _checkpointRequired;
    HDContentProtectionManager *_contentProtectionManager;
    <HDHealthDaemon> *_daemon;
    <HDDatabaseMigrationDelegate> *_databaseMigrationDelegate;
    HDSQLiteDatabasePool *_databasePool;
    NSMutableArray *_firstUnlockBlocks;
    BOOL _hasScheduledCheckpoint;
    NSString *_homeDirectoryPath;
    int _invalidated;
    BOOL _isObservingContentProtection;
    HDDatabaseJournal *_journal;
    NSObject<OS_dispatch_group> *_journalGroup;
    NSObject<OS_dispatch_queue> *_journalQueue;
    NSMutableSet *_migratedDatabases;
    unsigned int _pendingJournalMerges;
    NSObject<OS_dispatch_queue> *_protectedDataObserverNotificationQueue;
    NSObject<OS_dispatch_queue> *_protectedDataObserverQueue;
    NSPointerArray *_protectedDataObservers;
    NSObject<OS_dispatch_queue> *_protectedDataQueue;
    int _protectedDataState;
    NSLock *_schemaMigrationLock;
    BOOL _shouldNotifyFirstUnlockObservers;
    NSString *_threadLocalActiveConnectionKey;
    NSObject<OS_dispatch_group> *_transactionGroup;
    NSObject<OS_dispatch_queue> *_transactionQueue;
}

@property (nonatomic, retain) NSOperationQueue *asynchronousOperationQueue;
@property (nonatomic) BOOL checkpointRequired;
@property (nonatomic, retain) HDContentProtectionManager *contentProtectionManager;
@property (nonatomic) <HDHealthDaemon> *daemon;
@property (getter=isDataProtectedByFirstUnlockAvailable, nonatomic, readonly) BOOL dataProtectedByFirstUnlockAvailable;
@property (nonatomic) <HDDatabaseMigrationDelegate> *databaseMigrationDelegate;
@property (nonatomic, retain) HDSQLiteDatabasePool *databasePool;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableArray *firstUnlockBlocks;
@property (nonatomic) BOOL hasScheduledCheckpoint;
@property (readonly) unsigned int hash;
@property (nonatomic, copy) NSString *homeDirectoryPath;
@property (nonatomic) int invalidated;
@property (nonatomic) BOOL isObservingContentProtection;
@property (nonatomic, readonly) HDDatabaseJournal *journal;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *journalGroup;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *journalQueue;
@property (nonatomic, retain) NSMutableSet *migratedDatabases;
@property (nonatomic) unsigned int pendingJournalMerges;
@property (getter=isProtectedDataAvailable, nonatomic, readonly) BOOL protectedDataAvailable;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataObserverNotificationQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataObserverQueue;
@property (nonatomic, retain) NSPointerArray *protectedDataObservers;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *protectedDataQueue;
@property (nonatomic) int protectedDataState;
@property (nonatomic, retain) NSLock *schemaMigrationLock;
@property (nonatomic) BOOL shouldNotifyFirstUnlockObservers;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *threadLocalActiveConnectionKey;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *transactionGroup;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *transactionQueue;

+ (id)_databaseCorruptionDefaultKeyForDatabaseWithName:(id)arg1;
+ (id)allEntityClasses;
+ (void)didEncounterUncorruptedDatabaseWithName:(id)arg1;
+ (void)loadEntityClasses;
+ (void)reportDatabaseCorruptionForDatabaseWithName:(id)arg1;

- (void).cxx_destruct;
- (id)_activeDatabase;
- (void)_clearJournalDirectory;
- (id)_copyProtectedDataObservers;
- (BOOL)_createDataTablesInDatabase:(id)arg1 entityClasses:(id)arg2 error:(id*)arg3;
- (id)_createDatabaseConnection;
- (id)_createDatabaseConnectionWithURL:(id)arg1;
- (int)_createEntitiesInDatabase:(id)arg1 protectedEntities:(BOOL)arg2 error:(id*)arg3;
- (id)_createNonUniqueIndicesSQLForEntity:(Class)arg1;
- (int)_currentSchemaVersionForProtectedDatabase:(BOOL)arg1;
- (id)_databaseNameForProtectedDatabase:(BOOL)arg1;
- (id)_destroyAndReopenDatabaseWithReason:(id)arg1;
- (void)_destroyDatabaseWithReason:(id)arg1;
- (void)_enableIncrementalAutoVacuumForDatabaseAtURL:(id)arg1;
- (id)_journalDirectoryPath;
- (int)_migrateDatabase:(id)arg1 fromUserVersion:(int)arg2 protectedDatabase:(BOOL)arg3 error:(id*)arg4;
- (BOOL)_migrateOrCreateProtectedSchemaInDatabase:(id)arg1 error:(id*)arg2;
- (int)_migrateOrCreateSchemaWithDatabase:(id)arg1 protectedDatabase:(BOOL)arg2 error:(id*)arg3;
- (id)_newDatabaseConnectionWithError:(id*)arg1;
- (BOOL)_performTransactionWithOptions:(unsigned int)arg1 shouldWaitForJournalMerge:(BOOL)arg2 error:(id*)arg3 usingBlock:(id /* block */)arg4;
- (void)_protectedDataObserverQueue_addObserver:(id)arg1;
- (void)_protectedDataObserverQueue_removeObserver:(id)arg1;
- (void)_protectedDataQueue_beginObservingContentProtection;
- (void)_protectedDataQueue_mergeJournalAsynchronously;
- (int)_protectedDataState;
- (void)_protectedDatabaseDidBecomeAvailable;
- (id)_readerDatabaseWithError:(id*)arg1;
- (void)_setActiveDatabase:(id)arg1;
- (void)_updateDataForPPTWithDatabase:(id)arg1;
- (BOOL)_waitForJournalMerge;
- (id)_writerDatabaseWithError:(id*)arg1;
- (void)addJournalEntries:(id)arg1;
- (void)addJournalEntry:(id)arg1;
- (void)addProtectedDataObserver:(id)arg1;
- (id)asynchronousOperationQueue;
- (BOOL)checkpointRequired;
- (id)contentProtectionManager;
- (void)contentProtectionStateChanged:(int)arg1 previousState:(int)arg2;
- (id)daemon;
- (void)daemonDidFinishLaunching;
- (id)databaseMigrationDelegate;
- (id)databasePool;
- (id)databaseSizeInBytes;
- (id)diagnosticDescription;
- (id)firstUnlockBlocks;
- (BOOL)hasScheduledCheckpoint;
- (id)homeDirectoryPath;
- (id)initWithHomeDirectoryPath:(id)arg1 healthDaemon:(id)arg2 migrationDelegate:(id)arg3;
- (void)invalidate;
- (void)invalidateAndWait;
- (int)invalidated;
- (BOOL)isDataProtectedByFirstUnlockAvailable;
- (BOOL)isObservingContentProtection;
- (BOOL)isProtectedDataAvailable;
- (id)journal;
- (id)journalGroup;
- (id)journalQueue;
- (id)mainDatabaseURL;
- (int)migrateOrCreateSchemaInDatabase:(id)arg1 protectedDatabaseAvailable:(BOOL)arg2 error:(id*)arg3;
- (id)migratedDatabases;
- (id)newDatabaseForDatabasePool:(id)arg1 error:(id*)arg2;
- (unsigned int)pendingJournalMerges;
- (void)performAsynchronously:(id /* block */)arg1;
- (BOOL)performJournalMergeUsingBlock:(id /* block */)arg1 error:(id*)arg2;
- (BOOL)performMigrationForProtectedData:(BOOL)arg1 error:(id*)arg2;
- (BOOL)performTransactionWithOptions:(unsigned int)arg1 error:(id*)arg2 usingBlock:(id /* block */)arg3;
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(id /* block */)arg1;
- (id)protectedDataObserverNotificationQueue;
- (id)protectedDataObserverQueue;
- (id)protectedDataObservers;
- (id)protectedDataQueue;
- (int)protectedDataState;
- (id)protectedDatabaseURL;
- (void)removeProtectedDataObserver:(id)arg1;
- (id)schemaMigrationLock;
- (void)setAsynchronousOperationQueue:(id)arg1;
- (void)setCheckpointRequired:(BOOL)arg1;
- (void)setContentProtectionManager:(id)arg1;
- (void)setDaemon:(id)arg1;
- (void)setDatabaseMigrationDelegate:(id)arg1;
- (void)setDatabasePool:(id)arg1;
- (void)setFirstUnlockBlocks:(id)arg1;
- (void)setHasScheduledCheckpoint:(BOOL)arg1;
- (void)setHomeDirectoryPath:(id)arg1;
- (void)setInvalidated:(int)arg1;
- (void)setIsObservingContentProtection:(BOOL)arg1;
- (void)setJournalGroup:(id)arg1;
- (void)setJournalQueue:(id)arg1;
- (void)setMigratedDatabases:(id)arg1;
- (void)setPendingJournalMerges:(unsigned int)arg1;
- (void)setProtectedDataObserverNotificationQueue:(id)arg1;
- (void)setProtectedDataObserverQueue:(id)arg1;
- (void)setProtectedDataObservers:(id)arg1;
- (void)setProtectedDataQueue:(id)arg1;
- (void)setProtectedDataState:(int)arg1;
- (void)setSchemaMigrationLock:(id)arg1;
- (void)setShouldNotifyFirstUnlockObservers:(BOOL)arg1;
- (void)setThreadLocalActiveConnectionKey:(id)arg1;
- (void)setTransactionGroup:(id)arg1;
- (void)setTransactionQueue:(id)arg1;
- (BOOL)shouldNotifyFirstUnlockObservers;
- (id)threadLocalActiveConnectionKey;
- (id)transactionGroup;
- (id)transactionQueue;

@end
