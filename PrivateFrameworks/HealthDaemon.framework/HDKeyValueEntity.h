/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDKeyValueEntity : HDHealthEntity

+ (int)_deviceLocalCategory;
+ (BOOL)_doInsertValues:(id)arg1 forKeys:(id)arg2 modificationDates:(id)arg3 domain:(id)arg4 category:(int)arg5 provenance:(long long)arg6 updatePolicy:(int)arg7 database:(id)arg8 error:(id*)arg9;
+ (Class)_entityClassForKeyValueCategory:(int)arg1;
+ (BOOL)_enumerateKeyValueEntitiesInCategory:(int)arg1 predicate:(id)arg2 healthDatabase:(id)arg3 error:(id*)arg4 usingBlock:(id /* block */)arg5;
+ (BOOL)_insertCodableCategoryDomainDictionary:(id)arg1 provenance:(long long)arg2 profile:(id)arg3 error:(id*)arg4;
+ (BOOL)_insertCodableTimestampedKeyValuePairs:(id)arg1 domain:(id)arg2 category:(int)arg3 provenance:(long long)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)_insertKeysAndValues:(id)arg1 modificationDate:(id)arg2 domain:(id)arg3 category:(int)arg4 provenance:(long long)arg5 updatePolicy:(int)arg6 database:(id)arg7 error:(id*)arg8;
+ (BOOL)_insertKeysAndValues:(id)arg1 modificationDate:(id)arg2 domain:(id)arg3 category:(int)arg4 provenance:(long long)arg5 updatePolicy:(int)arg6 profile:(id)arg7 error:(id*)arg8;
+ (BOOL)_insertValues:(id)arg1 forKeys:(id)arg2 modificationDates:(id)arg3 domain:(id)arg4 category:(int)arg5 provenance:(long long)arg6 updatePolicy:(int)arg7 profile:(id)arg8 error:(id*)arg9;
+ (id)_predicateForCategory:(int)arg1;
+ (id)_predicateForDomain:(id)arg1;
+ (id)_predicateForKey:(id)arg1;
+ (id)_predicateForKeys:(id)arg1;
+ (id)_predicateForProvenance:(long long)arg1;
+ (id)_rawValueForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)_rawValuesForKeys:(id)arg1 domain:(id)arg2 category:(int)arg3 database:(id)arg4 error:(id*)arg5;
+ (id)_rawValuesForKeys:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5;
+ (BOOL)_readRawValuesInCategory:(int)arg1 predicate:(id)arg2 database:(id)arg3 error:(id*)arg4 usingBlock:(id /* block */)arg5;
+ (id)_safeDomainWithDomain:(id)arg1;
+ (BOOL)_setRawKeysAndValues:(id)arg1 domain:(id)arg2 category:(int)arg3 database:(id)arg4 error:(id*)arg5;
+ (BOOL)_setRawKeysAndValues:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5;
+ (int)_shouldUpdateWithPolicy:(int)arg1 key:(id)arg2 domain:(id)arg3 category:(int)arg4 modificationDate:(double)arg5 database:(id)arg6 error:(id*)arg7;
+ (BOOL)_validateEntityClassForCategory:(int)arg1;
+ (int)_validateModificationDatePolicyWithKey:(id)arg1 domain:(id)arg2 category:(int)arg3 modificationDate:(double)arg4 database:(id)arg5 error:(id*)arg6;
+ (id)_valuesForKeys:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5 handler:(id /* block */)arg6;
+ (id)allValuesForDomain:(id)arg1 category:(int)arg2 profile:(id)arg3 error:(id*)arg4;
+ (id)columnsDefinition;
+ (id)companionAlertedStateKeyFromDefinitionIdentifier:(id)arg1;
+ (id)companionAvailabilityStateKeyFromDefinitionIdentifier:(id)arg1;
+ (id)companionAvailabilityStateKeySuffix;
+ (id)dataForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)databaseTable;
+ (id)dateComponentsForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)dateForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)definitionIdentifierFromCompanionAlertedStateKey:(id)arg1;
+ (id)definitionIdentifierFromCompanionAvailabilityStateKey:(id)arg1;
+ (id)definitionIdentifierFromWatchAlertedStateKey:(id)arg1;
+ (id)definitionIdentifierFromWatchAvailabilityStateKey:(id)arg1;
+ (id)entityEncoderForProfile:(id)arg1 database:(id)arg2 purpose:(int)arg3 encodingOptions:(id)arg4 authorizationFilter:(id /* block */)arg5;
+ (BOOL)enumerateValuesForDomain:(id)arg1 category:(int)arg2 keys:(id)arg3 profile:(id)arg4 error:(id*)arg5 usingBlock:(id /* block */)arg6;
+ (id)generateNewDatabaseIdentifier;
+ (id)modificationDatesForKeys:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5;
+ (id)numberForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)okemoZursObjectAnchorWithProfile:(id)arg1 error:(id*)arg2;
+ (BOOL)persistDatabaseIdentifier:(id)arg1 database:(id)arg2 error:(id*)arg3;
+ (BOOL)persistDatabaseIdentifier:(id)arg1 profile:(id)arg2 error:(id*)arg3;
+ (id)propertyForSyncProvenance;
+ (id)quantityForKey:(id)arg1 unit:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 entity:(id*)arg6 error:(id*)arg7;
+ (BOOL)removeValuesForDomain:(id)arg1 category:(int)arg2 keys:(id)arg3 profile:(id)arg4 error:(id*)arg5;
+ (id)retrieveDatabaseIdentifierFromDatabase:(id)arg1 error:(id*)arg2;
+ (id)retrieveDatabaseIdentifierFromProfile:(id)arg1 error:(id*)arg2;
+ (BOOL)setData:(id)arg1 forKey:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)setDate:(id)arg1 forKey:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)setDateComponents:(id)arg1 forKey:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)setNumber:(id)arg1 forKey:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)setOkemoZursObjectAnchor:(long long)arg1 database:(id)arg2 error:(id*)arg3;
+ (BOOL)setQuantity:(id)arg1 unit:(id)arg2 forKey:(id)arg3 domain:(id)arg4 category:(int)arg5 profile:(id)arg6 error:(id*)arg7;
+ (BOOL)setString:(id)arg1 forKey:(id)arg2 domain:(id)arg3 category:(int)arg4 profile:(id)arg5 error:(id*)arg6;
+ (BOOL)setValuesWithDictionary:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5;
+ (id)stringForKey:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 entity:(id*)arg5 error:(id*)arg6;
+ (id)uniquedColumns;
+ (id)valuesForKeys:(id)arg1 domain:(id)arg2 category:(int)arg3 profile:(id)arg4 error:(id*)arg5;
+ (id)watchAlertedStateKeyFromDefinitionIdentifier:(id)arg1;
+ (id)watchAvailabilityStateKeyFromDefinitionIdentifier:(id)arg1;
+ (id)watchAvailabilityStateKeySuffix;

@end
