/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ScreenReaderCore.framework/ScreenReaderCore
 */

@interface SCRCThread : NSObject {
    id  __key;
    NSString * _description;
    BOOL  _descriptionChanged;
    BOOL  _isInvalid;
    BOOL  _isRegistered;
    BOOL  _isTimerSet;
    BOOL  _isWaitingForStoppingThread;
    double  _lastStartTime;
    NSThread * _nsThread;
    SCRCStackQueue * _queue;
    id  _queueLock;
    struct __CFRunLoop { } * _runLoop;
    BOOL  _shouldStop;
    struct __CFRunLoopSource { } * _source;
    SCRCStackQueue * _waitingQueue;
}

@property (setter=_setKey:, nonatomic) id _key;
@property (setter=_setLastStartTime:, nonatomic) double lastStartTime;

+ (BOOL)_addThreadToRegisteredThreads:(id)arg1 withThreadKey:(id)arg2;
+ (double)_performSelector:(SEL)arg1 withThreadKey:(id)arg2 onTarget:(id)arg3 waitTime:(double)arg4 cancelMask:(unsigned long)arg5 count:(unsigned long)arg6 firstObject:(id)arg7 moreObjects:(void*)arg8;
+ (BOOL)_removeThreadFromRegisteredThreads:(id)arg1 withThreadKey:(id)arg2;
+ (int)activeThreadCount;
+ (id)activity;
+ (void)initialize;
+ (void)invalidateForKey:(id)arg1;
+ (double)lastStartTimeForKey:(id)arg1;
+ (void)postStopNotification;

- (void)_enqueueImmediateTask:(id)arg1 cancelMask:(unsigned long)arg2 lastStartTime:(double*)arg3;
- (void)_enqueueTask:(id)arg1 cancelMask:(unsigned long)arg2 lastStartTime:(double*)arg3;
- (void)_enqueueWaitingTask:(id)arg1 cancelMask:(unsigned long)arg2 lastStartTime:(double*)arg3;
- (id)_initWithKey:(id)arg1 task:(id)arg2;
- (BOOL)_isWaitingForStoppingThread;
- (id)_key;
- (double)_performSelector:(SEL)arg1 onTarget:(id)arg2 cancelMask:(unsigned long)arg3 count:(unsigned long)arg4 firstObject:(id)arg5 moreObjects:(void*)arg6;
- (void)_processQueue;
- (void)_processQueueFromTimer;
- (void)_runThread:(id)arg1;
- (void)_setIsWaitingForStoppingThread:(BOOL)arg1;
- (void)_setKey:(id)arg1;
- (void)_setLastStartTime:(double)arg1;
- (void)_setName:(id)arg1;
- (BOOL)_shouldStop;
- (void)_threadDidStop;
- (void)dealloc;
- (id)init;
- (BOOL)isInvalid;
- (double)lastStartTime;
- (double)performSelector:(SEL)arg1 onTarget:(id)arg2 cancelMask:(unsigned long)arg3 count:(unsigned long)arg4 objects:(id)arg5;
- (double)performSelector:(SEL)arg1 onTarget:(id)arg2 count:(unsigned long)arg3 objects:(id)arg4;
- (void)setIsInvalid:(BOOL)arg1;
- (void)setName:(id)arg1;

@end
