/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraEffectsKit.framework/CameraEffectsKit
 */

@interface JTEffectEditingUtilities : NSObject

+ (struct CGPoint { double x1; double x2; })CFX_compositionPointFromScreenPoint:(struct CGPoint { double x1; double x2; })arg1 locatedOnFace:(bool)arg2 withFaceAnchor:(id)arg3 bufferSize:(struct CGSize { double x1; double x2; })arg4;
+ (struct CGSize { double x1; double x2; })CFX_compositionSize;
+ (struct CGPoint { double x1; double x2; })CFX_convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromSize:(struct CGSize { double x1; double x2; })arg2 toSize:(struct CGSize { double x1; double x2; })arg3 invertY:(bool)arg4;
+ (struct CGPoint { double x1; double x2; })CFX_faceTrackPointFromCGPoint:(struct CGPoint { double x1; double x2; })arg1 overlay:(id)arg2 relativeToSize:(struct CGSize { double x1; double x2; })arg3;
+ (void)CFX_faceTrackPointsFromCGPoints:(struct CGPoint { double x1; double x2; }*)arg1 overlay:(id)arg2 relativeToSize:(struct CGSize { double x1; double x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CFX_faceTrackRectForEffectFromUIKitCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forEffect:(id)arg2 relativeToSize:(struct CGSize { double x1; double x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CFX_frameForEffect:(id)arg1 fitToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)CFX_hitTestEffects:(id)arg1 withinEffectPoints:(id)arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 forcePosterFrame:(bool)arg4 includeTracking:(bool)arg5;
+ (struct CGPoint { double x1; double x2; })CFX_placementPointForOverlay:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inCompositionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (struct CGPoint { double x1; double x2; })CFX_screenPointFromCompositionPoint:(struct CGPoint { double x1; double x2; })arg1 locatedOnFace:(bool)arg2 withFaceAnchor:(id)arg3 bufferSize:(struct CGSize { double x1; double x2; })arg4;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })CFX_screenRectForOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCompositionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withFaceAnchor:(id)arg3;
+ (int)CFX_trackingTypeForOverlayIntersectionWithFaceRect:(id)arg1 withCurrentTrackingType:(int)arg2;
+ (void)addTransformToEffect:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 restrictToBounds:(bool)arg5;
+ (bool)areFaceTrackedEffects:(id)arg1;
+ (void)beginTextEditingForEffect:(id)arg1;
+ (bool)canApplyEffectAsTracked;
+ (bool)canEditTextForEffect:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })compositionBounds;
+ (void)configureOverlayForInsertion:(id)arg1 atNormalizedCompositionPoint:(struct CGPoint { double x1; double x2; })arg2 scaleX:(double)arg3 scaleY:(double)arg4 rotationAngle:(double)arg5 includeTracking:(bool)arg6;
+ (void)configureOverlayForInsertion:(id)arg1 atScaleRelativeToComposition:(double)arg2 includeTracking:(bool)arg3;
+ (id)createTextEditingPropertiesForEffect:(id)arg1 relativeTo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 displayScale:(double)arg4;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentFaceRectRelativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (bool)didChangeTrackingTypeForFacePlaneIntersection:(id)arg1 atTouchPoint:(struct CGPoint { double x1; double x2; })arg2 forBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (void)disableAnimationForEffects:(id)arg1;
+ (void)enableAnimationForEffects:(id)arg1 animationStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
+ (void)endTextEditingForEffect:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForEffect:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForEffect:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 includeTracking:(bool)arg4;
+ (id)hitTestEffects:(id)arg1 atNormalizedPoint:(struct CGPoint { double x1; double x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeTracking:(bool)arg4;
+ (id)hitTestEffects:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 includeTracking:(bool)arg5;
+ (id)hitTestEffectsAtPosterFrame:(id)arg1 atNormalizedPoint:(struct CGPoint { double x1; double x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeTracking:(bool)arg4;
+ (id)hitTestEffectsAtPosterFrame:(id)arg1 atNormalizedPoints:(id)arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeTracking:(bool)arg4;
+ (id)hitTestEffectsAtPosterFrame:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 includeTracking:(bool)arg5;
+ (unsigned long long)maximumTextLengthForEffect:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })motionRectForEffectFromFaceTrackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forEffect:(id)arg2 relativeToSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)overlayHitTestPointsForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 compositionSize:(struct CGSize { double x1; double x2; })arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForCustomizedOverlay:(id)arg1 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scaleX:(double)arg3 scaleY:(double)arg4;
+ (struct CGPoint { double x1; double x2; })removeButtonPositionForEffect:(id)arg1 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 atPosterFrameRelativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 includeTracking:(bool)arg4;
+ (void)setFrameForEffect:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 includeTracking:(bool)arg5;
+ (void)setTextRenderingEnabledForEffect:(id)arg1 value:(bool)arg2;
+ (void)setTrackingEnabledForEffect:(id)arg1 enable:(bool)arg2;
+ (void)setTrackingTypeForEffect:(id)arg1 trackingType:(int)arg2;
+ (bool)shouldRenderTextWithMotionWhileEditingTextForEffect:(id)arg1;
+ (struct CGPoint { double x1; double x2; })spacingBetweenCenterPointOfEffect:(id)arg1 point:(struct CGPoint { double x1; double x2; })arg2 relativeToBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 includeTracking:(bool)arg5;
+ (id)textForEffect:(id)arg1;
+ (id)trackingTransformWithEffect:(id)arg1 effectFrame:(id)arg2 objectTransform:(id)arg3 fractionComplete:(double)arg4;
+ (void)updateEffectText:(id)arg1 newText:(id)arg2;
+ (void)updateEffectToDefaultTextIfEmpty:(id)arg1;
+ (void)updateEffectVisibility:(id)arg1 value:(bool)arg2;
+ (id)viewInfoForEffect:(id)arg1 forViewBoundsAtPosterFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 includeDropShadow:(bool)arg4;

@end
