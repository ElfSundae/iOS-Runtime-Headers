/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared
 */

@interface ICDrawingInputController : NSObject {
    struct ICDrawingAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; bool x9; id x10; } * _azimuthFilter;
    BOOL  _canSnapToRuler;
    ICDrawingCommandData * _currentCommand;
    int  _currentInputType;
    <ICDrawingInputControllerDelegate> * _delegate;
    struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { 
            struct { /* ? */ } *__first_; 
        } __end_cap_; 
    }  _drawPoints;
    BOOL  _drawingEndedButNotFinished;
    NSObject<OS_dispatch_semaphore> * _drawingWaitForFinishSemaphore;
    struct ICDrawingEndCapsFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; float x5; float x6; double x7; } * _endCapFilter;
    struct ICDrawingEndHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; } * _endHookFilter;
    BOOL  _ended;
    float  _eraserIndicatorAlpha;
    /* Warning: unhandled struct encoding: '{ICDrawingEstimatedAltitudeAndAzimuthFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}BfiiiffffiIiff@}' */ struct ICDrawingEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; float x8; float x9; float x10; float x11; int x12; unsigned int x13; int x14; float x15; float x16; id x17; } * _estimatedAltitudeAndAzimuthFilter;
    int  _immutableCount;
    /* Warning: unhandled struct encoding: '{ICDrawingInputProviderInitial=^^?@}' */ struct ICDrawingInputProviderInitial { int (**x1)(); id x2; } * _inputProvider;
    NSObject<OS_dispatch_queue> * _inputQueue;
    float  _inputScale;
    /* Warning: unhandled struct encoding: '{ICDrawingInputSmoother=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}f{vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}^{ICSmoothingPoint}{__compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}}}@}' */ struct ICDrawingInputSmoother { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; float x10; struct vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_11_1_1; struct ICSmoothingPoint {} *x_11_1_2; struct __compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; } * _inputSmoother;
    /* Warning: unhandled struct encoding: '{ICDrawingInputToOutputFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bfiii{vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingInputToOutputFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; } * _inputToOutputFilter;
    BOOL  _isSnappedToRuler;
    BOOL  _isSnappedToRulerTopSide;
    struct CGPoint { 
        float x; 
        float y; 
    }  _lastPoint;
    NSObject<OS_dispatch_queue> * _outputQueue;
    /* Warning: unhandled struct encoding: '{ICDrawingPixelSmoothingFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bffi@}' */ struct ICDrawingPixelSmoothingFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; float x5; int x6; id x7; } * _pixelSmoothingFilter;
    struct ICDrawingPointReductionFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; int x10; int x11; int x12; float x13; float x14; struct vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_15_1_1; struct pair<int, float> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<int, float> *, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_3_2_1; } x_15_1_3; } x15; } * _pointReductionFilter;
    /* Warning: unhandled struct encoding: '{ICDrawingRulerExtremaFilter=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingRulerExtremaFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; } * _rulerExtremaFilter;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    }  _rulerTransform;
    float  _rulerWidth;
    float  _smoothingKernel;
    struct ICDrawingStartHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; } * _startHookFilter;
    float  _strokeMaxForce;
    float  _touchSensitivity;
    struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { 
            struct { /* ? */ } *__first_; 
        } __end_cap_; 
    }  _updatedDrawPoints;
    BOOL  _useRuler;
    struct ICDrawingVelocityCalculationFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; bool x5; } * _velocityFilter;
}

@property (nonatomic) struct ICDrawingAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; /* Warning: unhandled struct encoding: '{vector<ICDrawingInputPoint' */ struct x8; }*azimuthFilter; /* unknown property attribute:  std::__1::allocator<ICDrawingInputPoint> >=^{?}}}B@i} */
@property (nonatomic) BOOL canSnapToRuler;
@property (nonatomic) struct ICDrawingEndCapsFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; float x5; float x6; double x7; }*endCapFilter;
@property (nonatomic) struct ICDrawingEndHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*endHookFilter;
@property (nonatomic) float eraserIndicatorAlpha;
@property (nonatomic) /* Warning: unhandled struct encoding: '{ICDrawingEstimatedAltitudeAndAzimuthFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}BfiiiffffiIiff@}' */ struct ICDrawingEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; float x8; float x9; float x10; float x11; int x12; unsigned int x13; int x14; float x15; float x16; id x17; }*estimatedAltitudeAndAzimuthFilter;
@property (nonatomic) /* Warning: unhandled struct encoding: '{ICDrawingInputProviderInitial=^^?@}' */ struct ICDrawingInputProviderInitial { int (**x1)(); id x2; }*inputProvider;
@property (nonatomic) struct ICDrawingInputSmoother { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; /* Warning: unhandled struct encoding: '{vector<ICDrawingOutputPoint' */ struct x8; }*inputSmoother; /* unknown property attribute:  std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}}}@} */
@property (nonatomic) struct ICDrawingInputToOutputFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; /* Warning: unhandled struct encoding: '{vector<ICDrawingInputPoint' */ struct x8; }*inputToOutputFilter; /* unknown property attribute:  std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@} */
@property BOOL isSnappedToRuler;
@property (nonatomic) BOOL isSnappedToRulerTopSide;
@property struct CGPoint { float x1; float x2; } lastPoint;
@property (readonly) BOOL lastPointIsMasked;
@property (nonatomic) /* Warning: unhandled struct encoding: '{ICDrawingPixelSmoothingFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bffi@}' */ struct ICDrawingPixelSmoothingFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; float x5; int x6; id x7; }*pixelSmoothingFilter;
@property (nonatomic) struct ICDrawingPointReductionFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; /* Warning: unhandled struct encoding: '{vector<ICDrawingInputPoint' */ struct x8; }*pointReductionFilter; /* unknown property attribute:  std::__1::allocator<int> >=^i}}} */
@property (nonatomic) struct ICDrawingRulerExtremaFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; /* Warning: unhandled struct encoding: '{vector<ICDrawingOutputPoint' */ struct x8; }*rulerExtremaFilter; /* unknown property attribute:  std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@} */
@property (nonatomic) struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } rulerTransform;
@property (nonatomic) float rulerWidth;
@property (nonatomic) struct ICDrawingStartHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*startHookFilter;
@property (nonatomic) float strokeMaxForce;
@property (nonatomic) float touchSensitivity;
@property (nonatomic) BOOL useRuler;
@property (nonatomic) struct ICDrawingVelocityCalculationFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; bool x5; }*velocityFilter;

+ (void)initialize;
+ (void)loadDefaults;
+ (void)setupDefaults;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_drawingAddPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1;
- (struct ICDrawingAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; bool x9; id x10; }*)azimuthFilter;
- (float)baseRadiusForCommandType:(unsigned int)arg1 inputType:(int)arg2;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })baseValuesforCommandType:(unsigned int)arg1 inputType:(int)arg2;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })calculateVelocityForFirstPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })calculateVelocityForNewPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 previousPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg2;
- (BOOL)canSnapToRuler;
- (unsigned int)copyInputUpdatedRangeFromIndex:(unsigned int)arg1 into:(struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg2;
- (void)dealloc;
- (float)distanceToRulerCenter:(struct CGPoint { float x1; float x2; })arg1;
- (void)drawingAddPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1;
- (void)drawingAddPoints:(struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; })arg1;
- (void)drawingBeganWithCommand:(id)arg1 inputType:(int)arg2 start:(id /* block */)arg3;
- (void)drawingCancelledWithCompletion:(id /* block */)arg1;
- (void)drawingEndedWithPreCompletion:(id /* block */)arg1 completion:(id /* block */)arg2;
- (void)drawingUpdateAllPoints;
- (void)drawingUpdatePoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1;
- (struct ICDrawingEndCapsFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; float x5; float x6; double x7; }*)endCapFilter;
- (struct ICDrawingEndHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*)endHookFilter;
- (float)eraserIndicatorAlpha;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })eraserOutputPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 baseValues:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })arg2;
- (/* Warning: unhandled struct encoding: '{ICDrawingEstimatedAltitudeAndAzimuthFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}BfiiiffffiIiff@}' */ struct ICDrawingEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; float x8; float x9; float x10; float x11; int x12; unsigned int x13; int x14; float x15; float x16; id x17; }*)estimatedAltitudeAndAzimuthFilter;
- (struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)getInputUpdatedRangeFromIndex:(inout unsigned int*)arg1;
- (struct CGPoint { float x1; float x2; })getRulerSnapLineOriginAndTangent:(struct CGPoint { float x1; float x2; }*)arg1 andNormal:(struct CGPoint { float x1; float x2; }*)arg2;
- (struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)getUpdatedRangeFromIndex:(inout unsigned int*)arg1;
- (void)handleMarkerStartCapPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; }*)arg1 forInput:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; }*)arg2;
- (id)init;
- (id)initWithDelegate:(id)arg1;
- (/* Warning: unhandled struct encoding: '{ICDrawingInputProviderInitial=^^?@}' */ struct ICDrawingInputProviderInitial { int (**x1)(); id x2; }*)inputProvider;
- (/* Warning: unhandled struct encoding: '{ICDrawingInputSmoother=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}f{vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}^{ICSmoothingPoint}{__compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}}}@}' */ struct ICDrawingInputSmoother { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; float x10; struct vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_11_1_1; struct ICSmoothingPoint {} *x_11_1_2; struct __compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; }*)inputSmoother;
- (/* Warning: unhandled struct encoding: '{ICDrawingInputToOutputFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bfiii{vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingInputToOutputFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; }*)inputToOutputFilter;
- (BOOL)isSnappedToRuler;
- (BOOL)isSnappedToRulerTopSide;
- (struct CGPoint { float x1; float x2; })lastPoint;
- (BOOL)lastPointIsMasked;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })markerOutputPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 baseValues:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })arg2;
- (void)maskToRuler;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })outputCurrentCommandPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1;
- (struct ICDrawingInputProvider<ICDrawingOutputPoint> { int (**x1)(); }*)outputFilter;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })outputPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 forCommandType:(unsigned int)arg2 baseValues:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })arg3;
- (struct { float x1; float x2; float x3; })parametersforCommandType:(unsigned int)arg1;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })penOutputPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 baseValues:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })arg2;
- (struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })pencilOutputPoint:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; double x6; BOOL x7; int x8; float x9; BOOL x10; })arg1 baseValues:(struct { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; float x2; float x3; float x4; float x5; float x6; double x7; })arg2;
- (/* Warning: unhandled struct encoding: '{ICDrawingPixelSmoothingFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bffi@}' */ struct ICDrawingPixelSmoothingFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; float x5; int x6; id x7; }*)pixelSmoothingFilter;
- (struct ICDrawingPointReductionFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; int x10; int x11; int x12; float x13; float x14; struct vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_15_1_1; struct pair<int, float> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<int, float> *, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_3_2_1; } x_15_1_3; } x15; }*)pointReductionFilter;
- (void)removePredictedTouches;
- (void)reset;
- (/* Warning: unhandled struct encoding: '{ICDrawingRulerExtremaFilter=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingRulerExtremaFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; }*)rulerExtremaFilter;
- (float)rulerOffset;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })rulerTransform;
- (float)rulerWidth;
- (void)setAzimuthFilter:(struct ICDrawingAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; bool x9; id x10; }*)arg1;
- (void)setCanSnapToRuler:(BOOL)arg1;
- (void)setEndCapFilter:(struct ICDrawingEndCapsFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; float x5; float x6; double x7; }*)arg1;
- (void)setEndHookFilter:(struct ICDrawingEndHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*)arg1;
- (void)setEraserIndicatorAlpha:(float)arg1;
- (void)setEstimatedAltitudeAndAzimuthFilter:(/* Warning: unhandled struct encoding: '{ICDrawingEstimatedAltitudeAndAzimuthFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}BfiiiffffiIiff@}' */ struct ICDrawingEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; float x8; float x9; float x10; float x11; int x12; unsigned int x13; int x14; float x15; float x16; id x17; }*)arg1;
- (void)setInputProvider:(/* Warning: unhandled struct encoding: '{ICDrawingInputProviderInitial=^^?@}' */ struct ICDrawingInputProviderInitial { int (**x1)(); id x2; }*)arg1;
- (void)setInputScale:(float)arg1;
- (void)setInputSmoother:(/* Warning: unhandled struct encoding: '{ICDrawingInputSmoother=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}f{vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}^{ICSmoothingPoint}{__compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> >=^{ICSmoothingPoint}}}@}' */ struct ICDrawingInputSmoother { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; float x10; struct vector<ICSmoothingPoint, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_11_1_1; struct ICSmoothingPoint {} *x_11_1_2; struct __compressed_pair<ICSmoothingPoint *, std::__1::allocator<ICSmoothingPoint> > { struct ICSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; }*)arg1;
- (void)setInputToOutputFilter:(/* Warning: unhandled struct encoding: '{ICDrawingInputToOutputFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bfiii{vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingInputToOutputFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; }*)arg1;
- (void)setIsSnappedToRuler:(BOOL)arg1;
- (void)setIsSnappedToRulerTopSide:(BOOL)arg1;
- (void)setLastPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setPixelSmoothingFilter:(/* Warning: unhandled struct encoding: '{ICDrawingPixelSmoothingFilter=^^?^{ICDrawingInputProvider<ICDrawingInputPoint>}Bffi@}' */ struct ICDrawingPixelSmoothingFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; float x5; int x6; id x7; }*)arg1;
- (void)setPointReductionFilter:(struct ICDrawingPointReductionFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingInputPoint, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingInputPoint *, std::__1::allocator<ICDrawingInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; int x10; int x11; int x12; float x13; float x14; struct vector<std::__1::pair<int, float>, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_15_1_1; struct pair<int, float> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<int, float> *, std::__1::allocator<std::__1::pair<int, float> > > { struct pair<int, float> {} *x_3_2_1; } x_15_1_3; } x15; }*)arg1;
- (void)setRulerExtremaFilter:(/* Warning: unhandled struct encoding: '{ICDrawingRulerExtremaFilter=^^?^{ICDrawingInputProvider<ICDrawingOutputPoint>}Bfiii{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}{vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> >=^{?}^{?}{__compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> >=^{?}}}@}' */ struct ICDrawingRulerExtremaFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingOutputPoint> {} *x2; bool x3; float x4; int x5; int x6; int x7; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_8_1_1; struct { /* ? */ } *x_8_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_8_1_3; } x8; struct vector<ICDrawingOutputPoint, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<ICDrawingOutputPoint *, std::__1::allocator<ICDrawingOutputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; id x10; }*)arg1;
- (void)setRulerTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setRulerWidth:(float)arg1;
- (void)setStartHookFilter:(struct ICDrawingStartHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*)arg1;
- (void)setStrokeMaxForce:(float)arg1;
- (void)setTouchSensitivity:(float)arg1;
- (void)setUseRuler:(BOOL)arg1;
- (void)setVelocityFilter:(struct ICDrawingVelocityCalculationFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; bool x5; }*)arg1;
- (BOOL)shouldSnapPointToRuler:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })snapPointToRuler:(struct CGPoint { float x1; float x2; })arg1;
- (void)snapToRuler;
- (void)snapToRuler:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1 width:(float)arg2;
- (struct ICDrawingStartHookFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; int x5; bool x6; }*)startHookFilter;
- (float)strokeMaxForce;
- (float)touchSensitivity;
- (void)updateImmutableCount;
- (void)updateRulerSnapping;
- (BOOL)useRuler;
- (struct ICDrawingVelocityCalculationFilter { int (**x1)(); struct ICDrawingInputProvider<ICDrawingInputPoint> {} *x2; bool x3; float x4; bool x5; }*)velocityFilter;

@end
