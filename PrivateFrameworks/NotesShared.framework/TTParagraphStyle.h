/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared
 */

@interface TTParagraphStyle : NSObject <NSCopying, NSMutableCopying> {
    int _alignment;
    unsigned int _hints;
    unsigned int _indent;
    BOOL _needsListCleanup;
    BOOL _needsParagraphCleanup;
    unsigned int _startingItemNumber;
    unsigned int _style;
    TTTodo *_todo;
    int _writingDirection;
}

@property (nonatomic) int alignment;
@property (nonatomic, readonly) BOOL canIndent;
@property (nonatomic) unsigned int hints;
@property (nonatomic) unsigned int indent;
@property (nonatomic, readonly) BOOL isHeader;
@property (nonatomic, readonly) BOOL isList;
@property (nonatomic, readonly) int layoutWritingDirection;
@property (nonatomic) BOOL needsListCleanup;
@property (nonatomic) BOOL needsParagraphCleanup;
@property (nonatomic, readonly) BOOL preferSingleLine;
@property (nonatomic) unsigned int startingItemNumber;
@property (nonatomic) unsigned int style;
@property (nonatomic, retain) TTTodo *todo;
@property (nonatomic, readonly) NSUUID *trackingUUID;
@property (nonatomic, readonly) BOOL uniqueToLine;
@property (nonatomic, readonly) BOOL wantsFollowingNewLine;
@property (nonatomic) int writingDirection;

+ (struct unordered_map<NSTextAlignment, topotext::ParagraphStyle_Alignment, std::__1::hash<int>, std::__1::equal_to<NSTextAlignment>, std::__1::allocator<std::__1::pair<const NSTextAlignment, topotext::ParagraphStyle_Alignment> > > { struct __hash_table<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, std::__1::__unordered_map_hasher<NSTextAlignment, std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<NSTextAlignment, std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, std::__1::equal_to<NSTextAlignment>, true>, std::__1::allocator<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> *> { struct __hash_node<std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSTextAlignment, std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, std::__1::hash<int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<NSTextAlignment, std::__1::__hash_value_type<NSTextAlignment, topotext::ParagraphStyle_Alignment>, std::__1::equal_to<NSTextAlignment>, true> > { float x_4_2_1; } x_1_1_4; } x1; })paragraphStyleAlignmentMap;
+ (struct unordered_map<topotext::ParagraphStyle_Alignment, NSTextAlignment, std::__1::hash<int>, std::__1::equal_to<topotext::ParagraphStyle_Alignment>, std::__1::allocator<std::__1::pair<const topotext::ParagraphStyle_Alignment, NSTextAlignment> > > { struct __hash_table<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, std::__1::__unordered_map_hasher<topotext::ParagraphStyle_Alignment, std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<topotext::ParagraphStyle_Alignment, std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, std::__1::equal_to<topotext::ParagraphStyle_Alignment>, true>, std::__1::allocator<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> *> { struct __hash_node<std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<topotext::ParagraphStyle_Alignment, std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, std::__1::hash<int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<topotext::ParagraphStyle_Alignment, std::__1::__hash_value_type<topotext::ParagraphStyle_Alignment, NSTextAlignment>, std::__1::equal_to<topotext::ParagraphStyle_Alignment>, true> > { float x_4_2_1; } x_1_1_4; } x1; })paragraphStyleAlignmentMapReverse;
+ (id)paragraphStyleNamed:(unsigned int)arg1;

- (void).cxx_destruct;
- (int)alignment;
- (BOOL)canIndent;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (unsigned int)hash;
- (unsigned int)hints;
- (unsigned int)indent;
- (id)init;
- (id)initWithArchive:(const struct ParagraphStyle { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[1]; int x4; unsigned int x5; int x6; int x7; int x8; struct Todo {} *x9; unsigned int x10; unsigned int x11; }*)arg1;
- (id)initWithData:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isHeader;
- (BOOL)isList;
- (BOOL)isUnknownStyle;
- (int)layoutWritingDirection;
- (id)listBulletInAttributedString:(id)arg1 atIndex:(unsigned int)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)needsListCleanup;
- (BOOL)needsParagraphCleanup;
- (BOOL)preferSingleLine;
- (void)saveToArchive:(struct ParagraphStyle { int (**x1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; unsigned int x3[1]; int x4; unsigned int x5; int x6; int x7; int x8; struct Todo {} *x9; unsigned int x10; unsigned int x11; }*)arg1;
- (id)serialize;
- (void)setAlignment:(int)arg1;
- (void)setHints:(unsigned int)arg1;
- (void)setIndent:(unsigned int)arg1;
- (void)setNeedsListCleanup:(BOOL)arg1;
- (void)setNeedsParagraphCleanup:(BOOL)arg1;
- (void)setStartingItemNumber:(unsigned int)arg1;
- (void)setStyle:(unsigned int)arg1;
- (void)setTodo:(id)arg1;
- (void)setWritingDirection:(int)arg1;
- (unsigned int)startingItemNumber;
- (unsigned int)style;
- (id)todo;
- (id)trackingUUID;
- (BOOL)uniqueToLine;
- (BOOL)wantsFollowingNewLine;
- (int)writingDirection;

@end
