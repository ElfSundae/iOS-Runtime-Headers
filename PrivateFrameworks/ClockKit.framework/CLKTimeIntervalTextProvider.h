/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ClockKit.framework/ClockKit
 */

@interface CLKTimeIntervalTextProvider : CLKTextProvider {
    NSDateFormatter * _dateFormatter;
    NSDate * _endDate;
    NSArray * _fallbackSequence;
    NSDate * _startDate;
    NSTimeZone * _timeZone;
}

@property (nonatomic, retain) NSDate *endDate;
@property (nonatomic, retain) NSDate *startDate;
@property (nonatomic, retain) NSTimeZone *timeZone;

+ (id)finalizedTextProviderWithStartDate:(id)arg1 endDate:(id)arg2;
+ (id)finalizedTextProviderWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3;
+ (BOOL)supportsSecureCoding;
+ (id)textProviderWithStartDate:(id)arg1 endDate:(id)arg2;
+ (id)textProviderWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3;

- (void).cxx_destruct;
- (id)JSONObjectRepresentation;
- (id)_attributedTextForSequenceItem:(int)arg1 style:(id)arg2;
- (id)_dateIntervalAttributedTextWithStyle:(id)arg1 narrow:(BOOL)arg2;
- (id)_dateIntervalNarrowAttributedTextWithStyle:(id)arg1;
- (id)_dateIntervalWideAttributedTextWithStyle:(id)arg1;
- (id)_fallbackSequence;
- (id)_initWithJSONObjectRepresentation:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeOfAnnontatedTime:(id)arg1 matchingPattern:(id /* block */)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeOfDesignatorInAnnotatedTime:(id)arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_rangeOfHoursInAnnotatedTime:(id)arg1;
- (id)_sessionAttributedTextForIndex:(unsigned int)arg1 withStyle:(id)arg2;
- (id)_startTimeDropMinutesAttributedTextWithStyle:(id)arg1;
- (id)_startTimeFullAttributedTextWithStyle:(id)arg1;
- (id)_stringByRemovingDesignatorRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 fromString:(id)arg2;
- (id)_timeIntervalAttributedTextWithStyle:(id)arg1 dropMinutes:(BOOL)arg2 onlyStartDate:(BOOL)arg3;
- (id)_timeIntervalDropMinutesAttributedTextWithStyle:(id)arg1;
- (id)_timeIntervalFullAttributedTextWithStyle:(id)arg1;
- (void)_validate;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)endDate;
- (unsigned int)hash;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)setEndDate:(id)arg1;
- (void)setStartDate:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (id)startDate;
- (id)timeZone;

@end
