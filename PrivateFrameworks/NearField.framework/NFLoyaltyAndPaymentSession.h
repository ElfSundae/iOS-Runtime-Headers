/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NearField.framework/NearField
 */

@interface NFLoyaltyAndPaymentSession : NFSession {
    NFApplet * _activeApplet;
    NSDictionary * _appletsById;
    NFApplet * _defaultApplet;
    NFWeakReference * _delegate;
    BOOL  _emulationActive;
    unsigned int  _numActiveSEs;
    BOOL  _pendingServerRequest;
    NFTechnologyEvent * _technologyEvent;
    BOOL  _vasTransactionInProgress;
}

@property (readonly) NFApplet *activeApplet;
@property (readonly) NFApplet *defaultApplet;
@property <NFLoyaltyAndPaymentSessionDelegate> *delegate;
@property (readonly) unsigned int numberOfActiveSecureElements;

- (BOOL)_startCardEmulationWithAuthorization:(id)arg1;
- (BOOL)_startDeferredCardEmulationWithAuthorization:(id)arg1;
- (BOOL)_startHostCardEmulation;
- (id)activeApplet;
- (id)allApplets;
- (id)appletWithIdentifier:(id)arg1;
- (void)dealloc;
- (id)defaultApplet;
- (id)delegate;
- (void)didDetectField:(BOOL)arg1;
- (void)didDetectTechnology:(id)arg1;
- (void)didEndTransaction:(id)arg1;
- (void)didEndUnexpectedly;
- (void)didExpireTransactionForApplet:(id)arg1;
- (void)didExpressModeStateChange:(unsigned int)arg1;
- (void)didFailDeferredAuthorization;
- (void)didFelicaStateChange:(id)arg1;
- (void)didPerformValueAddedServiceTransactions:(id)arg1;
- (void)didReceiveActivityTimeout;
- (void)didReceiveButtonPressForApplet:(id)arg1;
- (void)didReceivePendingServerRequest;
- (void)didSelectApplet:(id)arg1;
- (void)didSelectValueAddedService:(BOOL)arg1;
- (void)didStartSession:(id)arg1;
- (void)didStartTransaction:(id)arg1;
- (BOOL)enablePlasticCardMode:(BOOL)arg1;
- (void)endSession;
- (void)endSessionWithCompletion:(id /* block */)arg1;
- (id)felicaAppletState:(id)arg1;
- (unsigned int)numberOfActiveSecureElements;
- (BOOL)setActivePaymentApplet:(id)arg1;
- (BOOL)setActivePaymentApplet:(id)arg1 makeDefault:(BOOL)arg2;
- (void)setDelegate:(id)arg1;
- (BOOL)setHostCards:(id)arg1;
- (BOOL)startCardEmulation:(unsigned char)arg1 authorization:(id)arg2;
- (BOOL)startDeferredCardEmulation:(unsigned char)arg1 authorization:(id)arg2;
- (BOOL)startHostCardEmulation;
- (BOOL)stopCardEmulation;

@end
