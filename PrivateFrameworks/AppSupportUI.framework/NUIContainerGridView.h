/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AppSupportUI.framework/AppSupportUI
 */

@interface NUIContainerGridView : NUIContainerView <_NUIGridArrangementContainer> {
    float  _columnWidth;
    struct vector<_NUIGridViewDimensionConfiguration, std::__1::allocator<_NUIGridViewDimensionConfiguration> > { 
        struct _NUIGridViewDimensionConfiguration {} *__begin_; 
        struct _NUIGridViewDimensionConfiguration {} *__end_; 
        struct __compressed_pair<_NUIGridViewDimensionConfiguration *, std::__1::allocator<_NUIGridViewDimensionConfiguration> > { 
            struct _NUIGridViewDimensionConfiguration {} *__first_; 
        } __end_cap_; 
    }  _columns;
    struct { 
        unsigned int inInsertOrRemove : 1; 
        unsigned int delegateMinSpacing : 1; 
        unsigned int delegateHorizontalAlignment : 1; 
        unsigned int delegateVerticalAlignment : 1; 
    }  _gridViewFlags;
    int  _horizontalAlignment;
    float  _rowHeight;
    struct vector<_NUIGridViewDimensionConfiguration, std::__1::allocator<_NUIGridViewDimensionConfiguration> > { 
        struct _NUIGridViewDimensionConfiguration {} *__begin_; 
        struct _NUIGridViewDimensionConfiguration {} *__end_; 
        struct __compressed_pair<_NUIGridViewDimensionConfiguration *, std::__1::allocator<_NUIGridViewDimensionConfiguration> > { 
            struct _NUIGridViewDimensionConfiguration {} *__first_; 
        } __end_cap_; 
    }  _rows;
    struct CGSize { 
        float width; 
        float height; 
    }  _spacing;
    int  _verticalAlignment;
    struct unordered_map<UIView *, const std::__1::pair<_NSRange, _NSRange>, std::__1::hash<UIView *>, std::__1::equal_to<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, const std::__1::pair<_NSRange, _NSRange> > > > { 
        struct __hash_table<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::__unordered_map_hasher<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::hash<UIView *>, true>, std::__1::__unordered_map_equal<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::equal_to<UIView *>, true>, std::__1::allocator<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::hash<UIView *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::equal_to<UIView *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    }  _viewRanges;
    NSMutableArray * _viewRows;
    struct _NUIGridArrangement { 
        <_NUIGridArrangementContainer> *container; 
        BOOL baselineRelative; 
        int horzDist; 
        int vertDist; 
        struct vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> > { 
            struct _NUIGridArrangementCell {} *__begin_; 
            struct _NUIGridArrangementCell {} *__end_; 
            struct __compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> > { 
                struct _NUIGridArrangementCell {} *__first_; 
            } __end_cap_; 
        } cells; 
        struct vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> > { 
            struct _NUIGridArrangementDimension {} *__begin_; 
            struct _NUIGridArrangementDimension {} *__end_; 
            struct __compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> > { 
                struct _NUIGridArrangementDimension {} *__first_; 
            } __end_cap_; 
        } columns; 
        struct vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> > { 
            struct _NUIGridArrangementDimension {} *__begin_; 
            struct _NUIGridArrangementDimension {} *__end_; 
            struct __compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> > { 
                struct _NUIGridArrangementDimension {} *__first_; 
            } __end_cap_; 
        } rows; 
    }  _visibleArrangement;
    struct CGSize { 
        float width; 
        float height; 
    }  _visibleCount;
}

@property (nonatomic) float columnSpacing;
@property (nonatomic) float columnWidth;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NUIContainerGridViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic) int horizontalAlignment;
@property (nonatomic) int horizontalDistribution;
@property (nonatomic, readonly) int numberOfColumns;
@property (nonatomic, readonly) int numberOfRows;
@property (nonatomic) float rowHeight;
@property (nonatomic) float rowSpacing;
@property (readonly) Class superclass;
@property (nonatomic) int verticalAlignment;
@property (nonatomic) int verticalDistribution;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_baselineViewVendForFirstBaseline:(BOOL)arg1 fromViews:(id)arg2;
- (float)_heightOfRowAtIndex:(int)arg1;
- (int)_horizontalAlignmentOfView:(id)arg1 inColumn:(int)arg2;
- (void)_setupViewRangesIfNeeded;
- (int)_verticalAlignmentOfView:(id)arg1 inColumn:(int)arg2;
- (float)_widthOfColumnAtIndex:(int)arg1;
- (void)addColumnWithArrangedSubviews:(id)arg1;
- (void)addRowWithArrangedSubviews:(id)arg1;
- (id)arrangedDescription;
- (id)arrangedSubviewInColumnAtIndex:(int)arg1 rowAtIndex:(int)arg2;
- (id)arrangedSubviewsInColumnAtIndex:(int)arg1;
- (id)arrangedSubviewsInRowAtIndex:(int)arg1;
- (struct CGSize { float x1; float x2; })calculateArrangedSizeFittingSize:(struct CGSize { float x1; float x2; })arg1;
- (int)columnIndexForArrangedSubview:(id)arg1;
- (float)columnSpacing;
- (float)columnWidth;
- (void)dealloc;
- (void)didInsertArrangedSubview:(id)arg1 atIndex:(int)arg2;
- (void)didRemoveArrangedSubview:(id)arg1 atIndex:(int)arg2;
- (void)getColumnRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg1 rowRange:(struct _NSRange { unsigned int x1; unsigned int x2; }*)arg2 forArrangedSubview:(id)arg3;
- (float)heightOfRowAtIndex:(int)arg1;
- (int)horizontalAlignment;
- (int)horizontalAlignmentOfColumnAtIndex:(unsigned int)arg1;
- (int)horizontalDistribution;
- (id)initWithArrangeSubviewRows:(id)arg1;
- (id)initWithArrangedSubviews:(id)arg1;
- (void)insertColumnAtIndex:(int)arg1 withArrangedSubviews:(id)arg2;
- (void)insertRowAtIndex:(int)arg1 withArrangedSubviews:(id)arg2;
- (void)invalidateIntrinsicContentSizeRequiringArrangedSubviewRemeasurement:(BOOL)arg1;
- (BOOL)isColumnAtIndexHidden:(int)arg1;
- (BOOL)isRowAtIndexHidden:(int)arg1;
- (BOOL)layoutArrangedSubviewsInBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (int)numberOfColumns;
- (int)numberOfRows;
- (void)populateGridArrangementCells:(struct vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> > { struct _NUIGridArrangementCell {} *x1; struct _NUIGridArrangementCell {} *x2; struct __compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> > { struct _NUIGridArrangementCell {} *x_3_1_1; } x3; }*)arg1;
- (void)populateGridArrangementDimension:(struct vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> > { struct _NUIGridArrangementDimension {} *x1; struct _NUIGridArrangementDimension {} *x2; struct __compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> > { struct _NUIGridArrangementDimension {} *x_3_1_1; } x3; }*)arg1 withCells:(const struct vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> > { struct _NUIGridArrangementCell {} *x1; struct _NUIGridArrangementCell {} *x2; struct __compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> > { struct _NUIGridArrangementCell {} *x_3_1_1; } x3; }*)arg2 axis:(int)arg3;
- (void)removeColumnAtIndex:(int)arg1;
- (void)removeRowAtIndex:(int)arg1;
- (float)rowHeight;
- (int)rowIndexForArrangedSubview:(id)arg1;
- (float)rowSpacing;
- (void)setBaselineRelativeArrangement:(BOOL)arg1;
- (void)setColumnAtIndex:(int)arg1 hidden:(BOOL)arg2;
- (void)setColumnSpacing:(float)arg1;
- (void)setColumnWidth:(float)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHeight:(float)arg1 ofRowAtIndex:(int)arg2;
- (void)setHorizontalAlignment:(int)arg1;
- (void)setHorizontalAlignment:(int)arg1 ofColumnAtIndex:(int)arg2;
- (void)setHorizontalDistribution:(int)arg1;
- (void)setRowAtIndex:(int)arg1 hidden:(BOOL)arg2;
- (void)setRowHeight:(float)arg1;
- (void)setRowSpacing:(float)arg1;
- (void)setSpacing:(float)arg1 afterColumnAtIndex:(int)arg2;
- (void)setSpacing:(float)arg1 afterRowAtIndex:(int)arg2;
- (void)setVerticalAlignment:(int)arg1;
- (void)setVerticalAlignment:(int)arg1 ofColumnAtIndex:(int)arg2;
- (void)setVerticalDistribution:(int)arg1;
- (void)setWidth:(float)arg1 ofColumnAtIndex:(int)arg2;
- (float)spacingAfterColumnAtIndex:(int)arg1;
- (float)spacingAfterRowAtIndex:(int)arg1;
- (int)verticalAlignment;
- (int)verticalAlignmentOfColumnAtIndex:(unsigned int)arg1;
- (int)verticalDistribution;
- (id)viewForFirstBaselineLayout;
- (id)viewForLastBaselineLayout;
- (float)widthOfColumnAtIndex:(int)arg1;

@end
