/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing
 */

@interface VCPVideoFaceDetector : VCPVideoAnalyzer {
    NSMutableDictionary * _activeFaces;
    int  _angle;
    NSMutableArray * _detections;
    int  _lastestFaceID;
    int  _numFacesLastFrame;
    struct Rotator { struct __CVPixelBufferPool {} *x1; int x2; int x3; int x4; struct OpaqueVTImageRotationSession {} *x5; } * _rotator;
    VCPCNNSmileDetector * _smileDetector;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _timeLastProcess;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    }  _transform;
}

+ (id)faceDetectorWithTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1 cancel:(id /* block */)arg2;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })flipTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rotateRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forAngle:(int)arg2 width:(int)arg3 height:(int)arg4;

- (void).cxx_destruct;
- (long)analyzeFrame:(struct __CVBuffer { }*)arg1 withTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 andDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 flags:(unsigned int*)arg4;
- (void)dealloc;
- (long)detectFaces:(struct __CVBuffer { }*)arg1 faces:(id)arg2;
- (long)finishAnalysisPass:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)initWithTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (float)minProcessTimeIntervalInSecs;
- (id)results;

@end
