/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet
 */

@interface _CDActivityScheduler : NSObject {
    NSObject<OS_dispatch_queue> *_queue;
    unsigned int _swAckPort;
    int acPowerActCount;
    int acPowerSuspendActCount;
    NSObject<OS_dispatch_source> *activityDispatcher;
    CDAttribute *budgetAttribute;
    int completedActCount;
    _CDActivity *currentDeviceRestartActivity;
    int currentIntensiveActCount;
    BOOL deviceRestartForecastValid;
    _CDDateRange *deviceRestartPeriod1;
    _CDDateRange *deviceRestartPeriod2;
    int execActCount;
    int execActCountWithNoConditions;
    NSMutableArray *favorableStateQueue;
    NSDate *forecastTimestamp;
    int idleSleepPreventersToken;
    unsigned char inactivityForecast;
    BOOL inactivityForecastValid;
    unsigned int maxConcurrentExec;
    int memorySuspendActCount;
    NSDate *nextForecastUpdate;
    NSDate *nextScheduleUpdate;
    _CDDateRange *nextSleepPeriod1;
    _CDDateRange *nextSleepPeriod2;
    int overdueActCount;
    CDAttribute *pluginAttribute;
    unsigned char pluginForecast;
    BOOL pluginForecastValid;
    int powerStateChangeToken;
    NSMutableArray *requisiteStateQueue;
    unsigned int restartAssertion;
    unsigned int restartAssertionCheckId;
    int restartCheckNotificationToken;
    NSMutableArray *runQueue;
    CDSession *session;
    NSMutableArray *submittedActivities;
    NSMutableArray *suspendQueue;
    unsigned int swNotifier;
    struct IONotificationPort { } *swNotifyPort;
    _CDSystemMonitor *systemMonitor;
    int systemSleepPreventersToken;
    int thermalSuspendActCount;
    int totalActCompletionTime;
    int totalActStartTime;
    int userAssertionsAnyChangeToken;
    int userInactiveActCount;
    int userInactiveSuspendActCount;
    int wakeRequestsToken;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *_queue;
@property (nonatomic) unsigned int _swAckPort;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)_queue;
- (unsigned int)_swAckPort;
- (BOOL)activityCompleted:(id)arg1 error:(id*)arg2;
- (BOOL)admissionCheckOnActivity:(id)arg1;
- (BOOL)assertionCheckForDeviceRestart:(id)arg1;
- (BOOL)cacheSleepPeriod:(id)arg1 end:(id)arg2 period1:(id*)arg3 period2:(id*)arg4;
- (void)callStartHandler:(id)arg1;
- (BOOL)cancelActivity:(id)arg1 error:(id*)arg2;
- (id)dateToString:(id)arg1;
- (void)dealloc;
- (void)deregisterForAnyAssertionChange;
- (BOOL)deviceRestartAdmissionCheck:(id)arg1;
- (void)disableHeySiri;
- (void)enableHeySiri;
- (BOOL)getDeviceRestartForecast;
- (id)getForecastForAttribute:(id)arg1;
- (BOOL)getForecastForDevicePlugin:(char *)arg1;
- (BOOL)getForecastForUserInactivity:(char *)arg1;
- (void)handleActivitySubmission:(id)arg1;
- (void)handleSystemNotification:(unsigned int)arg1;
- (id)init;
- (void)insertActivity:(id)arg1 toQueue:(id)arg2 onCondition:(id /* block */)arg3;
- (BOOL)isUserAsleep;
- (BOOL)isUserAsleepForDeviceRestart:(id)arg1;
- (void)processActivityQueues;
- (void)processDeviceRestartActivities;
- (void)processDeviceRestartSuspension;
- (void)processFavorableStateQueue;
- (void)processRequisiteStateQueue;
- (void)processSubmittedActivity:(id)arg1;
- (void)registerForAnyAssertionChange;
- (void)registerForDeviceRestartMonitoring;
- (void)retryAdmissionCheck:(int)arg1;
- (void)scheduleSystemWakeAt:(id)arg1 forActivity:(id)arg2 withLeeway:(int)arg3;
- (void)setActivityScheduleTime:(id)arg1;
- (void)setDispatchTimer;
- (void)set_queue:(id)arg1;
- (void)set_swAckPort:(unsigned int)arg1;
- (BOOL)submitActivity:(id)arg1 error:(id*)arg2;
- (BOOL)submitActivityBatch:(id)arg1 error:(id*)arg2;
- (void)suspendExecutingActivities:(id /* block */)arg1;
- (BOOL)systemAdmissionCheck;
- (void)updateAggdKeys;
- (BOOL)updateForecasts;

@end
