/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit
 */

@interface _TVInfoCellView : UIView <TVAppTemplateImpressionable> {
    NSArray * _dataViews;
    UIView * _headerContentView;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  _headerMargin;
    float  _headerMaxWidth;
    float  _headerMinWidth;
    BOOL  _headerOnLeft;
    float  _headerWidth;
    float  _normalizedHeaderWidth;
}

@property (nonatomic, retain) NSArray *dataViews;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) UIView *headerContentView;
@property (nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } headerMargin;
@property (nonatomic) float headerMaxWidth;
@property (nonatomic) float headerMinWidth;
@property (nonatomic) BOOL headerOnLeft;
@property (nonatomic) float headerWidth;
@property (nonatomic) float normalizedHeaderWidth;
@property (readonly) Class superclass;

+ (id)infoCellViewWithElement:(id)arg1 existingView:(id)arg2;

- (void).cxx_destruct;
- (id)dataViews;
- (id)headerContentView;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })headerMargin;
- (float)headerMaxWidth;
- (float)headerMinWidth;
- (BOOL)headerOnLeft;
- (float)headerWidth;
- (id)impressionableElementsContainedInDocument:(id)arg1;
- (void)layoutSubviews;
- (float)minimumHeaderWidth;
- (float)normalizedHeaderWidth;
- (void)setDataViews:(id)arg1;
- (void)setHeaderContentView:(id)arg1;
- (void)setHeaderMargin:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setHeaderMaxWidth:(float)arg1;
- (void)setHeaderMinWidth:(float)arg1;
- (void)setHeaderOnLeft:(BOOL)arg1;
- (void)setHeaderWidth:(float)arg1;
- (void)setNormalizedHeaderWidth:(float)arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1 withHeaderWidth:(float)arg2;

@end
