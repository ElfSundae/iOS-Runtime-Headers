/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTLayout : TSWPTextHostLayout <TSKSearchTarget, TSWPColumnMetrics, TSWPLayoutParent, TSWPStorageObserver> {
    struct CGSize { 
        float width; 
        float height; 
    }  mAdjustableTableSize;
    NSMutableDictionary * mAttachmentCellLayouts;
    struct { 
        float tableNameHeight; 
        struct CGSize { 
            float width; 
            float height; 
        } scaleToFitParent; 
        struct CGSize { 
            float width; 
            float height; 
        } scaleToFitEnclosingTextColumn; 
    }  mCached;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  mCachedPaddingForEditingCell;
    int  mCachedVerticalAlignmentForEditingCell;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  mCanvasVisibleRect;
    struct CGSize { 
        float width; 
        float height; 
    }  mCapturedStrokeFrameSizeForInline;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  mComputedEditingCellContentFrame;
    TSWPLayout * mContainedTextEditingLayout;
    int  mContainedTextEditorParagraphAlignment;
    BOOL  mContainedTextEditorSpills;
    BOOL  mContainedTextEditorTextWraps;
    int  mCoordinatesChangedMaskForChrome;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mEditingSpillingTextRange;
    struct CGSize { 
        float width; 
        float height; 
    }  mFixedTableSize;
    BOOL  mLayoutDirectionIsLeftToRight;
    TSTLayoutHint * mLayoutHint;
    TSTMasterLayout * mMasterLayout;
    BOOL  mNewCanvasRevealedHorizontally;
    BOOL  mNewCanvasRevealedVertically;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    }  mPrevEditingSpillingTextRange;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  mPreviousVisibleStrokeFrame;
    BOOL  mProcessChangesFiltering;
    BOOL  mRemovingContainedTextEditorLayout;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  mRenderingFrameForLayoutGeometryFromInfo;
    BOOL  mShouldUpdateAttachmentChildren;
    TSTLayoutSpaceBundle * mSpaceBundle;
    struct CGSize { 
        float width; 
        float height; 
    }  mSpillingTextSize;
    BOOL  mTableNameVisibilityIsValid;
    BOOL  mTableNameVisible;
    BOOL  mTabsVisible;
}

@property (nonatomic, readonly) BOOL alwaysStartsNewTarget;
@property (nonatomic, readonly) unsigned int columnCount;
@property (nonatomic, readonly) BOOL columnsAreLeftToRight;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } computedEditingCellContentFrame;
@property (nonatomic, retain) TSWPLayout *containedTextEditingLayout;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } editingSpillingTextRange;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) BOOL layoutDirectionIsLeftToRight;
@property (nonatomic, retain) TSTLayoutHint *layoutHint;
@property (nonatomic, readonly) TSWPPadding *layoutMargins;
@property (nonatomic, retain) TSTMasterLayout *masterLayout;
@property (nonatomic) BOOL newCanvasRevealedHorizontally;
@property (nonatomic) BOOL newCanvasRevealedVertically;
@property (nonatomic, readonly) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } paddingForEditingCell;
@property (nonatomic, readonly) unsigned int pageCount;
@property (nonatomic, readonly) unsigned int pageNumber;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; } prevEditingSpillingTextRange;
@property (nonatomic) BOOL processChangesFiltering;
@property (nonatomic) struct CGSize { float x1; float x2; } scaleToFit;
@property (nonatomic, readonly) BOOL shrinkTextToFit;
@property (nonatomic, retain) TSTLayoutSpaceBundle *spaceBundle;
@property (readonly) Class superclass;
@property (nonatomic, readonly) TSTTableInfo *tableInfo;
@property (nonatomic, readonly) TSTTableModel *tableModel;
@property (nonatomic, readonly) float textScaleFactor;

- (struct CGPoint { float x1; float x2; })activityLineUnscaledEndPointForSearchReference:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })adjustRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forScrollingToSelectionPath:(id)arg2;
- (struct CGSize { float x1; float x2; })adjustedInsetsForTarget:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })alignmentFrame;
- (BOOL)alwaysStartsNewTarget;
- (unsigned int)autosizeFlagsForTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })autosizedFrameForTextLayout:(id)arg1 textSize:(struct CGSize { float x1; float x2; })arg2;
- (void)bezierPathsForCellRegion:(id)arg1 selectionMask:(unsigned int)arg2 transform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg3 viewScale:(float)arg4 inset:(float)arg5 clipToVisibleRect:(BOOL)arg6 block:(id /* block */)arg7;
- (struct CGPoint { float x1; float x2; })calculatePointFromSearchReference:(id)arg1;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (BOOL)canRotateChildLayout:(id)arg1;
- (BOOL)canvasShouldScrollForSelectionPath:(id)arg1;
- (struct CGPoint { float x1; float x2; })capturedInfoPositionForAttachment;
- (id)cellIterator;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 flags:(unsigned int)arg2;
- (id)childSearchTargets;
- (id)children;
- (unsigned int)columnCount;
- (BOOL)columnsAreLeftToRight;
- (id)computeLayoutGeometry;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })computedEditingCellContentFrame;
- (id)containedTextEditingLayout;
- (void)dealloc;
- (id)dependentLayouts;
- (id)dependentsOfTextLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })editingSpillingTextRange;
- (float)gapForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (BOOL)inFindReplaceMode;
- (BOOL)inPrintPreviewMode;
- (struct CGPoint { float x1; float x2; })infoGeometryPositionForCurrentAttachedLayoutGeometry;
- (id)initWithInfo:(id)arg1;
- (id)initWithInfo:(id)arg1 layoutHint:(id)arg2;
- (id)initialInfoGeometry;
- (struct CGSize { float x1; float x2; })initialTextSize;
- (void)invalidate;
- (void)invalidateForAutosizingTextLayout:(id)arg1;
- (void)invalidatePosition;
- (void)invalidateSize;
- (void)invalidateTableNameVisibility;
- (BOOL)isBeingManipulated;
- (BOOL)isDraggable;
- (BOOL)isStrokeEditing;
- (BOOL)isZoomedEditing;
- (void)iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 withFlags:(unsigned int)arg2 usingBlock:(id /* block */)arg3;
- (void)iterateCellsUsingBlock:(id /* block */)arg1;
- (BOOL)layoutDirectionIsLeftToRight;
- (id)layoutGeometryFromInfo;
- (id)layoutHint;
- (id)layoutMargins;
- (void)layoutSearchForAnnotationWithHitBlock:(id /* block */)arg1;
- (void)layoutSearchForSpellingErrorsWithHitBlock:(id /* block */)arg1 stop:(BOOL*)arg2;
- (void)layoutSearchForString:(id)arg1 options:(unsigned int)arg2 hitBlock:(id /* block */)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })maskRectForTextLayout:(id)arg1;
- (id)masterLayout;
- (float)maxAutoGrowWidthForTextLayout:(id)arg1;
- (struct CGSize { float x1; float x2; })maximumFrameSizeForChild:(id)arg1;
- (int)naturalAlignmentForCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (int)naturalAlignmentForTextLayout:(id)arg1;
- (BOOL)newCanvasRevealedHorizontally;
- (BOOL)newCanvasRevealedVertically;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })nonAutosizedFrameForTextLayout:(id)arg1;
- (void)offsetGeometryBy:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)orderedBefore:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_autosizedFrameForRichTextLayout:(id)arg1 textSize:(struct CGSize { float x1; float x2; })arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_autosizedFrameForTextEditingLayout:(id)arg1 textSize:(struct CGSize { float x1; float x2; })arg2;
- (struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })p_cellIDForWPLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_computeSpillingTextFrameForEditingLayout:(id)arg1 textSize:(struct CGSize { float x1; float x2; })arg2 editingSpillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; }*)arg3;
- (int)p_defaultAlignmentForTableWritingDirection;
- (BOOL)p_getLayoutDirectionLeftToRight;
- (BOOL)p_layoutWhollyContainsGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_maskRectForRichTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_maskRectForTextEditingLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })p_maximumSpillRangeForCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_nonAutosizedFrameForRichTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_nonAutosizedFrameForTextEditingLayout:(id)arg1;
- (void)p_prepareAttachmentCells;
- (struct CGSize { float x1; float x2; })p_rangeUpAndLeftOfIntersectionRangeOfGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })p_spillRangeForMaskingRichTextLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })p_spillRangeToRightForCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_textFrameForWrappingCell:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 defaultRowHeight:(BOOL*)arg2;
- (void)p_updateCachedStyleInformationFromCellID:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })paddingForEditingCell;
- (unsigned int)pageCount;
- (unsigned int)pageNumber;
- (float)positionForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2 target:(id)arg3 outWidth:(float*)arg4 outGap:(float*)arg5;
- (struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })prevEditingSpillingTextRange;
- (BOOL)processChangesFiltering;
- (int)reapCoordinatesChangedMaskForChrome;
- (void)removeAttachmentCellLayouts;
- (void)removeContainedTextEditingLayout;
- (Class)repClassForTextLayout:(id)arg1;
- (BOOL)resizeMayChangeAspectRatio;
- (struct CGSize { float x1; float x2; })scaleToFit;
- (void)setContainedTextEditingLayout:(id)arg1;
- (void)setLayoutHint:(id)arg1;
- (void)setMasterLayout:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setNewCanvasRevealedHorizontally:(BOOL)arg1;
- (void)setNewCanvasRevealedVertically:(BOOL)arg1;
- (void)setPrevEditingSpillingTextRange:(struct TSUCellRect { struct TSUCellCoord { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)setProcessChangesFiltering:(BOOL)arg1;
- (void)setScaleToFit:(struct CGSize { float x1; float x2; })arg1;
- (void)setSpaceBundle:(id)arg1;
- (void)setupContainedTextEditingLayout:(struct TSUCellCoord { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)shrinkTextToFit;
- (id)spaceBundle;
- (BOOL)supportsRotation;
- (id)tableInfo;
- (id)tableModel;
- (BOOL)textIsVertical;
- (id)textWrapper;
- (void)updateChildrenFromInfo;
- (void)validate;
- (void)validateTableNameVisibility;
- (int)verticalAlignmentForTextLayout:(id)arg1;
- (float)viewScaleForZoomingToSelectionPath:(id)arg1 targetPointSize:(float)arg2;
- (float)widthForColumnIndex:(unsigned int)arg1 bodyWidth:(float)arg2;
- (int)wrapFitType;

@end
