/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSPPackage : NSObject {
    NSObject<OS_dispatch_queue> *_accessQueue;
    SFUCryptoKey *_decryptionKey;
    TSPDocumentProperties *_documentProperties;
    <TSPFileCoordinatorDelegate> *_fileCoordinatorDelegate;
    unsigned long long _fileFormatVersion;
    struct { 
        unsigned int isLazyLoadingDocumentProperties : 1; 
        unsigned int isLazyLoadingZip : 1; 
    } _flags;
    BOOL _isClosed;
    NSError *_lastReloadError;
    NSHashTable *_packageDatas;
    unsigned char _packageIdentifier;
    TSUZipFileArchive *_zipArchive;
}

@property (readonly) TSUZipFileArchive *componentZipArchive;
@property (nonatomic, readonly) SFUCryptoKey *decryptionKey;
@property (nonatomic, readonly) TSPDocumentProperties *documentProperties;
@property (nonatomic, readonly) <TSPFileCoordinatorDelegate> *fileCoordinatorDelegate;
@property (nonatomic, readonly) unsigned long long fileFormatVersion;
@property (nonatomic, readonly) BOOL isClosed;
@property (nonatomic, readonly) BOOL isPasswordProtected;
@property (readonly) NSError *lastReloadError;
@property (nonatomic, readonly) unsigned char packageIdentifier;
@property (nonatomic, readonly) int packageType;
@property (nonatomic, readonly) NSString *passwordHint;
@property (nonatomic, readonly) NSData *passwordVerifier;
@property (retain) TSUZipFileArchive *zipArchive;

+ (id)dataEntryPathForFilename:(id)arg1;
+ (BOOL)hasZipArchive;
+ (BOOL)isValidPackageAtURL:(id)arg1;
+ (id)newLazyPackageWithURL:(id)arg1 packageIdentifier:(unsigned char)arg2 decryptionKey:(id)arg3 fileCoordinatorDelegate:(id)arg4;
+ (id)newPackageWithURL:(id)arg1 packageIdentifier:(unsigned char)arg2 decryptionKey:(id)arg3 fileCoordinatorDelegate:(id)arg4 error:(id*)arg5;
+ (id)objectArchiveEntryPathForPackageLocator:(id)arg1;
+ (unsigned int)zipArchiveOptions;
+ (id)zipArchiveURLFromPackageURL:(id)arg1;

- (void).cxx_destruct;
- (BOOL)checkPassword:(id)arg1;
- (id)componentZipArchive;
- (BOOL)containsData:(id)arg1;
- (void)copyComponent:(id)arg1 toPackageURL:(id)arg2 packageLocator:(id)arg3 zipFileWriter:(id)arg4 encryptionKey:(id)arg5 completion:(id /* block */)arg6;
- (id)dataAtRelativePath:(id)arg1 allowDecryption:(BOOL)arg2 error:(id*)arg3;
- (id)decryptionKey;
- (void)didCloseDocument;
- (void)didReadFileFormatVersion:(unsigned long long)arg1;
- (void)didReferenceData:(id)arg1;
- (BOOL)didReloadZipArchive:(id)arg1 error:(id*)arg2;
- (void)didRetrieveDecryptionKey:(id)arg1;
- (id)documentProperties;
- (unsigned long long)encodedLengthForComponentLocator:(id)arg1 isStoredOutsideObjectArchive:(BOOL)arg2;
- (void)enumerateDatasUsingBlock:(id /* block */)arg1;
- (id)fileCoordinatorDelegate;
- (unsigned long long)fileFormatVersion;
- (BOOL)hasDataAtRelativePath:(id)arg1;
- (id)init;
- (id)initWithPackageIdentifier:(unsigned char)arg1 documentProperties:(id)arg2 fileFormatVersion:(unsigned long long)arg3 decryptionKey:(id)arg4 fileCoordinatorDelegate:(id)arg5 isLazyLoading:(BOOL)arg6;
- (id)initWithURL:(id)arg1 zipArchiveOrNil:(id)arg2 packageIdentifier:(unsigned char)arg3 documentProperties:(id)arg4 decryptionKey:(id)arg5 fileCoordinatorDelegate:(id)arg6 error:(id*)arg7;
- (BOOL)isClosed;
- (BOOL)isPasswordProtected;
- (id)keyFromPassword:(id)arg1;
- (id)keyFromPassword:(id)arg1 passwordVerifier:(id)arg2;
- (id)lastReloadError;
- (id)newDataStorageAtRelativePath:(id)arg1 decryptionInfo:(id)arg2;
- (id)newDocumentPropertiesWithURL:(id)arg1 zipProvider:(id /* block */)arg2 error:(id*)arg3;
- (id)newRawDataReadChannelAtRelativePath:(id)arg1;
- (id)newRawReadChannelForComponentLocator:(id)arg1 isStoredOutsideObjectArchive:(BOOL)arg2;
- (id)newReadChannelForComponentLocator:(id)arg1 isStoredOutsideObjectArchive:(BOOL)arg2;
- (id)newZipArchiveFromPackageURL:(id)arg1 isLazyLoading:(BOOL)arg2 error:(id*)arg3;
- (unsigned char)packageIdentifier;
- (int)packageType;
- (id)passwordHint;
- (id)passwordVerifier;
- (void)peformSynchronousAccessToZipArchive:(id /* block */)arg1;
- (void)prepareForDocumentReplacementWithSuccess:(BOOL)arg1 forSafeSave:(BOOL)arg2 originalURL:(id)arg3;
- (BOOL)reloadZipArchiveIfNeededWithURLImpl:(id)arg1 isLazyLoading:(BOOL)arg2 error:(id*)arg3;
- (void)setZipArchive:(id)arg1;
- (id)zipArchive;

@end
