/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDImageRep : TSDMediaRep <TSDMagicMoveMatching> {
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mBaseMaskLayoutTransform;
    CALayer *mContentsLayer;
    BOOL mDirectlyManagesLayerContent;
    BOOL mFrameInUnscaledCanvasIsValid;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } mFrameInUnscaledCanvasRelativeToSuper;
    NSCache *mHitTestCache;
    long mHitTestCacheOnce;
    CAShapeLayer *mIAMaskLayer;
    BOOL mInInstantAlphaMode;
    struct CGImage { } *mInstantAlphaImage;
    TSDInstantAlphaTracker *mInstantAlphaTracker;
    TSDLayoutGeometry *mLastImageGeometryInRoot;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mLastLayoutToImageTransform;
    TSDLayoutGeometry *mLastMaskGeometryInRoot;
    struct CGAffineTransform { 
        float a; 
        float b; 
        float c; 
        float d; 
        float tx; 
        float ty; 
    } mLastPictureFrameLayerTransform;
    NSRecursiveLock *mLayerUpdateAndSizingStateLock;
    CAShapeLayer *mMaskPathLayer;
    CAShapeLayer *mMaskSublayer;
    BOOL mShowImageHighlight;
    struct CGImage { } *mSizedImage;
    NSObject<OS_dispatch_queue> *mSizedImageAccessQueue;
    BOOL mSizedImageHasAdjustmentsBakedIn;
    BOOL mSizedImageHasMaskBakedIn;
    struct CGPath { } *mSizedImageMaskPath;
    int mSizedImageOrientation;
    struct CGSize { 
        float width; 
        float height; 
    } mSizedImageSize;
    TSDImageRepSizingState *mSizingState;
    BOOL mSizingStateReady;
    NSMutableArray *mUpdateFromLayoutBlocks;
    NSObject<OS_dispatch_semaphore> *mUpdateFromLayoutBlocksLock;
}

+ (float)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;
+ (struct CGPath { }*)p_newPathToBakeIntoSizedImageForSize:(struct CGSize { float x1; float x2; })arg1 withImageLayout:(id)arg2 orientation:(int)arg3;

- (BOOL)canDrawInParallel;
- (BOOL)canDrawShadowInOneStepWithChildren:(BOOL)arg1;
- (void)dealloc;
- (id)downloadProgressPlaceholderImage;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(BOOL)arg4 forAlphaOnly:(BOOL)arg5 drawChildren:(BOOL)arg6;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameInUnscaledCanvas;
- (id)imageInfo;
- (id)imageLayout;
- (id)imageOfStroke:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (BOOL)isDataCurrentlyDownloading;
- (id)maskInfo;
- (id)maskLayout;
- (void)p_drawInContext:(struct CGContext { }*)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(float)arg4 withMask:(BOOL)arg5 withIAMask:(BOOL)arg6 forLayer:(BOOL)arg7 forShadow:(BOOL)arg8 forHitTest:(BOOL)arg9;
- (BOOL)p_drawsInOneStep;
- (id)p_imageData;
- (id)p_imageProvider;
- (BOOL)p_shouldUseSourceImageForContext:(id)arg1 clipBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 transform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg3 image:(struct CGImage { }*)arg4;
- (id)p_validatedBitmapImageProvider;
- (id)p_validatedImageProvider;
- (id)p_validatedThumbnailImageProvider;
- (void)setTextureAttributes:(id)arg1;
- (BOOL)shouldShowCheckerboard;
- (id)textureForContext:(id)arg1;
- (void)willBeRemoved;

@end
