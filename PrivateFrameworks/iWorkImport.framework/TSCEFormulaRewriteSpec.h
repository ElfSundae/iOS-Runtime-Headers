/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCEFormulaRewriteSpec : NSObject {
    struct __CFUUID { } *_conditionalStyleOwnerID;
    /* Warning: unhandled union encoding: '(?="mTransposedInfo"@"TSCETableTransposedInfo""mRowColumnInfo"@"TSCEFormulaRewriteInfo_RowColumnInfo""mRegionMovedInfo"@"TSCEFormulaRewrite_RegionMovedInfo""mMergeInfo"@"TSCEFormulaRewrite_RegionMergedInfo""mTableIDInfo"@"TSCERewriteTableIDInfo")' */ union { 
        TSCETableTransposedInfo *mTransposedInfo; 
        TSCEFormulaRewriteInfo_RowColumnInfo *mRowColumnInfo; 
        TSCEFormulaRewrite_RegionMovedInfo *mRegionMovedInfo; 
        TSCEFormulaRewrite_RegionMergedInfo *mMergeInfo; 
        id mTableIDInfo; 
    } _info;
    BOOL _isInverse;
    struct __CFUUID { } *_tableID;
    int _type;
}

@property (nonatomic, readonly) struct __CFUUID { }*conditionalStyleOwnerID;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } conditionalStyleOwnerUID;
@property (nonatomic) BOOL isInverse;
@property (nonatomic, readonly) int rewriteType;
@property (nonatomic, readonly) struct __CFUUID { }*tableID;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } tableUID;

- (struct __CFUUID { }*)affectedConditionalStyleOwnerID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })affectedConditionalStyleOwnerUID;
- (struct __CFUUID { }*)affectedOwnerID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })affectedOwnerUID;
- (struct unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct __hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct unique_ptr<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> > > { struct __hash_node<TSU::UUIDData<TSP::UUIDData>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> { struct __hash_node<TSU::UUIDData<TSP::UUIDData>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::hash<TSUUUID> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > > { float x_4_2_1; } x_1_1_4; } x1; })affectedOwnerUIDs;
- (struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })affectedRange;
- (void)clearTableIndexes;
- (struct __CFUUID { }*)conditionalStyleOwnerID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })conditionalStyleOwnerUID;
- (void)dealloc;
- (id)description;
- (void)didModifySrcTable:(id)arg1 dstTable:(id)arg2;
- (void)didModifyTable:(id)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })expandedRowColumnUuids;
- (id)initForInsertingRowsOrColumnsIntoTable:(struct __CFUUID { }*)arg1 rowColumnUuids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 areRows:(BOOL)arg3;
- (id)initForMergeCellsWithTableID:(struct __CFUUID { }*)arg1 columnUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 rowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg3;
- (id)initForMovingRegionWithSrcTableID:(struct __CFUUID { }*)arg1 srcColumnUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 srcRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg3 dstTableID:(struct __CFUUID { }*)arg4 dstColumnUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg5 dstRowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg6;
- (id)initForMovingRowsOrColumnsInTable:(struct __CFUUID { }*)arg1 rowColumnUuids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 areRows:(BOOL)arg3;
- (id)initForRemoveRowsOrColumnsFromTable:(struct __CFUUID { }*)arg1 rowColumnUuids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 areRows:(BOOL)arg3;
- (id)initForSortWithTableID:(struct __CFUUID { }*)arg1 rowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2;
- (id)initForTableIDReassignment:(const struct TSUUuidMap { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1;
- (id)initForUndoMergeCellsWithTableID:(struct __CFUUID { }*)arg1 columnUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 rowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg3;
- (id)initFromMessage:(const struct FormulaRewriteSpecArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct CFUUIDArchive {} *x5; struct CFUUIDArchive {} *x6; struct TableResizedInfoArchive {} *x7; struct TableTransposeInfoArchive {} *x8; int x9; bool x10; struct ColumnOrRowUuidsInfoArchive {} *x11; struct RegionMovedInfoArchive {} *x12; struct RegionInfoArchive {} *x13; struct RewriteTableIDInfoArchive {} *x14; }*)arg1;
- (id)initWithOwnerDeletion:(struct __CFUUID { }*)arg1;
- (id)initWithOwnerInsertion:(struct __CFUUID { }*)arg1;
- (id)initWithTransposeTable:(struct __CFUUID { }*)arg1 withNumberOfFooterRows:(unsigned short)arg2;
- (BOOL)isInverse;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })previousCellCoordinateForTableID:(struct __CFUUID { }*)arg1 updatedCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })previousCellCoordinateForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1 updatedCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })previousMergeAnchorForMergeRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 inTableID:(struct __CFUUID { }*)arg2 isUndo:(BOOL)arg3;
- (struct __CFUUID { }*)previousTableIDForUpdatedTableID:(struct __CFUUID { }*)arg1 updatedCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)reloadMergeIndexesForTable:(id)arg1;
- (union { id x1; id x2; id x3; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x4; void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; unsigned short x107; void*x108; void*x109; void*x110; const out void*x111; void*x112; const void*x113; void*x114; void*x115; out double x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; long doublex167; void*x168; void*x169; void*x170; void*x171; void*x172; const void*x173; unsigned char x174; void*x175; in void x176; void*x177; short x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; long long x189; long long x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; int x200; void*x201; in void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; unsigned int x235/* : ? */; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; const void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void* x349[ /* ? */ ]; void*x350; void*x351; void*x352; out void*x353; short x354; void*x355; out void*x356; inout void*x357; void*x358; void*x359; out const void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; id x371; void*x372; void* x373[ /* ? */ ]; void*x374; void*x375; void*x376; void*x377; long x378; void*x379; void*x380; void*x381; void*x382; long long x383; void*x384; void*x385; short x386; void*x387; void*x388; void*x389; short x390; short x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; id x399; void*x400; void* x401[ /* ? */ ]; void*x402; void*x403; unsigned int x404; void*x405; int x406; in double x407; out void*x408; void*x409; out void*x410; void*x411; void*x412; int x413; out in in int x414; void*x415; void*x416; void*x417; int x418; out in unsigned char x419; out in void*x420; const out long x421; long x422; void*x423; const void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; id x430; void*x431; unsigned int x432/* : ? */; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; oneway int x440; void*x441; void*x442; unsigned int x443; in void*x444; void*x445; const in void*x446; long x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; id x457; float x458; unsigned int x459/* : ? */; void*x460; void*x461; long doublex462; void*x463; void*x464; BOOL x465; void*x466; void*x467; long doublex468; void*x469; float x470; int x471; in int x472; void*x473; int x474; out in void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; id x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; unsigned int x491/* : ? */; inout void*x492; void x493; int x494; void*x495; void*x496; void*x497; int x498; out in long doublex499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; id x512; long doublex513; unsigned int x514/* : ? */; void*x515; void*x516; void*x517; long doublex518; long doublex519; void*x520; bool x521; void*x522; BOOL x523; void*x524; long x525; int x526; void*x527; void*x528; void*x529; void*x530; void x531; void*x532; in void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; id x542; void*x543; long long x544; void*x545; void*x546; void*x547; unsigned short x548; void*x549; void*x550; void*x551; short x552; void*x553; void*x554; unsigned int x555/* : ? */; out void*x556; const double x557; void*x558; const int x559; void*x560; void*x561; short x562; short x563; int x564; short x565; void*x566; void*x567; in void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; id x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; BOOL x591; void*x592; int x593; out in bool x594; int x595; in double x596; int x597; in void*x598; void*x599; out BOOL x600; void*x601; short x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; void*x621; void*x622; void*x623; void*x624; id x625; void*x626; BOOL x627; void*x628; void*x629; void*x630; void*x631; unsigned int x632; unsigned short x633; BOOL x634; const void*x635; void*x636; in void*x637; out void*x638; void*x639; void*x640; void*x641; int x642; BOOL x643; void*x644; void*x645; const oneway int x646; void*x647; void*x648; unsigned char x649; out in void*x650; const out long x651; long x652; void*x653; const void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; id x662; void*x663; void*x664; void*x665; void*x666; void*x667; long doublex668; void*x669; in void*x670; void*x671; int x672; void*x673; void*x674; unsigned char x675; long x676; int x677; void*x678; in void*x679; unsigned short x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; id x690; void*x691; void**x692; void*x693; void*x694; void*x695; void*x696; void*x697; out const void*x698; out void*x699; void*x700; void*x701; int x702; long x703; void*x704; void*x705; const void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; id x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; short x723; int x724; BOOL x725; void*x726; const out double x727; void*x728; BOOL x729; void*x730; void*x731; void*x732; void*x733; void*x734; double x735; void*x736; void*x737; void*x738; void*x739; void*x740; unsigned int x741/* : ? */; long x742; void*x743; oneway int x744; void*x745; void*x746; unsigned char x747; void*x748; long x749; long x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; id x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; in double x769; out void*x770; unsigned short x771; out void*x772; const BOOL x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; void*x786; id x787; void*x788; long long x789; void*x790; void*x791; void*x792; void*x793; unsigned int x794/* : ? */; int x795; long long x796; void*x797; int x798; void*x799; void*x800; unsigned char x801; out in void*x802; void*x803; int x804; in void*x805; const unsigned int x806; double x807; void*x808; in void*x809; int x810; float x811; int x812; void*x813; const void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; unsigned int x826/* : ? */; long long x827; void*x828; void*x829; void*x830; void*x831; void*x832; unsigned char x833; bool x834; void*x835; void*x836; unsigned int x837; char *x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; void*x851; void*x852; int x853; void*x854; char *x855; void*x856; void*x857; void**x858; void*x859; void*x860; void*x861; void*x862; unsigned int x863; void*x864; void*x865; })rewriteInfo;
- (int)rewriteType;
- (void)saveToMessage:(struct FormulaRewriteSpecArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct CFUUIDArchive {} *x5; struct CFUUIDArchive {} *x6; struct TableResizedInfoArchive {} *x7; struct TableTransposeInfoArchive {} *x8; int x9; bool x10; struct ColumnOrRowUuidsInfoArchive {} *x11; struct RegionMovedInfoArchive {} *x12; struct RegionInfoArchive {} *x13; struct RewriteTableIDInfoArchive {} *x14; }*)arg1 archiver:(id)arg2;
- (void)setIsInverse:(BOOL)arg1;
- (struct __CFUUID { }*)tableID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })tableUID;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })updatedCellCoordinateForTableID:(struct __CFUUID { }*)arg1 originalCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })updatedCellCoordinateForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1 originalCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct __CFUUID { }*)updatedTableIDForOriginalTableID:(struct __CFUUID { }*)arg1 originalCellCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)willModifySrcTable:(id)arg1 dstTable:(id)arg2;
- (void)willModifyTable:(id)arg1;

@end
