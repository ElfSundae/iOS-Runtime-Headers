/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDStroke : NSObject <NSCopying, NSMutableCopying, TSDMixing, TSDPathPainter, TSSPropertyCommandSerializing> {
    float  mActualWidth;
    int  mCap;
    TSUColor * mColor;
    int  mJoin;
    float  mMiterLimit;
    TSDStrokePattern * mPattern;
    float  mWidth;
}

@property (nonatomic, readonly) float actualWidth;
@property (nonatomic, readonly) int cap;
@property (nonatomic, readonly, copy) TSUColor *color;
@property (nonatomic, readonly) float dashSpacing;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) BOOL dontClearBackground;
@property (nonatomic, readonly) BOOL drawsOutsideStrokeBounds;
@property (nonatomic, readonly) BOOL empty;
@property (readonly) unsigned int hash;
@property (nonatomic) float i_actualWidth;
@property (setter=i_setCap:, nonatomic) int i_cap;
@property (nonatomic, copy) TSUColor *i_color;
@property (nonatomic) int i_join;
@property (nonatomic) float i_miterLimit;
@property (setter=i_setPattern:, nonatomic, copy) TSDStrokePattern *i_pattern;
@property (nonatomic, readonly) float i_verticalOffsetForSwatch;
@property (nonatomic) float i_width;
@property (nonatomic, readonly) BOOL isDash;
@property (nonatomic, readonly) BOOL isFrame;
@property (nonatomic, readonly) BOOL isNearlyWhite;
@property (nonatomic, readonly) BOOL isNullStroke;
@property (nonatomic, readonly) BOOL isRoundDash;
@property (nonatomic, readonly) int join;
@property (nonatomic, readonly) float miterLimit;
@property (nonatomic, readonly) struct _TSDStrokeOutsets { float x1; float x2; float x3; float x4; } outsets;
@property (nonatomic, readonly, copy) TSDStrokePattern *pattern;
@property (nonatomic, readonly) float renderedWidth;
@property (nonatomic, readonly) BOOL shouldRender;
@property (nonatomic, readonly) BOOL solid;
@property (nonatomic, readonly) float suggestedMinimumLineWidth;
@property (readonly) Class superclass;
@property (nonatomic, readonly) BOOL supportsColor;
@property (nonatomic, readonly) BOOL supportsLineOptions;
@property (nonatomic, readonly) BOOL supportsPattern;
@property (nonatomic, readonly) BOOL supportsWidth;
@property (nonatomic, readonly) float width;

+ (BOOL)canMixWithNilObjects;
+ (id)editedStrokeFromModelStroke:(id)arg1 selectedStroke:(id)arg2;
+ (id)emptyStroke;
+ (id)emptyStrokeWithWidth:(float)arg1;
+ (id)i_newEmptyStroke;
+ (id)i_newStroke;
+ (int)indexOfStroke:(id)arg1 strokeArray:(id)arg2;
+ (id)instanceWithArchive:(const struct StrokeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct Color {} *x5; float x6; int x7; int x8; float x9; struct StrokePatternArchive {} *x10; struct SmartStrokeArchive {} *x11; struct FrameArchive {} *x12; struct PatternedStrokeArchive {} *x13; }*)arg1 unarchiver:(id)arg2;
+ (id)mergeRangeEmptyStroke;
+ (Class)mutableClass;
+ (id)portalStroke;
+ (id)stroke;
+ (id)strokeWithColor:(id)arg1 width:(float)arg2;
+ (id)strokeWithColor:(id)arg1 width:(float)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5;
+ (id)zeroWidthEmptyStroke;

- (void)aaDefeatedPaintLineEnd:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 atAngle:(float)arg3 withScale:(float)arg4 inContext:(struct CGContext { }*)arg5;
- (float)actualWidth;
- (void)applyInteriorWrapPropertiesToContext:(struct CGContext { }*)arg1 insideStroke:(BOOL)arg2;
- (void)applyToCAShapeLayer:(id)arg1 insideStroke:(BOOL)arg2 withScale:(float)arg3;
- (void)applyToCAShapeLayer:(id)arg1 withScale:(float)arg2;
- (void)applyToContext:(struct CGContext { }*)arg1;
- (void)applyToContext:(struct CGContext { }*)arg1 insideStroke:(BOOL)arg2;
- (void)applyToRepCALayer:(id)arg1 withScale:(float)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsForLineEnd:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 atAngle:(float)arg3 withScale:(float)arg4 transform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg5;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundsForPath:(id)arg1;
- (BOOL)canApplyDirectlyToRepCALayer;
- (BOOL)canApplyToCAShapeLayer;
- (int)cap;
- (id)color;
- (id)colorForCGContext:(struct CGContext { }*)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (float)dashSpacing;
- (void)dealloc;
- (id)description;
- (BOOL)dontClearBackground;
- (void)drawSwatchInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (BOOL)drawsInOneStep;
- (BOOL)drawsOutsideStrokeBounds;
- (BOOL)empty;
- (unsigned int)hash;
- (float)horizontalMarginForSwatch;
- (float)i_actualWidth;
- (int)i_cap;
- (id)i_color;
- (int)i_join;
- (float)i_miterLimit;
- (id)i_pattern;
- (void)i_setCap:(int)arg1;
- (void)i_setPattern:(id)arg1;
- (void)i_setPatternPropertiesFromStroke:(id)arg1;
- (void)i_setPropertiesFromStroke:(id)arg1;
- (float)i_verticalOffsetForSwatch;
- (float)i_width;
- (id)init;
- (id)initFromPropertyCommandMessage:(const struct Message { int (**x1)(); }*)arg1 unarchiver:(id)arg2;
- (id)initWithArchive:(const struct StrokeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct Color {} *x5; float x6; int x7; int x8; float x9; struct StrokePatternArchive {} *x10; struct SmartStrokeArchive {} *x11; struct FrameArchive {} *x12; struct PatternedStrokeArchive {} *x13; }*)arg1 unarchiver:(id)arg2;
- (id)initWithColor:(id)arg1 width:(float)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5;
- (id)initWithColor:(id)arg1 width:(float)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5 miterLimit:(float)arg6;
- (BOOL)isDash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToStroke:(id)arg1;
- (BOOL)isFrame;
- (BOOL)isNearlyWhite;
- (BOOL)isNullStroke;
- (BOOL)isPortalStroke;
- (BOOL)isRoundDash;
- (int)join;
- (float)lineEndInsetAdjustment;
- (float)miterLimit;
- (id)mixedObjectWithFraction:(float)arg1 ofObject:(id)arg2;
- (int)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (BOOL)needsToExtendJoinsForBoundsCalculation;
- (struct _TSDStrokeOutsets { float x1; float x2; float x3; float x4; })outsets;
- (void)paintLineEnd:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 atAngle:(float)arg3 withScale:(float)arg4 inContext:(struct CGContext { }*)arg5;
- (void)paintLineEnd:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 atAngle:(float)arg3 withScale:(float)arg4 inContext:(struct CGContext { }*)arg5 useFastDrawing:(BOOL)arg6;
- (void)paintPath:(struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2;
- (void)paintPath:(struct CGPath { }*)arg1 wantsInteriorStroke:(BOOL)arg2 inContext:(struct CGContext { }*)arg3;
- (void)paintPath:(struct CGPath { }*)arg1 wantsInteriorStroke:(BOOL)arg2 inContext:(struct CGContext { }*)arg3 useFastDrawing:(BOOL)arg4 parameterized:(BOOL)arg5 drawWithOpenGL:(BOOL)arg6 shouldReverseDrawOrder:(BOOL)arg7;
- (void)paintPathWithNormalClip:(struct CGPath { }*)arg1 wantsInteriorStroke:(BOOL)arg2 inContext:(struct CGContext { }*)arg3;
- (void)paintRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (void)paintRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 wantsInteriorStroke:(BOOL)arg2 inContext:(struct CGContext { }*)arg3;
- (id)pathForLineEnd:(id)arg1 wrapPath:(BOOL)arg2 atPoint:(struct CGPoint { float x1; float x2; })arg3 atAngle:(float)arg4 withScale:(float)arg5;
- (struct CGPath { }*)pathToStrokeFromCGPath:(struct CGPath { }*)arg1;
- (id)pathToStrokeFromTSUBezierPath:(id)arg1;
- (id)pattern;
- (BOOL)prefersToApplyToCAShapeLayerDuringManipulation;
- (float)renderedWidth;
- (void)saveToArchive:(struct StrokeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct Color {} *x5; float x6; int x7; int x8; float x9; struct StrokePatternArchive {} *x10; struct SmartStrokeArchive {} *x11; struct FrameArchive {} *x12; struct PatternedStrokeArchive {} *x13; }*)arg1 archiver:(id)arg2;
- (void)saveToPropertyCommandMessage:(struct Message { int (**x1)(); }*)arg1 archiver:(id)arg2;
- (void)setI_actualWidth:(float)arg1;
- (void)setI_color:(id)arg1;
- (void)setI_join:(int)arg1;
- (void)setI_miterLimit:(float)arg1;
- (void)setI_width:(float)arg1;
- (BOOL)shouldAntialiasDefeat;
- (BOOL)shouldRender;
- (BOOL)solid;
- (id)strokeByTransformingByTransform:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (id)strokeLineEnd:(id)arg1;
- (float)suggestedMinimumLineWidth;
- (BOOL)supportsColor;
- (BOOL)supportsLineOptions;
- (BOOL)supportsPattern;
- (BOOL)supportsWidth;
- (BOOL)usesOpenGL;
- (float)width;

@end
