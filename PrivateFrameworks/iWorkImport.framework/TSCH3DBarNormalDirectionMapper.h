/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCH3DBarNormalDirectionMapper : TSCH3DNormalDirectionMapper {
    int mBeginLimit;
    int mCrossSectionCount;
    int mEndLimit;
    int mSpineCount;
    int mWallOffset;
}

- (id)initWithWallOffset:(int)arg1 crossSectionCount:(int)arg2 spineCount:(int)arg3 beginLimit:(int)arg4 endLimit:(int)arg5;
- (void)mapFromVertexArray:(const struct tvec3<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; union { float x_3_1_1; float x_3_1_2; float x_3_1_3; } x3; }*)arg1 normalArray:(const struct tvec3<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; union { float x_3_1_1; float x_3_1_2; float x_3_1_3; } x3; }*)arg2 normalMatrix:(const struct tmat3x3<float> { struct tvec3<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_1_1_2; union { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_1_1_3; } x1[3]; }*)arg3 numVertices:(int)arg4 destination:(struct vector<unsigned char, std::__1::allocator<unsigned char> > { char *x1; char *x2; struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { char *x_3_1_1; } x3; }*)arg5;

@end
