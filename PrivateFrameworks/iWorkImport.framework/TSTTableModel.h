/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTTableModel : TSPObject <TSDMixing, TSTCustomStrokeProviding, TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding> {
    TSCECalculationEngine *mCalcEngine;
    TSTCellDictionary *mCellsPendingWrite;
    TSCECellCoordinateVector *mCellsToInvalidateAfterRecalc;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } mCellsToInvalidateAfterRecalcLock;
    TSCECellCoordinateVector *mCellsToInvalidateNonoverflowingAfterRecalc;
    TSTColumnRowUIDMap *mColumnRowUIDMap;
    TSTConditionalStyleFormulaOwner *mConditionalStyleFormulaOwner;
    TSTTableDataStore *mDataStore;
    struct _TSTDefaultCellBlock { 
        TSTCell *defaultBodyCell; 
        TSTCell *defaultHeaderRowCell; 
        TSTCell *defaultHeaderColumnCell; 
        TSTCell *defaultFooterRowCell; 
    } mDefaultCells;
    float mDefaultColumnWidth;
    float mDefaultRowHeight;
    TSWPStorage *mDeprecatedProvider;
    TSTTableFilterSet *mFilterSet;
    TSCEOwnerFormulaMap *mFormulasForUndo;
    struct __CFUUID { } *mFromTableID;
    BOOL mHeaderColumnsFrozen;
    BOOL mHeaderRowsFrozen;
    TSTHiddenStateIndexSet *mHiddenColumns;
    TSTHiddenStateIndexSet *mHiddenRows;
    TSTHiddenStateFormulaOwner *mHiddenStateFormulaOwnerForColumns;
    TSTHiddenStateFormulaOwner *mHiddenStateFormulaOwnerForRows;
    TSTMergeOwner *mMergeOwner;
    unsigned short mNumberOfColumns;
    unsigned short mNumberOfFilteredRows;
    unsigned short mNumberOfFooterRows;
    unsigned short mNumberOfHeaderColumns;
    unsigned short mNumberOfHeaderRows;
    unsigned short mNumberOfHiddenColumns;
    unsigned short mNumberOfHiddenRows;
    unsigned short mNumberOfRows;
    unsigned short mNumberOfUserHiddenColumns;
    unsigned short mNumberOfUserHiddenRows;
    unsigned int mPresetIDForUpgrade;
    BOOL mRepeatingHeaderColumnsEnabled;
    BOOL mRepeatingHeaderRowsEnabled;
    TSTTableSortOrder *mSortOrder;
    TSTSortRuleReferenceTracker *mSortRuleReferenceTracker;
    TSTStrokeSidecar *mStrokeSidecar;
    BOOL mStyleApplyClearsAll;
    struct { 
        TSTTableStyle *tableStyle; 
        TSTCellStyle *bodyCellStyle; 
        TSTCellStyle *headerRowCellStyle; 
        TSTCellStyle *headerColumnCellStyle; 
        TSTCellStyle *footerRowCellStyle; 
        TSWPParagraphStyle *bodyTextStyle; 
        TSWPParagraphStyle *headerRowTextStyle; 
        TSWPParagraphStyle *headerColumnTextStyle; 
        TSWPParagraphStyle *footerRowTextStyle; 
        TSWPParagraphStyle *tableNameStyle; 
        TSWPShapeStyle *tableNameShapeStyle; 
    } mStyles;
    struct __CFUUID { } *mTableID;
    NSString *mTableName;
    BOOL mTableNameBorderEnabled;
    BOOL mTableNameEnabled;
    float mTableNameHeight;
    TSTTableStylePreset *mTableStylePreset;
    TSTHiddenStateIndexSet *mUserHiddenRows;
    TSTImportWarningSetByCoordinateMap *mWarningSetsForUndo;
    BOOL mWasCut;
    BOOL mWasUnarchivedFromAProvidedTable;
}

@property (nonatomic, readonly) TSDFill *backgroundFill;
@property (nonatomic, readonly) TSTCellStyle *bodyCellStyle;
@property (nonatomic, readonly) TSDStroke *bodyColumnStroke;
@property (nonatomic, readonly) TSDFill *bodyFill;
@property (nonatomic, readonly) TSDStroke *bodyRowStroke;
@property (nonatomic, readonly) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property (nonatomic, readonly) TSWPParagraphStyle *bodyTextStyle;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (nonatomic, readonly) TSTCellDictionary *cellsPendingWrite;
@property (nonatomic, readonly) TSCECellCoordinateVector *cellsToInvalidateAfterRecalc;
@property (nonatomic, readonly) TSCECellCoordinateVector *cellsToInvalidateNonoverflowingAfterRecalc;
@property (nonatomic, retain) TSTColumnRowUIDMap *columnRowUIDMap;
@property NSArray *columnWidths;
@property (nonatomic, retain) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) TSTCell *defaultBodyCell;
@property (nonatomic, readonly) TSTCell *defaultFooterRowCell;
@property (nonatomic, readonly) TSTCell *defaultHeaderColumnCell;
@property (nonatomic, readonly) TSTCell *defaultHeaderRowCell;
@property (nonatomic, readonly) TSDStroke *defaultHorizontalBorderStroke;
@property (nonatomic, readonly) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property (nonatomic, readonly) TSDStroke *defaultVerticalBorderStroke;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSKDocumentRoot *documentRoot;
@property (nonatomic, copy) TSTTableFilterSet *filterSet;
@property (nonatomic, readonly) TSDStroke *footerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *footerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *footerRowSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *footerRowTextStyle;
@property (nonatomic, readonly) TSDFill *footerRowsFill;
@property (nonatomic, retain) TSCEOwnerFormulaMap *formulasForUndo;
@property (nonatomic, readonly) struct __CFUUID { }*fromTableID;
@property (nonatomic, readonly) BOOL hasAlternatingRows;
@property (nonatomic, readonly) BOOL hasTableBorder;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *headerColumnCellStyle;
@property (nonatomic, readonly) TSDStroke *headerColumnSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *headerColumnTextStyle;
@property (nonatomic, readonly) TSDFill *headerColumnsFill;
@property (nonatomic) BOOL headerColumnsFrozen;
@property (nonatomic, readonly) TSDStroke *headerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBorderStroke;
@property (nonatomic, readonly) TSTCellStyle *headerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *headerRowSeparatorStroke;
@property (nonatomic, readonly) TSWPParagraphStyle *headerRowTextStyle;
@property (nonatomic, readonly) TSDFill *headerRowsFill;
@property (nonatomic) BOOL headerRowsFrozen;
@property (nonatomic, readonly) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForColumns;
@property (nonatomic, readonly) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForRows;
@property (nonatomic, readonly) TSTMergeOwner *mergeOwner;
@property (nonatomic) unsigned short numberOfColumns;
@property (nonatomic) unsigned short numberOfFooterRows;
@property (nonatomic) unsigned short numberOfHeaderColumns;
@property (nonatomic) unsigned short numberOfHeaderRows;
@property (nonatomic, readonly) unsigned short numberOfHiddenColumns;
@property (nonatomic, readonly) unsigned short numberOfHiddenRows;
@property (nonatomic) unsigned short numberOfRows;
@property (nonatomic, readonly) unsigned short numberOfUserHiddenColumns;
@property (nonatomic, readonly) unsigned short numberOfUserHiddenRows;
@property (nonatomic, readonly) unsigned short numberOfVisibleBodyColumns;
@property (nonatomic, readonly) unsigned short numberOfVisibleBodyRows;
@property (nonatomic) BOOL repeatingHeaderColumnsEnabled;
@property (nonatomic) BOOL repeatingHeaderRowsEnabled;
@property NSArray *rowHeights;
@property (nonatomic, copy) TSTTableSortOrder *sortOrder;
@property (nonatomic, readonly) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property (nonatomic, readonly, retain) TSTStrokeSidecar *strokeSidecar;
@property (nonatomic) BOOL styleApplyClearsAll;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct __CFUUID { }*tableID;
@property (nonatomic, retain) NSString *tableName;
@property (nonatomic) BOOL tableNameBorderEnabled;
@property (nonatomic, readonly) TSDStroke *tableNameBorderStroke;
@property (nonatomic) BOOL tableNameEnabled;
@property (nonatomic) float tableNameHeight;
@property (nonatomic, readonly) TSWPShapeStyle *tableNameShapeStyle;
@property (nonatomic, readonly) TSWPParagraphStyle *tableNameStyle;
@property (nonatomic, readonly) TSTTableStyle *tableStyle;
@property (nonatomic, retain) TSTTableStylePreset *tableStylePreset;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } tableUID;
@property (nonatomic, readonly) int tableWritingDirection;
@property (nonatomic, retain) TSTImportWarningSetByCoordinateMap *warningSetsForUndo;
@property (nonatomic) BOOL wasCut;
@property (nonatomic) BOOL wasUnarchivedFromAProvidedTable;

+ (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(unsigned int)arg1 givenTableSize:(struct { unsigned short x1; unsigned short x2; })arg2 numberOfHeaderRows:(unsigned short)arg3 numberOfFooterRows:(unsigned short)arg4 numberOfHeaderColumns:(unsigned short)arg5;
+ (void)chooseUniqueNameForTables:(id)arg1 inContainer:(id)arg2 forPaste:(BOOL)arg3;
+ (void)load;
+ (BOOL)needsObjectUUID;
+ (struct __CFDictionary { }*)newIDMapForPastedTablesInDrawables:(id)arg1 calculationEngine:(id)arg2;
+ (unsigned int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalRows:(unsigned short)arg5;

- (id)UIDSetForIndexes:(id)arg1 asRows:(BOOL)arg2;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })actualHeaderColumnRange;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCellsInRegion:(id)arg1;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)allMergeRanges;
- (id)allRichTextPayloadStorages;
- (BOOL)anyColumnsHiddenInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (BOOL)anyRowsHiddenInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (BOOL)anyRowsHiddenInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 forAction:(unsigned char)arg2;
- (id)backgroundFill;
- (void)bakeFormulas;
- (id)bandedFillObject;
- (id)bodyCellStyle;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyColumnRange;
- (id)bodyColumnStroke;
- (id)bodyFill;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRange;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bodyRowRange;
- (id)bodyRowStroke;
- (id)bodyRowStrokeEvenIfNotVisible;
- (id)bodyTextStyle;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })bottomCornerRange;
- (id)calcEngine;
- (BOOL)canTranspose;
- (id)cellAtCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)cellBorderAtCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })cellIDForCellUID:(const struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_1_1_1; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; }*)arg1;
- (id)cellMapForRegion:(id)arg1 uidBased:(BOOL)arg2;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForTableArea:(unsigned int)arg1;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })cellRangeForUIDRange:(const struct TSTCellUIDRange { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; }*)arg1;
- (id)cellRegionForUIDRange:(const struct TSTCellUIDRange { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; }*)arg1;
- (id)cellRegionFromCellUIDList:(id)arg1;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)cellUIDListFromCellRegion:(id)arg1;
- (struct TSTCellUIDRange { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })cellUIDRangeForCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (struct TSTCellUID { struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_1_1_1; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; })cellUIDforCellID:(const struct { unsigned short x1; unsigned char x2; unsigned char x3; }*)arg1;
- (BOOL)cellWasModifiedInCurrentRecalcCycle:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)cellsPendingWrite;
- (id)cellsToInvalidateAfterRecalc;
- (id)cellsToInvalidateNonoverflowingAfterRecalc;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3 avoidNames:(id)arg4;
- (void)clearFromTableID;
- (unsigned char)columnIndexForColumnUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (id)columnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)columnNameForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 cellRangeContainingName:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; }*)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)columnRowUIDMap;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })columnUIDForColumnIndex:(unsigned char)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDs;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDsForColumnIndexes:(id)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDsForColumnRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (id)columnWidths;
- (id)conditionalStyleFormulaOwner;
- (id)dataStore;
- (void)dealloc;
- (id)defaultBodyCell;
- (int)defaultCell:(id)arg1 forTableArea:(unsigned int)arg2;
- (id)defaultCellForTableArea:(unsigned int)arg1;
- (id)defaultCellStyleForTableArea:(unsigned int)arg1;
- (id)defaultFooterRowCell;
- (id)defaultHeaderColumnCell;
- (id)defaultHeaderRowCell;
- (id)defaultHorizontalBorderStroke;
- (id)defaultHorizontalBorderStrokeEvenIfNotVisible;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalColumns:(unsigned short)arg5 totalRows:(unsigned short)arg6 tableArea:(unsigned int)arg7 outTopStroke:(id*)arg8 outLeftStroke:(id*)arg9 outBottomStroke:(id*)arg10 outRightStroke:(id*)arg11;
- (void)defaultStrokesForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 outTopStroke:(id*)arg2 outLeftStroke:(id*)arg3 outBottomStroke:(id*)arg4 outRightStroke:(id*)arg5;
- (id)defaultTextStyleForTableArea:(unsigned int)arg1;
- (id)defaultVerticalBorderStroke;
- (void)dirtyFilterState;
- (id)documentRoot;
- (id)duplicateFilterSet;
- (id)duplicateFilterSetInUidForm;
- (void)enableFilterSet:(BOOL)arg1;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })expandCellRangeToCoverMergedCells:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (id)filterSet;
- (void)filterSetUpdated;
- (id)footerRowBodyColumnStroke;
- (id)footerRowBodyRowStroke;
- (id)footerRowBorderStroke;
- (id)footerRowCellStyle;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })footerRowRange;
- (id)footerRowSeparatorStroke;
- (id)footerRowTextStyle;
- (id)footerRowsFill;
- (id)formulasForUndo;
- (struct __CFUUID { }*)fromTableID;
- (id)grabAllMergeRanges;
- (BOOL)hasActiveFilters;
- (BOOL)hasAlternatingRows;
- (BOOL)hasCommentStorageAtCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (BOOL)hasFilterRulesInColumns:(id)arg1;
- (BOOL)hasFormulaByID:(unsigned int)arg1 atCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (BOOL)hasFormulas;
- (BOOL)hasMergeRanges;
- (BOOL)hasTableBorder;
- (id)headerColumnBodyColumnStroke;
- (id)headerColumnBodyRowStroke;
- (id)headerColumnBorderStroke;
- (id)headerColumnCellStyle;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerColumnRange;
- (id)headerColumnSeparatorStroke;
- (id)headerColumnTextStyle;
- (id)headerColumnsFill;
- (BOOL)headerColumnsFrozen;
- (id)headerRowBodyColumnStroke;
- (id)headerRowBodyRowStroke;
- (id)headerRowBorderStroke;
- (id)headerRowCellStyle;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })headerRowRange;
- (id)headerRowSeparatorStroke;
- (id)headerRowTextStyle;
- (id)headerRowsFill;
- (BOOL)headerRowsFrozen;
- (id)hiddenColumnsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)hiddenRowsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)hiddenStateFormulaOwnerForColumns;
- (id)hiddenStateFormulaOwnerForRows;
- (unsigned char)hidingActionForColumn:(unsigned char)arg1;
- (unsigned char)hidingActionForRow:(unsigned short)arg1;
- (id)init;
- (id)initFromUnarchiver:(id)arg1;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(BOOL)arg5;
- (id)initWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned short)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6;
- (void)insertColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (int)insertColumnsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadata:(id)arg3;
- (void)insertRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (int)insertRowsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadata:(id)arg3;
- (int)insertRowsInRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadata:(id)arg3 unsetFilterHidingAction:(BOOL)arg4;
- (BOOL)isCellRangeHidden:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (BOOL)isColumnHidden:(unsigned char)arg1;
- (BOOL)isColumnHidden:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)isRowHidden:(unsigned short)arg1;
- (BOOL)isRowHidden:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)mappingForSortWithRules:(id)arg1 inRows:(id)arg2;
- (int)maxStrokeOrder;
- (id)mergeOwner;
- (id)mergeRangesForCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)mergeRangesForCellRegion:(id)arg1;
- (id)mergedGridIndicesForDirection:(int)arg1;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })minPopulatedCellRange;
- (id)mixedObjectWithFraction:(float)arg1 ofObject:(id)arg2;
- (int)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (void)moveCalcEngineReferencesFromSourceTable:(struct __CFUUID { }*)arg1 sourceRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2 sourceOffset:(struct { int x1; int x2; })arg3;
- (id)mutableColumnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)mutableIndexesForUIDSet:(id)arg1 asRows:(BOOL)arg2;
- (id)mutableIndexesForUIDSet:(id)arg1 asRows:(BOOL)arg2 notFoundUIDs:(id)arg3;
- (id)mutableRowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (void)mutateFormulaFiltersUsingBlock:(id /* block */)arg1;
- (BOOL)needsFilterFormulaRewriteForImport;
- (id)newCell;
- (unsigned short)numberColumnsHiddenInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (unsigned short)numberOfColumns;
- (unsigned short)numberOfFooterRows;
- (unsigned short)numberOfHeaderColumns;
- (unsigned short)numberOfHeaderRows;
- (unsigned short)numberOfHiddenColumns;
- (unsigned short)numberOfHiddenRows;
- (unsigned short)numberOfRows;
- (unsigned short)numberOfUserHiddenColumns;
- (unsigned short)numberOfUserHiddenRows;
- (unsigned short)numberOfVisibleBodyColumns;
- (unsigned short)numberOfVisibleBodyRows;
- (unsigned short)numberRowsHiddenInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)p_clearDataListEntriesInRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 ignoreSizeChecks:(BOOL)arg2;
- (void)p_fetchCellHoldingReadLock:(void*)arg1 returnCode:(void*)arg2;
- (void)p_gatherReorganizeValuesForColumn:(unsigned char)arg1 inRows:(id)arg2 outValues:(struct TSTCellReorganizeValue { unsigned int x1 : 8; unsigned int x2 : 8; union { double x_3_1_1; BOOL x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; struct TSTCellReorganizePopupInfo { unsigned int x_5_2_1; int x_5_2_2; } x_3_1_5; } x3; }*)arg3;
- (void)p_performCommentStorageDOLC:(id)arg1;
- (void)p_releaseExistingDefaultStyles;
- (void)private_validateMergeCellsPedantically;
- (id)prunedCellUIDListFromCellUIDList:(id)arg1 allowMergeFragment:(BOOL)arg2 addingPrunedIndicesToIndexSet:(id)arg3;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })range;
- (void)rearrangeWithMapping:(id)arg1;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })referenceToHiddenStateFromColumn:(unsigned char)arg1 toColumn:(unsigned char)arg2;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })referenceToHiddenStateFromRow:(unsigned short)arg1 toRow:(unsigned short)arg2;
- (id)regionForValueCellsInRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1;
- (void)remapTableUIDsInFormulasWithMap:(const struct TSUUuidMap { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg1 calcEngine:(id)arg2;
- (void)remapTableUIDsUsingTableIDHistoryWithCalcEngine:(id)arg1;
- (void)removeColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2;
- (void)removeColumnsAtIndexes:(id)arg1;
- (void)removeRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2;
- (void)removeRowsAtIndexes:(id)arg1;
- (BOOL)repeatingHeaderColumnsEnabled;
- (BOOL)repeatingHeaderRowsEnabled;
- (void)resetSortRuleReferenceTrackerForInsert;
- (void)resetStyles:(id)arg1;
- (id)rowHeights;
- (unsigned short)rowIndexForRowUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (id)rowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)rowNameForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 cellRangeContainingName:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; }*)arg2 restrictToBodyRange:(BOOL)arg3;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })rowUIDForRowIndex:(unsigned short)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDs;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDsForRowIndexes:(id)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDsForRowRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)saveToArchiver:(id)arg1;
- (void)setBodyCellStyle:(id)arg1;
- (void)setBodyTextStyle:(id)arg1;
- (void)setCalcEngine:(id)arg1;
- (void)setColumnRowUIDMap:(id)arg1;
- (void)setColumnWidths:(id)arg1;
- (void)setConditionalStyleFormulaOwner:(id)arg1;
- (void)setDrawableIsBeingCopied:(BOOL)arg1;
- (void)setFilterSet:(id)arg1;
- (void)setFilterSetType:(int)arg1;
- (void)setFooterRowCellStyle:(id)arg1;
- (void)setFooterRowTextStyle:(id)arg1;
- (void)setFormulasForUndo:(id)arg1;
- (void)setHeaderColumnCellStyle:(id)arg1;
- (void)setHeaderColumnTextStyle:(id)arg1;
- (void)setHeaderColumnsFrozen:(BOOL)arg1;
- (void)setHeaderRowCellStyle:(id)arg1;
- (void)setHeaderRowTextStyle:(id)arg1;
- (void)setHeaderRowsFrozen:(BOOL)arg1;
- (void)setHeight:(float)arg1 ofRow:(unsigned short)arg2;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1;
- (void)setNumberOfColumns:(unsigned short)arg1;
- (void)setNumberOfFooterRows:(unsigned short)arg1;
- (void)setNumberOfHeaderColumns:(unsigned short)arg1;
- (void)setNumberOfHeaderRows:(unsigned short)arg1;
- (void)setNumberOfRows:(unsigned short)arg1;
- (void)setRepeatingHeaderColumnsEnabled:(BOOL)arg1;
- (void)setRepeatingHeaderRowsEnabled:(BOOL)arg1;
- (void)setRowHeights:(id)arg1;
- (void)setSortOrder:(id)arg1;
- (void)setStorageParentToInfo:(id)arg1;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange { int x1; unsigned int x2; })arg4;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange { int x1; unsigned int x2; })arg4;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange { int x1; unsigned int x2; })arg4;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange { int x1; unsigned int x2; })arg4;
- (void)setStyleApplyClearsAll:(BOOL)arg1;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1;
- (void)setTableID:(struct __CFUUID { }*)arg1;
- (void)setTableName:(id)arg1;
- (void)setTableNameBorderEnabled:(BOOL)arg1;
- (void)setTableNameEnabled:(BOOL)arg1;
- (void)setTableNameHeight:(float)arg1;
- (void)setTableNameShapeStyle:(id)arg1;
- (void)setTableNameStyle:(id)arg1;
- (void)setTableStyle:(id)arg1;
- (void)setTableStylePreset:(id)arg1;
- (void)setWarningSetsForUndo:(id)arg1;
- (void)setWasCut:(BOOL)arg1;
- (void)setWasUnarchivedFromAProvidedTable:(BOOL)arg1;
- (void)setWidth:(float)arg1 ofColumn:(unsigned char)arg2;
- (void)setupDefaultCells;
- (void)setupHiddenStateIndexSets;
- (id)sortOrder;
- (id)sortRuleReferenceTracker;
- (id)strokeLayerForBottomOfRow:(unsigned short)arg1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned char)arg1;
- (id)strokeLayerForRightSideOfColumn:(unsigned char)arg1;
- (id)strokeLayerForTopOfRow:(unsigned short)arg1;
- (id)strokeSidecar;
- (BOOL)styleApplyClearsAll;
- (unsigned int)tableAreaForCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (unsigned int)tableAreaForColumn:(unsigned char)arg1;
- (unsigned int)tableAreaForRow:(unsigned short)arg1;
- (id)tableAreasForCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (struct __CFUUID { }*)tableID;
- (id)tableName;
- (BOOL)tableNameBorderEnabled;
- (id)tableNameBorderStroke;
- (BOOL)tableNameEnabled;
- (float)tableNameHeight;
- (id)tableNameShapeStyle;
- (id)tableNameStyle;
- (id)tableStyle;
- (id)tableStylePreset;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })tableUID;
- (int)tableWritingDirection;
- (struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })topCornerRange;
- (id)unnamedTableString;
- (void)updateTableRowColumnStylesWithBlock:(id /* block */)arg1;
- (void)upgradeDuringDocumentUpgradeIfNeeded;
- (void)upgradeFromPreUFF;
- (BOOL)useBandedFill;
- (id)userHiddenRowsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)userVisibleRowsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)validate;
- (void)validateStyles;
- (unsigned char)visibleColumnAfterAndIncludingColumn:(unsigned char)arg1;
- (unsigned char)visibleColumnAfterColumn:(unsigned char)arg1;
- (unsigned char)visibleColumnBeforeAndIncludingColumn:(unsigned char)arg1;
- (unsigned char)visibleColumnBeforeColumn:(unsigned char)arg1;
- (id)visibleColumnsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)visibleColumnsInColumnRange:(id)arg1;
- (unsigned short)visibleRowAfterAndIncludingRow:(unsigned short)arg1;
- (unsigned short)visibleRowAfterRow:(unsigned short)arg1;
- (unsigned short)visibleRowBeforeAndIncludingRow:(unsigned short)arg1;
- (unsigned short)visibleRowBeforeRow:(unsigned short)arg1;
- (id)visibleRowsInCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)visibleRowsInRowRange:(id)arg1;
- (id)warningSetsForUndo;
- (BOOL)wasCut;
- (BOOL)wasUnarchivedFromAProvidedTable;
- (BOOL)writeCellIDsInCellUIDList:(id)arg1 toVector:(struct vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSUColumnRowCoordinate *, std::__1::allocator<TSUColumnRowCoordinate> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg2;

@end
