/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDGLParticleSystem : NSObject {
    TSDGLDataBufferAttribute *_centerAttribute;
    TSDGLDataBufferAttribute *_colorAttribute;
    TSDGLDataBuffer *_dataBuffer;
    unsigned int _direction;
    float _duration;
    BOOL _hasParticleTexture;
    BOOL _isDataBufferInitialized;
    BOOL _isInitialized;
    TSDGLDataBufferAttribute *_lifeSpanAttribute;
    struct CGSize { 
        float width; 
        float height; 
    } _objectSize;
    unsigned int _particleCount;
    struct CGSize { 
        float width; 
        float height; 
    } _particleSize;
    TSDGLDataBufferAttribute *_particleTexCoordAttribute;
    unsigned int _particlesHigh;
    unsigned int _particlesWide;
    TSDGLDataBufferAttribute *_positionAttribute;
    TSDGLDataBufferAttribute *_rotationAttribute;
    TSDGLDataBufferAttribute *_scaleAttribute;
    TSDGLShader *_shader;
    BOOL _shouldDraw;
    struct CGSize { 
        float width; 
        float height; 
    } _slideSize;
    TSDGLDataBufferAttribute *_speedAttribute;
    TSDGLDataBufferAttribute *_texCoordAttribute;
    unsigned int _textureCount;
    BOOL *_visibilities;
    unsigned int _visibleParticleCount;
}

@property (nonatomic, readonly) TSDGLDataBufferAttribute *centerAttribute;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *colorAttribute;
@property (nonatomic, readonly) TSDGLDataBuffer *dataBuffer;
@property (nonatomic, readonly) NSArray *dataBufferAttributes;
@property (nonatomic, readonly) unsigned int direction;
@property (nonatomic, readonly) float duration;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *lifeSpanAttribute;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } objectSize;
@property (nonatomic, readonly) unsigned int particleCount;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } particleSize;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *particleTexCoordAttribute;
@property (nonatomic, readonly) unsigned int particlesHigh;
@property (nonatomic, readonly) unsigned int particlesWide;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *positionAttribute;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *rotationAttribute;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *scaleAttribute;
@property (nonatomic, readonly) TSDGLShader *shader;
@property (nonatomic, readonly) BOOL shouldDraw;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } slideSize;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *speedAttribute;
@property (nonatomic, readonly) TSDGLDataBufferAttribute *texCoordAttribute;
@property (nonatomic, readonly) unsigned int visibleParticleCount;

+ (id)newDataBufferAttributeWithName:(id)arg1;
+ (unsigned int)numberOfVerticesPerParticle;
+ (BOOL)shouldDrawInvisibleParticles;
+ (BOOL)useGLSL;
+ (BOOL)willOverrideColors;
+ (BOOL)willOverrideGeometry;
+ (BOOL)willOverrideStartingPoints;
+ (BOOL)willOverrideVisibilities;

- (struct { float x1; float x2; })centerAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)centerAttribute;
- (struct { float x1; float x2; float x3; float x4; })colorAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)colorAttribute;
- (id)dataBuffer;
- (id)dataBufferAttributes;
- (void)dealloc;
- (id)description;
- (unsigned int)direction;
- (void)drawGLSLWithPercent:(float)arg1 opacity:(float)arg2;
- (float)duration;
- (unsigned int)indexFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })indexPointFromIndex:(unsigned int)arg1;
- (id)initWithNumberOfParticles:(unsigned int)arg1 objectSize:(struct CGSize { float x1; float x2; })arg2 slideSize:(struct CGSize { float x1; float x2; })arg3 duration:(float)arg4 direction:(unsigned int)arg5 shader:(id)arg6;
- (id)initWithParticleSize:(struct CGSize { float x1; float x2; })arg1 particleSystemSize:(struct CGSize { float x1; float x2; })arg2 objectSize:(struct CGSize { float x1; float x2; })arg3 slideSize:(struct CGSize { float x1; float x2; })arg4 duration:(float)arg5 direction:(unsigned int)arg6 shader:(id)arg7;
- (struct { float x1; float x2; })lifeSpanAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)lifeSpanAttribute;
- (struct CGContext { }*)newContextFromTexture:(id)arg1;
- (struct CGSize { float x1; float x2; })objectSize;
- (void)p_logParticleInformation;
- (struct CGSize { float x1; float x2; })p_particleSystemSizeWithRequestedNumber:(unsigned int)arg1 objectSize:(struct CGSize { float x1; float x2; })arg2;
- (void)p_reverseParticleDataDrawOrder;
- (void)p_setDataBufferAttribute:(id*)arg1 withName:(id)arg2 defaultDataType:(int)arg3 normalized:(BOOL)arg4 componentCount:(unsigned long)arg5;
- (void)p_setupDataBufferWithParticleCount:(unsigned int)arg1 visibleParticleCount:(unsigned int)arg2;
- (void)p_setupParticleDataWithTexture:(id)arg1;
- (void)p_setupVertexData;
- (unsigned int)particleCount;
- (struct CGSize { float x1; float x2; })particleSize;
- (id)particleTexCoordAttribute;
- (unsigned int)particlesHigh;
- (unsigned int)particlesWide;
- (id)positionAttribute;
- (struct { float x1; float x2; float x3; })rotationAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)rotationAttribute;
- (float)rotationMax;
- (float)scaleAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)scaleAttribute;
- (void)setupGLSL;
- (void)setupWithTexture:(id)arg1 particleTextureSize:(struct CGSize { float x1; float x2; })arg2 reverseDrawOrder:(BOOL)arg3;
- (id)shader;
- (BOOL)shouldDraw;
- (struct CGSize { float x1; float x2; })slideSize;
- (struct { float x1; float x2; float x3; })speedAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)speedAttribute;
- (float)speedMax;
- (struct CGPoint { float x1; float x2; })startingPointAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)texCoordAttribute;
- (struct { float x1; float x2; })vertexPositionAtVertexIndex:(unsigned int)arg1 particleIndexPoint:(struct CGPoint { float x1; float x2; })arg2;
- (BOOL)visibilityAtIndexPoint:(struct CGPoint { float x1; float x2; })arg1;
- (unsigned int)visibleParticleCount;

@end
