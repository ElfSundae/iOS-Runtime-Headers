/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTReferenceNode : TSTExpressionNode {
    BOOL mBlankForKeyboardInsertion;
    TSCECalculationEngine *mCalculationEngine;
    NSString *mFormulaPlainText;
    struct __CFUUID { } *mHostTableID;
    int mRangeContext;
    struct { 
        struct TSCERangeCoordinate { 
            struct { 
                unsigned short row; 
                unsigned char column; 
                unsigned char reserved; 
            } mTopLeft; 
            struct { 
                unsigned short row; 
                unsigned char column; 
                unsigned char reserved; 
            } mBottomRight; 
        } range; 
        struct __CFUUID {} *tableID; 
    } mRangeReference;
    BOOL mRangeWithFunction;
    NSString *mRefString;
    TSTReferenceColorHelper *mReferenceColorHelper;
    unsigned char mStickyBits;
}

@property (getter=isBlankForKeyboardInsertion, nonatomic) BOOL blankForKeyboardInsertion;
@property (nonatomic, readonly, retain) TSCECalculationEngine *calculationEngine;
@property (setter=setHostTableID:, nonatomic) struct __CFUUID { }*hostTableID;
@property (getter=isLocalReference, nonatomic, readonly) BOOL localReference;
@property (getter=isNonSpanningRange, nonatomic, readonly) BOOL nonSpanningRange;
@property (getter=isRange, nonatomic, readonly) BOOL range;
@property (nonatomic) int rangeContext;
@property (nonatomic) struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; } rangeCoordinate;
@property (nonatomic) struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; } rangeReference;
@property (getter=isRangeWithFunction, nonatomic) BOOL rangeWithFunction;
@property (nonatomic, retain) TSTReferenceColorHelper *referenceColorHelper;
@property (getter=isResizable, nonatomic, readonly) BOOL resizable;
@property (getter=isSimpleRowOrColumnReference, nonatomic, readonly) BOOL simpleRowOrColumnReference;
@property (getter=isSingleASTNode, nonatomic, readonly) BOOL singleASTNode;
@property (nonatomic) unsigned char stickyBits;
@property (setter=setTableID:, nonatomic) struct __CFUUID { }*tableID;

- (void)buildASTNodeArray:(struct TSCEASTNodeArray { char *x1; unsigned int x2; unsigned int x3; id x4; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; long long x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; id x87; void*x88; void*x89; id x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; id x149; void*x150; void*x151; id x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; double x192; void*x193; void*x194; void*x195; void*x196; int x197; long x198; void*x199; void*x200; const void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; oneway void*x207; void*x208; void*x209; void*x210; void*x211; long x212; void*x213; void*x214; void*x215; in void*x216; void*x217; void*x218; void x219; void*x220; out void*x221; int x222; void*x223; double x224; void*x225; char *x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; }*)arg1 hostCell:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 symbolTable:(struct TSCESymbolTable { id x1; struct unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > { struct __hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> { struct __hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; struct unordered_map<unsigned int, SFUtility::ObjcSharedPtr<NSString>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SFUtility::ObjcSharedPtr<NSString> > > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, std::__1::hash<unsigned int>, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, SFUtility::ObjcSharedPtr<NSString> >, std::__1::equal_to<unsigned int>, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > > { struct unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > {} *x_4_1_1; struct unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > {} *x_4_1_2; struct __compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > > { struct unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > {} *x_3_2_1; } x_4_1_3; } x4; }*)arg3;
- (id)calculationEngine;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)exportString;
- (id)formulaPlainText;
- (unsigned int)hash;
- (struct __CFUUID { }*)hostTableID;
- (id)initAsCopyOf:(id)arg1 intoContext:(id)arg2 children:(id)arg3;
- (id)initFromArchive:(const struct ReferenceNodeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct ExpressionNodeArchive {} *x5; struct RangeReferenceArchive {} *x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; unsigned int x8; }*)arg1 unarchiver:(id)arg2;
- (id)initFromUnarchiver:(id)arg1;
- (id)initWithContext:(id)arg1 calculationEngine:(id)arg2 cellRange:(struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg3 stickyBits:(unsigned char)arg4 hostTableID:(struct __CFUUID { }*)arg5 tableID:(struct __CFUUID { }*)arg6 referenceColorHelper:(id)arg7 firstIndex:(unsigned int)arg8 lastIndex:(unsigned int)arg9;
- (id)initWithContext:(id)arg1 children:(id)arg2 firstIndex:(unsigned int)arg3 lastIndex:(unsigned int)arg4;
- (id)initWithReferenceStart:(id)arg1 referenceEnd:(id)arg2 firstIndex:(unsigned int)arg3 lastIndex:(unsigned int)arg4;
- (void)insertFormulaText:(id)arg1 includeWhitespace:(BOOL)arg2;
- (void)invalidate;
- (BOOL)isBlankForKeyboardInsertion;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToExpressionNode:(id)arg1;
- (BOOL)isLocalReference;
- (BOOL)isNonSpanningRange;
- (BOOL)isRange;
- (BOOL)isRangeWithFunction;
- (BOOL)isResizable;
- (BOOL)isSimpleRowOrColumnReference;
- (BOOL)isSingleASTNode;
- (BOOL)isValidReference;
- (void)p_buildASTNodeArray:(struct TSCEASTNodeArray { char *x1; unsigned int x2; unsigned int x3; id x4; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; bool x29; void*x30; unsigned char x31; unsigned char x32; out void*x33; in void*x34; void*x35; double x36; unsigned short x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; Class x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; bool x91; void*x92; unsigned char x93; unsigned char x94; out void*x95; in void*x96; void*x97; double x98; unsigned short x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; unsigned short x122; void*x123; short x124; void*x125; void*x126; void*x127; void*x128; unsigned long x129; int x130; unsigned int x131/* : ? */; const void*x132; const void*x133; void*x134; void*x135; const int x136; void x137; void*x138; void*x139; void*x140; void*x141; const void*x142; void*x143; void*x144; void*x145; out const void*x146; short x147; void*x148; unsigned char x149; long x150; out void*x151; double x152; long doublex153; out BOOL x154; short x155; long doublex156; void*x157; void*x158; void*x159; out in void*x160; float x161; const void*x162; void*x163; void*x164; void*x165; out const void*x166; void*x167; unsigned char x168; long x169; out void*x170; double x171; long doublex172; out BOOL x173; short x174; long doublex175; void*x176; void*x177; void*x178; out in void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; const void*x225; void*x226; unsigned char x227; struct x228; void*x229; unsigned short x230; unsigned char x231; out void*x232; in void*x233; void*x234; double x235; unsigned short x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; unsigned int x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; long doublex259; void*x260; out const void*x261; void*x262; long x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; id x282; void*x283; void*x284; long long x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; unsigned char x319; void*x320; unsigned long x321; int x322; in void*x323; bool x324; const void*x325; void*x326; void*x327; void*x328; const void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; id x342; void*x343; void*x344; void*x345; void*x346; void*x347; unsigned char x348; BOOL x349; BOOL x350; out void*x351; in void*x352; void*x353; const out void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; id x368; void*x369; void*x370; void*x371; char *x372; void*x373; void*x374; long doublex375; void*x376; int x377; void*x378; const out void*x379; unsigned long x380; void*x381; unsigned short x382; void*x383; in double x384; long doublex385; void*x386; void*x387; void*x388; void*x389; void*x390; short x391; void*x392; long x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; id x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; const void*x423; short x424; unsigned char x425; void*x426; const out void*x427; short x428; void*x429; long x430; unsigned char x431; out long x432; long x433; void*x434; BOOL x435; void*x436; int x437; out in oneway int x438; void*x439; void*x440; unsigned long x441; void*x442; void*x443; out void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; id x451; void*x452; void*x453; void*x454; void*x455; void*x456; unsigned char x457; long doublex458; void*x459; void*x460; unsigned int x461/* : ? */; long x462; void*x463; oneway int x464; void*x465; void*x466; unsigned char x467; out in void*x468; const out long x469; long x470; void*x471; const void*x472; void*x473; void*x474; void*x475; id x476; void*x477; void*x478; void*x479; void*x480; void*x481; inout unsigned char x482; out in void*x483; void*x484; BOOL x485; void*x486; oneway int x487; void*x488; void*x489; unsigned char x490; out in void*x491; const out long x492; long x493; void*x494; const void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; id x514; void*x515; in long long x516; void*x517; void*x518; unsigned short x519; void*x520; void*x521; BOOL x522; void*x523; int x524; void x525; void*x526; double x527; unsigned char x528; void*x529; long x530; long x531; unsigned short x532; void*x533; long x534; void*x535; BOOL x536; void*x537; int x538; out in void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; id x557; void*x558; void*x559; id x560; void*x561; void*x562; bycopy long doublex563; int x564; const void*x565; BOOL x566; void*x567; int x568; out in short x569; void*x570; const out void x571; int x572; double x573; void*x574; const void*x575; void*x576; void*x577; void*x578; void*x579; id x580; void*x581; const unsigned long long x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; double x589; unsigned short x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; id x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; long doublex616; void*x617; void*x618; void*x619; int x620; void*x621; void*x622; void*x623; int x624; short x625; void*x626; void*x627; const void*x628; void*x629; short x630; void*x631; out in short x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; id x653; void*x654; void*x655; unsigned long long x656; void*x657; void*x658; void*x659; out int x660; BOOL x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; id x682; void*x683; in void*x684; void*x685; unsigned int x686; void*x687; int x688; BOOL x689; void*x690; void*x691; const void*x692; void*x693; unsigned int x694/* : ? */; long x695; void*x696; oneway int x697; void*x698; void*x699; unsigned char x700; void*x701; long x702; long x703; void*x704; void*x705; void*x706; void*x707; void*x708; id x709; void*x710; void x711; void*x712; void*x713; void*x714; void*x715; void*x716; const void*x717; in short x718; BOOL x719; const int x720; void*x721; void*x722; void*x723; void*x724; in void*x725; void*x726; void*x727; void*x728; void*x729; in void*x730; inout void*x731; void*x732; void*x733; void*x734; int x735; void*x736; long x737; double x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; id x750; void*x751; void x752; long long x753; void*x754; void*x755; void*x756; void*x757; long x758; void*x759; BOOL x760; void*x761; long doublex762; void*x763; void*x764; long x765; unsigned char x766; void*x767; long x768; long x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; id x781; void*x782; }*)arg1 forRangeComponent:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 stickyBits:(unsigned char)arg3 hostCell:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg4;
- (void)p_resetMenu;
- (int)rangeContext;
- (struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })rangeCoordinate;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })rangeReference;
- (struct TSTCSENodeData { unsigned int x1; unsigned int x2; })recordHashesForSubexpressions:(id)arg1;
- (id)referenceColorHelper;
- (void)saveToArchive:(struct ReferenceNodeArchive { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; struct ExpressionNodeArchive {} *x5; struct RangeReferenceArchive {} *x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; unsigned int x8; }*)arg1 archiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setBlankForKeyboardInsertion:(BOOL)arg1;
- (void)setHostTableID:(struct __CFUUID { }*)arg1;
- (void)setRangeContext:(int)arg1;
- (void)setRangeCoordinate:(struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1;
- (void)setRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1;
- (void)setRangeWithFunction:(BOOL)arg1;
- (void)setReferenceColorHelper:(id)arg1;
- (void)setStickyBits:(unsigned char)arg1;
- (void)setTableID:(struct __CFUUID { }*)arg1;
- (unsigned char)stickyBits;
- (id)string;
- (struct __CFUUID { }*)tableID;
- (int)tokenType;

@end
