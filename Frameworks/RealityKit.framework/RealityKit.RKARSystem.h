/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/RealityKit.framework/RealityKit
 */

@interface RealityKit.RKARSystem : NSObject <ARPresentationDelegate> {
    void $__lazy_storage_$_debugAnchorPlaneMaterial;
    void $__lazy_storage_$_debugAxisEntity;
    void $__lazy_storage_$_debugProbeMaterial;
    void __autoFireStartTriggerOnPlacement;
    void __enableUpdateCameraProjectionMatrixFromARFrame;
    void __enableUpdateCameraWorldMatrixFromARFrame;
    void __passthroughIntensityExponent;
    void __renderQuality;
    void addedAnchors;
    void anchorSemaphore;
    void arEmitter;
    void arProbePlacementManager;
    void arProbeRenderManager;
    void arView;
    void cachedGestureHitTestResults;
    void cameraCombinedPostProcessMaterials;
    void cameraMode;
    void cameraNoiseRandomTranslation;
    void cameraPassthroughMaterial;
    void cameraSegmentationCompositeMaterial;
    void capturedFrame;
    void collaborationStarted;
    void connectedPeers;
    void currentPresentationMode;
    void debugAnchorsByAnchorIdentifier;
    void debugFeaturePointUpdateRate;
    void debugFeaturePoints;
    void debugOptions;
    void debugPlanesByAnchorIdentifier;
    void debugProbesByAnchorIdentifier;
    void delegate;
    void displayToCameraMatrix;
    void engine;
    void fallbackAmbientColor;
    void fallbackAmbientIntensity;
    void groundingShadowMode;
    void isFaceSession;
    void lastARFrameTimeStamp;
    void lastTimestamp;
    void lastUpdateTime;
    void lightEntity;
    void maxNumberOfAttemptsToGetARFrameInDuplicateCase;
    void needInitialCollaborationData;
    void netSessionObserver;
    void occlusionEntitiesByAnchorIdentifier;
    void removedAnchors;
    void renderOptions;
    void scene;
    void session;
    void shadowReceiverEntitiesByAnchorIdentifier;
    void shouldRenderCameraFeed;
    void simpleForwardEmitter;
    void sleepDurationInDuplicateARFrameCase;
    void textureCache;
    void timeSinceLastDebugFeaturePointUpdate;
    void updateCameraViewDescriptorSettings;
    void updatedAnchors;
    void useEncodedSemaphore;
    void useLowSampleAA;
    void worldOrigin;
    void zFar;
    void zNear;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (void)presentationIsReadyForNextRender:(id)arg1;

@end
