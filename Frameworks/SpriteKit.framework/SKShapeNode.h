/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

@interface SKShapeNode : SKNode {
    struct SKCShapeNode { int (**x1)(); id x2; struct unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; } * _skcShapeNode;
}

@property (getter=isAntialiased, nonatomic) BOOL antialiased;
@property (nonatomic, copy) NSDictionary *attributeValues;
@property (nonatomic) int blendMode;
@property (nonatomic, retain) UIColor *fillColor;
@property (nonatomic, retain) SKShader *fillShader;
@property (nonatomic, retain) SKTexture *fillTexture;
@property (nonatomic) float glowWidth;
@property (nonatomic) int lineCap;
@property (nonatomic) int lineJoin;
@property (nonatomic, readonly) float lineLength;
@property (nonatomic) float lineWidth;
@property (nonatomic) float miterLimit;
@property (nonatomic) const struct CGPath { }*path;
@property (nonatomic) float renderQualityRatio;
@property (nonatomic, retain) UIColor *strokeColor;
@property (nonatomic, retain) SKShader *strokeShader;
@property (nonatomic, retain) SKTexture *strokeTexture;

+ (id)shapeNodeWithCircleOfRadius:(float)arg1;
+ (id)shapeNodeWithEllipseInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (id)shapeNodeWithEllipseOfSize:(struct CGSize { float x1; float x2; })arg1;
+ (id)shapeNodeWithPath:(struct CGPath { }*)arg1;
+ (id)shapeNodeWithPath:(struct CGPath { }*)arg1 centered:(BOOL)arg2;
+ (id)shapeNodeWithPoints:(struct CGPoint { float x1; float x2; }*)arg1 count:(unsigned long)arg2;
+ (id)shapeNodeWithRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (id)shapeNodeWithRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 cornerRadius:(float)arg2;
+ (id)shapeNodeWithRectOfSize:(struct CGSize { float x1; float x2; })arg1;
+ (id)shapeNodeWithRectOfSize:(struct CGSize { float x1; float x2; })arg1 cornerRadius:(float)arg2;
+ (id)shapeNodeWithSplinePoints:(struct CGPoint { float x1; float x2; }*)arg1 count:(unsigned long)arg2;
+ (id)shapeNodeWithTriangleA:(struct CGPoint { float x1; float x2; })arg1 B:(struct CGPoint { float x1; float x2; })arg2 C:(struct CGPoint { float x1; float x2; })arg3;

- (void)_didMakeBackingNode;
- (void)_initialize;
- (struct SKCNode { int (**x1)(); id x2; struct unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)_makeBackingNode;
- (int)blendMode;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)fillColor;
- (id)fillShader;
- (id)fillTexture;
- (float)glowWidth;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isAntialiased;
- (BOOL)isEqualToNode:(id)arg1;
- (int)lineCap;
- (int)lineJoin;
- (float)lineLength;
- (float)lineWidth;
- (float)miterLimit;
- (const struct CGPath { }*)path;
- (float)renderQualityRatio;
- (void)setAntialiased:(BOOL)arg1;
- (void)setBlendMode:(int)arg1;
- (void)setFillColor:(id)arg1;
- (void)setFillShader:(id)arg1;
- (void)setFillTexture:(id)arg1;
- (void)setGlowWidth:(float)arg1;
- (void)setLineCap:(int)arg1;
- (void)setLineJoin:(int)arg1;
- (void)setLineWidth:(float)arg1;
- (void)setMiterLimit:(float)arg1;
- (void)setPath:(struct CGPath { }*)arg1;
- (void)setRenderQualityRatio:(float)arg1;
- (void)setStrokeColor:(id)arg1;
- (void)setStrokeShader:(id)arg1;
- (void)setStrokeTexture:(id)arg1;
- (id)strokeColor;
- (id)strokeShader;
- (id)strokeTexture;

@end
