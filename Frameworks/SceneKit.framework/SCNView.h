/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@interface SCNView : UIView <SCNSceneRenderer, SCNTechniqueSupport> {
    SCNDisplayLink * __displayLink;
    unsigned int  __ibPreferredRenderingAPI;
    NSString * __ibSceneName;
    unsigned int  _allowsBrowsing;
    unsigned int  _appIsDeactivated;
    UIColor * _backgroundColor;
    unsigned int  _backingSizeDidChange;
    NSArray * _controllerGestureRecognizers;
    double  _currentSystemTime;
    id  _delegate;
    <MTLDevice> * _device;
    unsigned int  _drawOnMainThreadPending;
    SCNEventHandler * _eventHandler;
    unsigned int  _firstDrawDone;
    unsigned int  _ibNoMultisampling;
    unsigned int  _isOpaque;
    SCNJitterer * _jitterer;
    double  _lastUpdate;
    NSRecursiveLock * _lock;
    int  _preferredFramePerSeconds;
    SCNRenderer * _renderer;
    unsigned int  _renderingAPI;
    SCNScene * _scene;
    char * _snapshotImageData;
    unsigned long  _snapshotImageDataLength;
    SCNSpriteKitEventHandler * _spriteKitEventHandler;
    unsigned int  _viewIsOffscreen;
}

@property (nonatomic) BOOL allowsCameraControl;
@property (nonatomic) unsigned int antialiasingMode;
@property (nonatomic, readonly) AVAudioEngine *audioEngine;
@property (nonatomic, readonly) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (nonatomic, retain) SCNNode *audioListener;
@property (nonatomic) BOOL autoenablesDefaultLighting;
@property (nonatomic, readonly) unsigned int colorPixelFormat;
@property (nonatomic, readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, readonly) void*context;
@property (nonatomic, readonly) <MTLRenderCommandEncoder> *currentRenderCommandEncoder;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned int debugOptions;
@property (nonatomic) <SCNSceneRendererDelegate> *delegate;
@property (nonatomic, readonly) unsigned int depthPixelFormat;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <MTLDevice> *device;
@property (nonatomic, retain) EAGLContext *eaglContext;
@property (readonly) unsigned int hash;
@property (getter=isJitteringEnabled, nonatomic) BOOL jitteringEnabled;
@property (nonatomic) BOOL loops;
@property (nonatomic, retain) SKScene *overlaySKScene;
@property (getter=isPlaying) BOOL playing;
@property (nonatomic, retain) SCNNode *pointOfView;
@property (nonatomic) int preferredFramesPerSecond;
@property (nonatomic, readonly) unsigned int renderingAPI;
@property (nonatomic, retain) SCNScene *scene;
@property (nonatomic) double sceneTime;
@property (nonatomic) BOOL showsStatistics;
@property (nonatomic, readonly) unsigned int stencilPixelFormat;
@property (readonly) Class superclass;
@property (nonatomic, copy) SCNTechnique *technique;

+ (BOOL)_isMetalSupported;
+ (id)_kvoKeysForwardedToRenderer;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)deviceForOptions:(id)arg1;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (Class)layerClass;
+ (unsigned int)renderingAPIForOptions:(id)arg1;

- (const void*)__CFObject;
- (void)_adjustBackingLayerPixelFormat;
- (id)_authoringEnvironment;
- (BOOL)_canJitter;
- (BOOL)_checkAndUpdateDisplayLinkStateIfNeeded;
- (void)_commonInit:(id)arg1;
- (BOOL)_controlsOwnScaleFactor;
- (id)_defaultBackgroundColor;
- (id)_displayLink;
- (void)_drawAtTime:(double)arg1;
- (BOOL)_enablesDeferredShading;
- (void)_enterBackground:(id)arg1;
- (void)_enterForeground:(id)arg1;
- (float)_flipY:(float)arg1;
- (void)_flushDisplayLink;
- (int)_ibPreferredRenderingAPI;
- (id)_ibSceneName;
- (BOOL)_ibWantsMultisampling;
- (BOOL)_isEditor;
- (void)_jitterRedisplay;
- (float)_runFPSTestWithDuration:(double)arg1;
- (void)_sceneBackgroundDidChange:(id)arg1;
- (void)_sceneDidUpdate:(id)arg1;
- (void)_selectRenderingAPIWithOptions:(id)arg1;
- (void)_setGestureRecognizers:(id)arg1;
- (void)_setNeedsDisplay;
- (BOOL)_showsAuthoringEnvironment;
- (BOOL)_supportsJitteringSyncRedraw;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (void)_updateGestureRecognizers;
- (void)_updateOpacity;
- (void)_updateProbes:(id)arg1 withProgress:(id)arg2;
- (BOOL)allowsCameraControl;
- (unsigned int)antialiasingMode;
- (id)audioEngine;
- (id)audioEnvironmentNode;
- (id)audioListener;
- (BOOL)autoenablesDefaultLighting;
- (id)backgroundColor;
- (unsigned int)colorPixelFormat;
- (id)commandQueue;
- (void*)context;
- (id)currentRenderCommandEncoder;
- (id)currentRenderPassDescriptor;
- (void)dealloc;
- (unsigned int)debugOptions;
- (id)delegate;
- (unsigned int)depthPixelFormat;
- (id)description;
- (id)device;
- (void)didMoveToWindow;
- (void)displayLayer:(id)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)eaglContext;
- (void)encodeWithCoder:(id)arg1;
- (id)eventHandler;
- (void)eventHandlerWantsRedraw;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 options:(id)arg2;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)hitTestWithSegmentFromPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg1 toPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg2 options:(id)arg3;
- (int)ibPreferredRenderingAPI;
- (id)ibSceneName;
- (BOOL)ibWantsMultisampling;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 options:(id)arg2;
- (BOOL)isJitteringEnabled;
- (BOOL)isNodeInsideFrustum:(id)arg1 withPointOfView:(id)arg2;
- (BOOL)isOpaque;
- (BOOL)isPlaying;
- (void)lock;
- (BOOL)loops;
- (id)nodesInsideFrustumWithPointOfView:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlaySKScene;
- (void)pause:(id)arg1;
- (void)pauseDisplayLink;
- (void)play:(id)arg1;
- (id)pointOfView;
- (int)preferredFramesPerSecond;
- (BOOL)prepareObject:(id)arg1 shouldAbortBlock:(id /* block */)arg2;
- (void)prepareObjects:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)presentScene:(id)arg1 withTransition:(id)arg2 incomingPointOfView:(id)arg3 completionHandler:(id /* block */)arg4;
- (struct SCNVector3 { float x1; float x2; float x3; })projectPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (id)renderer;
- (unsigned int)renderingAPI;
- (void)resumeDisplayLink;
- (id)scene;
- (double)sceneTime;
- (void)setAllowsCameraControl:(BOOL)arg1;
- (void)setAntialiasingMode:(unsigned int)arg1;
- (void)setAudioListener:(id)arg1;
- (void)setAutoenablesDefaultLighting:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setContentScaleFactor:(float)arg1;
- (void)setDebugOptions:(unsigned int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEaglContext:(id)arg1;
- (void)setEventHandler:(id)arg1;
- (void)setIbPreferredRenderingAPI:(int)arg1;
- (void)setIbSceneName:(id)arg1;
- (void)setIbWantsMultisampling:(BOOL)arg1;
- (void)setJitteringEnabled:(BOOL)arg1;
- (void)setLoops:(BOOL)arg1;
- (void)setOverlaySKScene:(id)arg1;
- (void)setPlaying:(BOOL)arg1;
- (void)setPointOfView:(id)arg1;
- (void)setPointOfView:(id)arg1 animate:(BOOL)arg2;
- (void)setPreferredFramesPerSecond:(int)arg1;
- (void)setScene:(id)arg1;
- (void)setSceneTime:(double)arg1;
- (void)setShowsStatistics:(BOOL)arg1;
- (void)setTechnique:(id)arg1;
- (void)set_enablesDeferredShading:(BOOL)arg1;
- (void)set_ibPreferredRenderingAPI:(int)arg1;
- (void)set_ibSceneName:(id)arg1;
- (void)set_ibWantsMultisampling:(BOOL)arg1;
- (void)set_showsAuthoringEnvironment:(BOOL)arg1;
- (BOOL)showsStatistics;
- (id)snapshot;
- (unsigned int)stencilPixelFormat;
- (void)stop:(id)arg1;
- (void)switchToCameraNamed:(id)arg1;
- (void)switchToNextCamera;
- (id)technique;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)unlock;
- (struct SCNVector3 { float x1; float x2; float x3; })unprojectPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)willMoveToWindow:(id)arg1;

@end
