/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ARKit.framework/ARKit
 */

@interface AR2DSkeletonDetectionTechnique : ARMLImageProcessingTechnique {
    struct SkeletonJointFilter<float> { 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_values; 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_speed; 
        struct vector<double, std::__1::allocator<double> > { 
            double *__begin_; 
            double *__end_; 
            struct __compressed_pair<double *, std::__1::allocator<double> > { 
                double *__value_; 
            } __end_cap_; 
        } m_timestamps; 
        float m_smoothing; 
        float m_lowest_threshold; 
        float m_low_threshold; 
        float m_high_threshold; 
        float m_highest_threshold; 
        float m_temporal_smoothing; 
        float m_prediction_factor; 
        float m_min_smoothing; 
        double m_extrapolation_time_seconds; 
        float m_up_slope; 
        float m_down_slope; 
        float m_temporal_slope; 
    }  _extrapolationFilter2D;
    struct SkeletonJointFilter<float> { 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_values; 
        struct vector<float, std::__1::allocator<float> > { 
            float *__begin_; 
            float *__end_; 
            struct __compressed_pair<float *, std::__1::allocator<float> > { 
                float *__value_; 
            } __end_cap_; 
        } m_speed; 
        struct vector<double, std::__1::allocator<double> > { 
            double *__begin_; 
            double *__end_; 
            struct __compressed_pair<double *, std::__1::allocator<double> > { 
                double *__value_; 
            } __end_cap_; 
        } m_timestamps; 
        float m_smoothing; 
        float m_lowest_threshold; 
        float m_low_threshold; 
        float m_high_threshold; 
        float m_highest_threshold; 
        float m_temporal_smoothing; 
        float m_prediction_factor; 
        float m_min_smoothing; 
        double m_extrapolation_time_seconds; 
        float m_up_slope; 
        float m_down_slope; 
        float m_temporal_slope; 
    }  _extrapolationFilter2DForLiftingData;
    AR2DSkeletonDetectionPostProcessGPU * _postProcessorGPU;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_endLoadingMLModelSignpost;
- (void)_endMLCreateResultSignpostWithTimestamp:(double)arg1;
- (void)_endMLProcessingSignpostWithTimestamp:(double)arg1;
- (void)_endMLRunNetworkSignpostWithTimestamp:(double)arg1;
- (void)_startLoadingMLModelSignpost;
- (void)_startMLCreateResultSignpostWithTimestamp:(double)arg1 orientation:(long long)arg2 outputSize:(struct CGSize { double x1; double x2; })arg3;
- (void)_startMLProcessingSignpostWithTimestamp:(double)arg1;
- (void)_startMLRunNetworkSignpostWithTimestamp:(double)arg1;
- (void)changeEspressoConfig:(id)arg1;
- (id)createResultDataFromTensors:(struct { void *x1; void *x2; unsigned long long x3[4]; unsigned long long x4[4]; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; unsigned long long x14; int x15; }*)arg1 numberOfOutputTensors:(unsigned long long)arg2 imageDataForNeuralNetwork:(id)arg3 inputImageData:(id)arg4 rotationNeeded:(long long)arg5 regionOfInterest:(struct CGSize { double x1; double x2; })arg6;
- (int)defaultEngine;
- (id)init;
- (struct { float x1; float x2; float x3; float x4; bool x5; })networkInputParams;
- (double)requiredTimeInterval;

@end
