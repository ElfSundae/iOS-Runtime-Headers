/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CLGeomagneticModelProviderClientAdapter : CLNotifierServiceAdapter <CLGeomagneticModelProviderClientProtocol>

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (readonly) Class superclass;
@property (nonatomic) BOOL valid;

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
+ (BOOL)isSupported;
+ (void)performSyncOnSilo:(id)arg1 invoker:(id /* block */)arg2;

- (struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; union x31; void*x32; int x33; void*x34; double x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; out void*x43; const void*x44; out void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; float x52; void*x53; void*x54; void*x55; const void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; union x67; void*x68; int x69; void*x70; double x71; void*x72; void*x73; void*x74; void*x75; void*x76; int x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; out void*x85; in void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; id x95; short x96; void*x97; void*x98; void*x99; const void*x100; void*x101; void*x102; BOOL x103; void*x104; void*x105; void*x106; void*x107; void*x108; unsigned int x109/* : ? */; void*x110; void*x111; void*x112; short x113; void*x114; int x115; void*x116; BOOL x117; void*x118; void*x119; void*x120; short x121; void*x122; void*x123; void*x124; const void*x125; int x126; void*x127; in void*x128; void*x129; void*x130; void*x131; void*x132; BOOL x133; void*x134; void*x135; void*x136; void*x137; void*x138; const void*x139; void*x140; void*x141; void*x142; void*x143; short x144; void*x145; void*x146; void*x147; double x148; void*x149; SEL x150; void*x151; SEL x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; SEL x160; void*x161; SEL x162; void*x163; BOOL x164; void*x165; void*x166; void*x167; void*x168; void*x169; const void*x170; void*x171; void*x172; void*x173; void*x174; const void*x175; void*x176; void*x177; int x178; void*x179; void*x180; void*x181; short x182; void*x183; void*x184; void*x185; BOOL x186; void*x187; void*x188; void*x189; void*x190; void*x191; const void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; short x199; void*x200; void*x201; void*x202; double x203; void*x204; SEL x205; void*x206; SEL x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; SEL x215; void*x216; SEL x217; void*x218; void*x219; void*x220; long x221; void*x222; long x223; void*x224; out void*x225; BOOL x226; void*x227; void*x228; void*x229; void*x230; void*x231; out void*x232; const void*x233; void*x234; void*x235; BOOL x236; void*x237; void*x238; void*x239; void*x240; void*x241; const void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; struct x251; void*x252; void*x253; void*x254; short x255; void*x256; void*x257; void*x258; const void*x259; void*x260; void*x261; BOOL x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; BOOL x272; void*x273; out void*x274; void*x275; void*x276; void*x277; void*x278; const void*x279; void*x280; void*x281; short x282; void*x283; short x284; void*x285; void*x286; void*x287; double x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; int x296; void*x297; const void*x298; void*x299; void*x300; short x301; void*x302; void*x303; void*x304; double x305; void*x306; SEL x307; void*x308; SEL x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; SEL x317; void*x318; SEL x319; void*x320; unsigned int x321/* : ? */; void*x322; void*x323; void*x324; short x325; void*x326; int x327; void*x328; BOOL x329; void*x330; void*x331; void*x332; short x333; void*x334; void*x335; void*x336; const void*x337; int x338; void*x339; in void*x340; void*x341; void*x342; void*x343; void*x344; BOOL x345; void*x346; void*x347; void*x348; void*x349; void*x350; const void*x351; void*x352; void*x353; void*x354; void*x355; short x356; void*x357; void*x358; void*x359; double x360; void*x361; SEL x362; void*x363; SEL x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; SEL x372; void*x373; SEL x374; void*x375; BOOL x376; void*x377; void*x378; void*x379; void*x380; void*x381; const void*x382; void*x383; void*x384; void*x385; void*x386; const void*x387; void*x388; void*x389; int x390; void*x391; void*x392; void*x393; short x394; void*x395; void*x396; void*x397; BOOL x398; void*x399; void*x400; void*x401; void*x402; void*x403; const void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; short x411; void*x412; void*x413; void*x414; double x415; void*x416; SEL x417; void*x418; SEL x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; SEL x427; void*x428; SEL x429; void*x430; void*x431; void*x432; long x433; void*x434; long x435; void*x436; out void*x437; BOOL x438; void*x439; void*x440; void*x441; void*x442; void*x443; out void*x444; const void*x445; void*x446; void*x447; BOOL x448; void*x449; void*x450; void*x451; void*x452; void*x453; const void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; SEL x461; void*x462; SEL x463; void*x464; void*x465; void*x466; void*x467; void*x468; const void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; short x478; void*x479; void*x480; void*x481; double x482; void*x483; SEL x484; void*x485; SEL x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; SEL x494; void*x495; SEL x496; void*x497; void*x498; void*x499; long x500; void*x501; long x502; void*x503; out void*x504; BOOL x505; void*x506; void*x507; void*x508; void*x509; void*x510; out void*x511; const void*x512; void*x513; void*x514; BOOL x515; void*x516; void*x517; void*x518; void*x519; void*x520; const void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; struct x530; void*x531; void*x532; void*x533; short x534; void*x535; void*x536; void*x537; const void*x538; void*x539; void*x540; BOOL x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; const void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; struct x558; void*x559; void*x560; void*x561; void*x562; void*x563; in void*x564; int x565; void*x566; out void*x567; in void*x568; void*x569; void*x570; struct x571; void*x572; void*x573; void*x574; short x575; void*x576; void*x577; void*x578; const void*x579; void*x580; void*x581; BOOL x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; long x592; void*x593; out void*x594; in void*x595; void*x596; void*x597; void*x598; void*x599; struct x600; void*x601; void*x602; void*x603; void*x604; void*x605; in void*x606; short x607; void*x608; int x609; void*x610; void*x611; void*x612; in void*x613; void*x614; void*x615; double x616; void*x617; void*x618; void*x619; int x620; void*x621; in void*x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; in void*x647; short x648; void*x649; int x650; void*x651; void*x652; void*x653; in void*x654; void*x655; void*x656; double x657; void*x658; void*x659; void*x660; int x661; void*x662; in void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; BOOL x686; void*x687; void*x688; void*x689; void*x690; void*x691; const void*x692; void*x693; void*x694; char *x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; }*)adaptee;
- (void)beginService;
- (void)doAsync:(id /* block */)arg1;
- (void)doAsync:(id /* block */)arg1 withReply:(id /* block */)arg2;
- (void)endService;
- (id)initInSilo:(id)arg1;
- (BOOL)syncgetDoSync:(id /* block */)arg1;

@end
