/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Vision.framework/Vision
 */

@interface VNImageAnalyzerMultiDetector : VNDetector {
    struct shared_ptr<vision::mod::ImageClassifier_HierarchicalModel> { 
        struct ImageClassifier_HierarchicalModel {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultSceneClassificationHierarchicalModel;
    struct shared_ptr<vision::mod::ImageAnalyzer> { 
        struct ImageAnalyzer {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _imageAnalyzer;
    unsigned long long  _model;
}

+ (id)configurationOptionKeysForDetectorKey;
+ (struct shared_ptr<vision::mod::ImageClassifier_HierarchicalModel> { struct ImageClassifier_HierarchicalModel {} *x1; struct __shared_weak_count {} *x2; })createHierarchicalModelForMultiDetectorModel:(unsigned long long)arg1 requestRevision:(unsigned long long)arg2 error:(id*)arg3;
+ (Class)detectorClassForConfigurationOptions:(id)arg1 error:(id*)arg2;
+ (unsigned long long)modelForRequestDetectionLevel:(unsigned long long)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addClassificationObservationsForSceneRequestRevisionNumber:(unsigned long long)arg1 toArray:(id)arg2 fromSceneLabelsAndConfidences:(const struct vector<std::__1::pair<std::__1::basic_string<char>, float>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, float> > > { struct pair<std::__1::basic_string<char>, float> {} *x1; struct pair<std::__1::basic_string<char>, float> {} *x2; struct __compressed_pair<std::__1::pair<std::__1::basic_string<char>, float> *, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, float> > > { struct pair<std::__1::basic_string<char>, float> {} *x_3_1_1; } x3; }*)arg3;
- (id)_aestheticsObservationsForLastAnalysisWithOptions:(id)arg1 error:(id*)arg2;
- (unsigned int)_analysisTypeForScene:(bool)arg1 sceneprint:(bool)arg2 includingLabelsAndConfidences:(bool)arg3 aesthetics:(bool)arg4 saliencyHeatMap:(bool)arg5;
- (struct __CVBuffer { }*)_createScaledImagePixelBufferFromCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 ofImageBuffer:(id)arg2 forNetworkInputImageSize:(struct _Geometry2D_size2D_ { float x1; float x2; })arg3 imageCropAndScaleOption:(unsigned long long)arg4 options:(id)arg5 error:(id*)arg6;
- (struct __CVBuffer { }*)_createScaledImagePixelBufferFromImageBuffer:(id)arg1 forNetworkInputImageSize:(struct _Geometry2D_size2D_ { float x1; float x2; })arg2 imageCropAndScaleOption:(unsigned long long)arg3 options:(id)arg4 error:(id*)arg5;
- (bool)_getLeafSceneObservations:(id*)arg1 hierarchySceneObservations:(id*)arg2 of32BGRAImageInPixelBufferProvidedByBlock:(id /* block */)arg3 withOptions:(id)arg4 error:(id*)arg5;
- (id)_observationsForScene:(bool)arg1 sceneprint:(bool)arg2 includingLabelsAndConfidences:(bool)arg3 aesthetics:(bool)arg4 saliencyHeatMap:(bool)arg5 of32BGRAImageInPixelBufferProvidedByBlock:(id /* block */)arg6 withOptions:(id)arg7 originalImageSize:(struct CGSize { double x1; double x2; })arg8 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg9 error:(id*)arg10;
- (bool)_performAnalysis:(unsigned int)arg1 on32BGRAImageInPixelBufferProvidedByBlock:(id /* block */)arg2 error:(id*)arg3;
- (bool)_populateLeafSceneObservations:(id)arg1 hierarchySceneObservations:(id)arg2 forLastAnalysisWithOptions:(id)arg3 error:(id*)arg4;
- (id)_saliencyObservationsForLastAnalysisWithRegionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 originalImageSize:(struct CGSize { double x1; double x2; })arg2 options:(id)arg3 error:(id*)arg4;
- (id)_sceneObservationsForLastAnalysisWithOptions:(id)arg1 error:(id*)arg2;
- (id)_sceneprintObservationsForLastAnalysisIncludingLabelsAndConfidencesInSceneprint:(bool)arg1 options:(id)arg2 error:(id*)arg3;
- (void)_tileRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 horizontally:(bool)arg2 vertically:(bool)arg3 windowAspectRatio:(double)arg4 overlapPercentage:(double)arg5 usingBlock:(id /* block */)arg6;
- (id)allSceneLabels;
- (bool)completeInitializationAndReturnError:(id*)arg1;
- (id)processWithOptions:(id)arg1 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 warningRecorder:(id)arg3 error:(id*)arg4;
- (bool)supportsProcessingDevice:(id)arg1;

@end
