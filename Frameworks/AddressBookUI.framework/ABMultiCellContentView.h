/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AddressBookUI.framework/AddressBookUI
 */

@interface ABMultiCellContentView : ABPersonCellContentView <ABResponderDelegate> {
    int  _abCellStyle;
    BOOL  _allowsEditing;
    UITableViewCell * _cell;
    BOOL  _isEditing;
    BOOL  _isEmphasized;
    BOOL  _isHighlighted;
    BOOL  _isImportant;
    UIView * _labelDivider;
    BOOL  _needsReload;
    ABAbstractPropertyGroup * _pg;
    id  _pgInfo;
    int  _property;
    BOOL  _shouldIgnoreEndEditing;
    UIView * _touchedView;
    <ABMultiCellContentViewUpdateDelegate> * _updateDelegate;
    BOOL  _usesCustomPropertyCell;
}

@property (nonatomic) int abCellStyle;
@property (nonatomic) BOOL allowsEditing;
@property (nonatomic) UITableViewCell *cell;
@property (getter=isEditing, nonatomic) BOOL editing;
@property (getter=isEmphasized, nonatomic) BOOL emphasized;
@property (getter=isImportant, nonatomic) BOOL important;
@property (nonatomic, readonly) ABAbstractPropertyGroup *propertyGroup;
@property (nonatomic, retain) id propertyGroupInfo;
@property (nonatomic) BOOL shouldIgnoreEndEditing;
@property (nonatomic) <ABMultiCellContentViewUpdateDelegate> *updateDelegate;
@property (nonatomic) BOOL usesCustomPropertyCell;

+ (Class)classForProperty:(int)arg1;
+ (struct CGSize { float x1; float x2; })layoutSubviewsForView:(id)arg1 usingSize:(struct CGSize { float x1; float x2; })arg2 propertyGroup:(id)arg3 info:(id)arg4 styleProvider:(id)arg5 whenEditing:(BOOL)arg6;
+ (id)reuseIdentifierForPropertyGroup:(id)arg1 info:(id)arg2;
+ (void)setupTextField:(id)arg1 withStyleProvider:(id)arg2;
+ (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1 forPropertyGroup:(id)arg2 info:(id)arg3 styleProvider:(id)arg4 whenEditing:(BOOL)arg5;

- (BOOL)ABTabToNextResponder:(BOOL)arg1 fromView:(id)arg2;
- (int)abCellStyle;
- (BOOL)allowsEditing;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })backgroundRectForView:(id)arg1;
- (id)badgeIconWhenEditing:(BOOL)arg1;
- (BOOL)becomeFirstResponder;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canBeginEditingAnytime;
- (BOOL)canHandleProperty:(int)arg1;
- (BOOL)canResignFirstResponder;
- (id)cell;
- (void)clearTextFieldDelegates:(id)arg1;
- (void)dealloc;
- (id)displayHighlightedTextColor;
- (id)displayTextColor;
- (void)entryField:(id)arg1 didEndEditingForKey:(id)arg2;
- (void)entryField:(id)arg1 valueDidChange:(id)arg2 forKey:(id)arg3;
- (void)entryFieldBeginAttemptBecomeFirstResponder:(id)arg1;
- (void)entryFieldDidBeginEditing:(id)arg1;
- (void)entryFieldEndAttemptBecomeFirstResponder:(id)arg1;
- (BOOL)entryFieldShouldBeginEditing:(id)arg1;
- (BOOL)entryFieldShouldEndEditing:(id)arg1;
- (BOOL)entryFieldShouldReturn:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })focusRectForView:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForLabelDivider;
- (id)hitTestForTouches:(id)arg1 withEvent:(id)arg2;
- (id)init;
- (id)initCommonWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 property:(int)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 property:(int)arg2;
- (BOOL)isEditing;
- (BOOL)isEmphasized;
- (BOOL)isHighlighted;
- (BOOL)isImportant;
- (BOOL)isValidValue:(id)arg1;
- (id)labelTextColorWhenEditing:(BOOL)arg1;
- (void)layoutLabel;
- (void)layoutSubviews;
- (id)newTextFieldWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 tag:(int)arg2 keyboardSettings:(id)arg3 delegate:(id)arg4;
- (id)pickerView;
- (id)propertyGroup;
- (id)propertyGroupInfo;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectForView:(id)arg1;
- (void)reload;
- (void)reloadFromModel;
- (void)reloadIfNeeded:(BOOL)arg1 reloadFromModel:(BOOL)arg2;
- (void)reloadLabelFromModel;
- (BOOL)resignFirstResponder;
- (void)setAbCellStyle:(int)arg1;
- (void)setAllowsEditing:(BOOL)arg1;
- (void)setCell:(id)arg1;
- (void)setEditing:(BOOL)arg1;
- (void)setEditing:(BOOL)arg1 animated:(BOOL)arg2;
- (void)setEmphasized:(BOOL)arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setImportant:(BOOL)arg1;
- (void)setKeyboardSettings:(id)arg1 onTextField:(id)arg2;
- (void)setLabelText:(id)arg1;
- (void)setPropertyGroup:(id)arg1 andInfo:(id)arg2;
- (void)setPropertyGroupInfo:(id)arg1;
- (void)setShouldIgnoreEndEditing:(BOOL)arg1;
- (void)setUpdateDelegate:(id)arg1;
- (void)setUsesCustomPropertyCell:(BOOL)arg1;
- (BOOL)shouldIgnoreEndEditing;
- (BOOL)shouldSendTouchesToSuperviewForHitView:(id)arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1 forPropertyGroup:(id)arg2 info:(id)arg3 styleProvider:(id)arg4 whenEditing:(BOOL)arg5;
- (BOOL)tabToNextResponder:(BOOL)arg1 fromView:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (id)updateDelegate;
- (void)updateSubviewsForNewStateAnimated:(BOOL)arg1;
- (BOOL)usesCustomPropertyCell;
- (id)viewForFirstResponder;
- (BOOL)wantsLabelDivider;

@end
