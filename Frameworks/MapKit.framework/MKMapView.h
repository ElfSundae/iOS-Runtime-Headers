/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

@interface MKMapView : UIView <GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, MKAnnotationManagerDelegate, MKAnnotationMarkerContainer, MKMapGestureControllerDelegate, MKOverlayContainerViewDelegate, MKVariableDelayTapRecognizerDelegate, NSCoding, UIGestureRecognizerDelegate, VKMapViewDelegate, VKPuckAnimatorDelegate> {
    MKAnnotationContainerView *_annotationContainer;
    id /* block */ _annotationCoordinateTest;
    MKMapAnnotationManager *_annotationManager;
    id /* block */ _annotationRectTest;
    int _annotationTrackingZoomStyle;
    UIImageView *_attributionBadgeView;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _attributionInsets;
    MKAttributionLabel *_attributionLabel;
    BOOL _automaticallySnapsToNorth;
    MKBasicMapView *_basicMapView;
    id _bottomLayoutGuide;
    MKMapCamera *_camera;
    MKCompassView *_compassView;
    BOOL _compassVisible;
    UIView *_contentView;
    unsigned long long _currentFlyoverAnimationID;
    id /* block */ _debugConsoleAdditionalInfoProvider;
    _MKEnvironmentLabel *_debugCurrentEnvironmentLabel;
    MKDebugLocationConsole *_debugLocationConsole;
    NSTimer *_defaultLocationTimer;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    } _edgeInsets;
    NSLayoutConstraint *_edgeInsetsBottomConstraint;
    UILayoutGuide *_edgeInsetsGuide;
    NSLayoutConstraint *_edgeInsetsLeftConstraint;
    NSLayoutConstraint *_edgeInsetsRightConstraint;
    NSLayoutConstraint *_edgeInsetsTopConstraint;
    struct { 
        unsigned int changingRegion : 1; 
        unsigned int debugViewHeading : 1; 
        unsigned int draggingInterrupted : 1; 
        unsigned int didStartSmoothScrolling : 1; 
        unsigned int hasRenderedSomething : 1; 
        unsigned int ignoreHeadingUpdates : 1; 
        unsigned int ignoreLocationUpdates : 1; 
        unsigned int isSuspended : 1; 
        unsigned int forceDisplayEffects : 1; 
        unsigned int longPressing : 1; 
        unsigned int persistFixedUserLocation : 1; 
        unsigned int regionChangeIsAnimated : 1; 
        unsigned int rotationSupported : 1; 
        unsigned int scrollEnabled : 1; 
        unsigned int scrolling : 1; 
        unsigned int showHeadingIndicator : 1; 
        unsigned int alwaysShowHeadingIndicator : 1; 
        unsigned int useVehicleHeading : 1; 
        unsigned int showsUserLocation : 1; 
        unsigned int zoomEnabled : 1; 
        unsigned int zoomIsAnimated : 1; 
        unsigned int zooming : 1; 
        unsigned int isChangingViewSize : 1; 
        unsigned int isChangingEdgeInsets : 1; 
        unsigned int showsAttribution : 1; 
        unsigned int showsAttributionBadge : 1; 
        unsigned int useOld2DAnnotationContainer : 1; 
        unsigned int rotating : 1; 
        unsigned int pitching : 1; 
        unsigned int rotateEnabled : 1; 
        unsigned int pitchEnabled : 1; 
        unsigned int showsBuildings : 1; 
        unsigned int showsPointsOfInterest : 1; 
        unsigned int showsTraffic : 1; 
        unsigned int hasPendingCameraChange : 1; 
        unsigned int currentRegionChangeShouldUpdateAnnotationsMidstream : 1; 
        unsigned int backdropViewQualityChangingDisabled : 1; 
        unsigned int canSelectPOIs : 1; 
        unsigned int canSelectAllLabels : 1; 
        unsigned int vectorKitConsoleEnabled : 1; 
        unsigned int edgeInsetsAreExplicit : 1; 
        unsigned int locationPropagationEnabled : 1; 
        unsigned int userInteractionPausesLocationUpdates : 1; 
        unsigned int locationPulseEnabled : 1; 
        unsigned int shouldSplitRouteLine : 1; 
        unsigned int shouldAnimatePositionWithRouteMatch : 1; 
        unsigned int clearUserLocationOnLocationReset : 1; 
        unsigned int showsCurrentEnvironmentName : 1; 
        unsigned int processingUserLocationUpdate : 1; 
        unsigned int changingMapType : 1; 
        unsigned int userRotatedAwayFromVerticalYaw : 1; 
        unsigned int goingToDefaultLocation : 1; 
        unsigned int delayLocationUpdatesUntilInitialRendering : 1; 
        unsigned int isDraggingAnnotationView : 1; 
        unsigned int showsPressedLabelMarkerEffect : 1; 
        unsigned int shouldLoadFallbackTiles : 1; 
        unsigned int iconPixelAlignmentExplicitlyDisabled : 1; 
        unsigned int userDidRotateDuringCurrentRegionChange : 1; 
        unsigned int isTwoFingerLongPressing : 1; 
        unsigned int delegateShouldReceiveTouch : 1; 
        unsigned int delegateShouldDelayTapResponse : 1; 
        unsigned int delegateDidUpdateUserLocation : 1; 
        unsigned int delegateWillChangeRegion : 1; 
        unsigned int delegateDidChangeUserTrackingMode : 1; 
        unsigned int delegateDidChangeUserTrackingModeButton : 1; 
    } _flags;
    BOOL _forceLayoutOnBoundsChange;
    MKMapGestureController *_gestureController;
    BOOL _hasSetLayoutMargins;
    double _heading;
    int _interactionMode;
    MKMapViewInternal *_internal;
    UIGestureRecognizer *_locationConsoleGesture;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    unsigned int _mapType;
    VKMapView *_mapView;
    UITapGestureRecognizer *_nonselectingTapGestureRecognizer;
    int _originalLoopRate;
    MKOverlayContainerView *_overlayContainer;
    int _preGesturingLoopRate;
    VKLabelMarker *_pressedLabelMarker;
    id /* block */ _regionSetterWhenSized;
    VKRouteContext *_routeContext;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> *_safeDelegate;
    MKScaleView *_scaleView;
    BOOL _scaleVisible;
    UIView *_scrollContainerView;
    id /* block */ _selectAnnotationViewAfterRedrawBlock;
    UITapGestureRecognizer *_selectingTapGestureRecognizer;
    id /* block */ _showCalloutAfterRegionChangeBlock;
    BOOL _showsCompass;
    BOOL _showsScale;
    BOOL _showsScaleDuringZoom;
    NSTimer *_startEffectsTimer;
    unsigned int _suspendedEffectsCount;
    id _topLayoutGuide;
    <MKMapViewDelegate><MKMapViewDelegatePrivate> *_unsafeDelegate;
    unsigned int _userInteractionDisabledCount;
    MKUserLocation *_userLocation;
    VKPuckAnimator *_userLocationAnimator;
    int _userTrackingMode;
    UITextView *_vectorKitDebugView;
    UIPanGestureRecognizer *_vectorKitStyleDebugGestureRecognizer;
    double _verticalYawOverride;
}

@property (nonatomic) BOOL _annotationViewsAreAddedImmediately;
@property (nonatomic, readonly) float _zoomLevel;
@property (nonatomic, readonly) float _zoomScale;
@property (getter=_additionalManifestConfiguration, setter=_setAdditionalManifestConfiguration:, nonatomic, retain) GEOResourceManifestConfiguration *additionalManifestConfiguration;
@property (getter=_allowsPopoverWhenNotInWindow, setter=_setAllowsPopoverWhenNotInWindow:, nonatomic) BOOL allowsPopoverWhenNotInWindow;
@property (getter=_alwaysShowHeadingIndicator, setter=_setAlwaysShowHeadingIndicator:, nonatomic) BOOL alwaysShowHeadingIndicator;
@property (getter=_annotationTrackingZoomStyle, setter=_setAnnotationTrackingZoomStyle:, nonatomic) int annotationTrackingZoomStyle;
@property (getter=_annotationViews, nonatomic, readonly) NSArray *annotationViews;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } annotationVisibleRect;
@property (nonatomic, readonly) NSArray *annotations;
@property (getter=_applicationState, setter=_setApplicationState:, nonatomic) int applicationState;
@property (getter=_attributionInsets, setter=_setAttributionInsets:, nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } attributionInsets;
@property (getter=_automaticallySnapsToNorth, setter=_setAutomaticallySnapsToNorth:, nonatomic) BOOL automaticallySnapsToNorth;
@property (getter=_calloutContentRect, nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } calloutContentRect;
@property (getter=_calloutPopoverController, nonatomic, readonly) UIPopoverController *calloutPopoverController;
@property (getter=_calloutPopoverTargetRect, nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } calloutPopoverTargetRect;
@property (nonatomic, copy) MKMapCamera *camera;
@property (getter=_canEnter3DMode, nonatomic, readonly) BOOL canEnter3DMode;
@property (getter=_canEnterNightMode, nonatomic, readonly) BOOL canEnterNightMode;
@property (getter=_canSelectAllLabels, setter=_setCanSelectAllLabels:, nonatomic) BOOL canSelectAllLabels;
@property (getter=_canSelectPOIs, setter=_setCanSelectPOIs:, nonatomic) BOOL canSelectPOIs;
@property (getter=_canShowFlyover, nonatomic, readonly) BOOL canShowFlyover;
@property (nonatomic) struct { double x1; double x2; } centerCoordinate;
@property (getter=_isChangingRegionForGesture, nonatomic, readonly) BOOL changingRegionForGesture;
@property (getter=isCompassEnabled, nonatomic) BOOL compassEnabled;
@property (getter=_currentFlyoverAnimationID, setter=_setCurrentFlyoverAnimationID:, nonatomic) unsigned long long currentFlyoverAnimationID;
@property (getter=_debugConsole, nonatomic, readonly) MKDebugLocationConsole *debugConsole;
@property (getter=_debugConsoleAdditionalInfoProvider, setter=_setDebugConsoleAdditionalInfoProvider:, nonatomic, copy) id /* block */ debugConsoleAdditionalInfoProvider;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MKMapViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=_detailedDescription, nonatomic, readonly) NSString *detailedDescription;
@property (getter=_doubleTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (getter=_edgeInsets, setter=_setEdgeInsets:, nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } edgeInsets;
@property (getter=_forceDisplayEffects, setter=_setForceDisplayEffects:, nonatomic) BOOL forceDisplayEffects;
@property (getter=_isHandlingNonselectingTap, nonatomic, readonly) BOOL handlingNonselectingTap;
@property (nonatomic, readonly) BOOL hasUserLocation;
@property (readonly) unsigned int hash;
@property (nonatomic) BOOL ignoreLocationUpdates;
@property (getter=_interactionMode, setter=_setInteractionMode:, nonatomic) int interactionMode;
@property (getter=_labelEdgeInsets, setter=_setLabelEdgeInsets:, nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } labelEdgeInsets;
@property (getter=_localizeLabels, setter=_setLocalizeLabels:, nonatomic) BOOL localizeLabels;
@property (getter=_isLocationPulseEnabled, setter=_setLocationPulseEnabled:, nonatomic) BOOL locationPulseEnabled;
@property (getter=_longPressGestureRecognizer, nonatomic, readonly) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (getter=_mapLayer, nonatomic, readonly) VKMapView *mapLayer;
@property (nonatomic, readonly) GEOMapRegion *mapRegion;
@property (getter=_mapRegionOfInterest, nonatomic, readonly) GEOMapRegion *mapRegionOfInterest;
@property (nonatomic) unsigned int mapType;
@property (getter=_maximumZoomLevel, nonatomic, readonly) float maximumZoomLevel;
@property (getter=_minimumZoomLevel, nonatomic, readonly) float minimumZoomLevel;
@property (getter=_nonselectingTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *nonselectingTapGestureRecognizer;
@property (nonatomic, readonly) NSArray *overlays;
@property (getter=_panWithMomentum, setter=_setPanWithMomentum:, nonatomic) BOOL panWithMomentum;
@property (getter=_panningGestureRecognizer, nonatomic, readonly) UIPanGestureRecognizer *panningGestureRecognizer;
@property (getter=_pinchGestureRecognizer, nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (getter=isPitchEnabled, nonatomic) BOOL pitchEnabled;
@property (getter=_isPitched, nonatomic, readonly) BOOL pitched;
@property (nonatomic, retain) CLLocation *predictedUserLocation;
@property (getter=_pressureGestureRecognizer, nonatomic, readonly) UIGestureRecognizer *pressureGestureRecognizer;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } region;
@property (getter=isRegionChanging, nonatomic, readonly) BOOL regionChanging;
@property (nonatomic) BOOL rendersInBackground;
@property (getter=isRotateEnabled, nonatomic) BOOL rotateEnabled;
@property (getter=_rotationGestureRecognizer, nonatomic, readonly) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (getter=isScaleEnabled, nonatomic) BOOL scaleEnabled;
@property (getter=isScrollEnabled, nonatomic) BOOL scrollEnabled;
@property (nonatomic, copy) NSArray *selectedAnnotations;
@property (getter=_selectedLabelMarker, nonatomic, readonly) VKLabelMarker *selectedLabelMarker;
@property (getter=_selectingTapGestureRecognizer, nonatomic, readonly) UITapGestureRecognizer *selectingTapGestureRecognizer;
@property (getter=_shouldAnimatePositionWithRouteMatch, setter=_setShouldAnimatePositionWithRouteMatch:, nonatomic) BOOL shouldAnimatePositionWithRouteMatch;
@property (getter=_shouldDelayLocationUpdatesUntilInitialRendering, setter=_setShouldDelayLocationUpdatesUntilInitialRendering:, nonatomic) BOOL shouldDelayLocationUpdatesUntilIntialRendering;
@property (getter=_shouldLoadFallbackTiles, setter=_setShouldLoadFallbackTiles:, nonatomic) BOOL shouldLoadFallbackTiles;
@property (getter=_shouldSplitRouteLine, setter=_setShouldSplitRouteLine:, nonatomic) BOOL shouldSplitRouteLine;
@property (getter=_isShowingFlyover, nonatomic, readonly) BOOL showingFlyover;
@property (nonatomic) BOOL showsAttribution;
@property (nonatomic) BOOL showsAttributionBadge;
@property (nonatomic) BOOL showsBuildings;
@property (nonatomic) BOOL showsCompass;
@property (getter=_showsCurrentEnvironmentName, setter=_setShowsCurrentEnvironmentName:, nonatomic) BOOL showsCurrentEnvironmentName;
@property (getter=_showsNightMode, setter=_setShowsNightMode:, nonatomic) BOOL showsNightMode;
@property (nonatomic) BOOL showsPointsOfInterest;
@property (getter=_showsPressedLabelMarkerEffect, setter=_setShowsPressedLabelMarkerEffect:, nonatomic) BOOL showsPressedLabelMarkerEffect;
@property (nonatomic) BOOL showsScale;
@property (getter=_showsScaleDuringZoom, setter=_setShowsScaleDuringZoom:, nonatomic) BOOL showsScaleDuringZoom;
@property (nonatomic) BOOL showsTraffic;
@property (getter=_showsTrafficIncidents, setter=_setShowsTrafficIncidents:, nonatomic) BOOL showsTrafficIncidents;
@property (nonatomic) BOOL showsUserLocation;
@property (readonly) Class superclass;
@property (getter=_transitLineMarkersInCurrentViewport, nonatomic, readonly) NSArray *transitLineMarkersInCurrentViewport;
@property (getter=_twoFingerPanGestureRecognizer, nonatomic, readonly) UIPanGestureRecognizer *twoFingerPanGestureRecognizer;
@property (getter=_userInteractionPausesLocationUpdates, setter=_setUserInteractionPausesLocationUpdates:, nonatomic) BOOL userInteractionPausesLocationUpdates;
@property (nonatomic, readonly) MKUserLocation *userLocation;
@property (nonatomic, readonly, retain) MKAnnotationView *userLocationView;
@property (getter=isUserLocationVisible, nonatomic, readonly) BOOL userLocationVisible;
@property (nonatomic) int userTrackingMode;
@property (getter=_userTrackingZoomStyle, setter=_setUserTrackingZoomStyle:, nonatomic) int userTrackingZoomStyle;
@property (getter=_isVectorKitConsoleEnabled, setter=_setVectorKitConsoleEnabled:, nonatomic) BOOL vectorKitConsoleEnabled;
@property (getter=_isVectorKitStyleDebugEnabled, setter=_setVectorKitStyleDebugEnabled:, nonatomic) BOOL vectorKitStyleDebugEnabled;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } visibleMapRect;
@property (getter=_visibleTileSets, nonatomic, readonly) NSArray *visibleTileSets;
@property (getter=isZoomEnabled, nonatomic) BOOL zoomEnabled;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectThatFitsViewBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 mapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2 viewInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg3 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg4 minZoomLevel:(float)arg5 maxZoomLevel:(float)arg6 snapToZoomLevel:(BOOL)arg7;
+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_regionThatFitsMapType:(unsigned int)arg1 viewSize:(struct CGSize { float x1; float x2; })arg2 viewInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg3 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg4 region:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg5 minZoomLevel:(float)arg6 maxZoomLevel:(float)arg7 snapToZoomLevel:(BOOL)arg8;
+ (unsigned int)minZoomLevelForMapType:(unsigned int)arg1 viewSize:(struct CGSize { float x1; float x2; })arg2;
+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned int)arg1 viewSize:(struct CGSize { float x1; float x2; })arg2 edgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg3 region:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg4;
+ (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFitsMapType:(unsigned int)arg1 viewSize:(struct CGSize { float x1; float x2; })arg2 region:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (void)setRendersInBackgroundByDefault:(BOOL)arg1;

- (void).cxx_destruct;
- (void)_addAnnotation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_addAnnotations:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)_addDebugGesture;
- (void)_addPersistentVectorOverlay:(id)arg1;
- (void)_addSetRegionBlockWhenSized:(id /* block */)arg1;
- (void)_addVectorOverlay:(id)arg1;
- (void)_addViewsForAnnotations:(id)arg1;
- (id)_additionalManifestConfiguration;
- (BOOL)_allowsPopoverWhenNotInWindow;
- (BOOL)_alwaysShowHeadingIndicator;
- (id)_annotationAtPoint:(struct CGPoint { float x1; float x2; })arg1 avoidCurrent:(BOOL)arg2;
- (int)_annotationTrackingZoomStyle;
- (void)_annotationViewDragStateChanged:(id)arg1;
- (id)_annotationViews;
- (BOOL)_annotationViewsAreAddedImmediately;
- (int)_applicationState;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_attributionInsets;
- (BOOL)_automaticallySnapsToNorth;
- (float)_boundedZoomLevel:(float)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_calloutContentRect;
- (id)_calloutPopoverController;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_calloutPopoverTargetRect;
- (id)_camera;
- (BOOL)_canEnter3DMode;
- (BOOL)_canEnterNightMode;
- (BOOL)_canSelectAllLabels;
- (BOOL)_canSelectPOIs;
- (BOOL)_canShowAnimationForSearchResultWithMapRegion:(id)arg1;
- (BOOL)_canShowFlyover;
- (BOOL)_canZoomIn;
- (BOOL)_canZoomOut;
- (struct { double x1; double x2; })_centerMapPoint;
- (struct CGPoint { float x1; float x2; })_centerPoint;
- (void)_clearFixedUserLocation;
- (void)_clearGestureRecognizers;
- (void)_clearLayoutGuides;
- (void)_clearRouteContext;
- (BOOL)_clearUserLocationOnLocationReset;
- (id)_commonInitFromIB:(BOOL)arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(BOOL)arg3;
- (void)_configureGestureRecognizers:(id)arg1;
- (struct CGPoint { float x1; float x2; })_convertCoordinate:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGPoint { float x1; float x2; })_convertMapPoint:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct { double x1; double x2; })_convertPoint:(struct CGPoint { float x1; float x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { double x1; double x2; })_convertPoint:(struct CGPoint { float x1; float x2; })arg1 toMapPointFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_convertRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_currentEnvironmentNameFrame;
- (unsigned long long)_currentFlyoverAnimationID;
- (id)_debugConsole;
- (id /* block */)_debugConsoleAdditionalInfoProvider;
- (double)_defaultAnimationDurationForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2;
- (id)_defaultLocationTimer;
- (void)_deselectLabelMarkerAnimated:(BOOL)arg1;
- (void)_deselectTransitLineMarker;
- (id)_detailedDescription;
- (void)_didChangeRegionMidstream:(BOOL)arg1;
- (void)_didEndZoom;
- (void)_displayWorld;
- (double)_distanceFromPoint:(struct CGPoint { float x1; float x2; })arg1 toPoint:(struct CGPoint { float x1; float x2; })arg2 fromView:(id)arg3 withPrecision:(int)arg4;
- (id)_doubleTapGestureRecognizer;
- (void)_dropDraggingAnnotationView:(BOOL)arg1;
- (double)_durationFoCamera:(id)arg1;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_edgeInsets;
- (void)_endZoomForExternalGesture;
- (void)_enter3DMode;
- (void)_exit3DMode;
- (id)_findLayoutGuideVC;
- (void)_fixUserLocationFromPresentationValue;
- (BOOL)_forceDisplayEffects;
- (void)_forceFrame;
- (double)_goToCenterCoordinate:(struct { double x1; double x2; })arg1 zoomLevel:(float)arg2 animated:(BOOL)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(BOOL)arg3;
- (void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(BOOL)arg3 completionHandler:(id /* block */)arg4;
- (void)_handleSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_handleStyleDebugGesture:(id)arg1;
- (void)_handleTapToDeselect:(id)arg1;
- (void)_handleTapToSelect:(id)arg1;
- (BOOL)_iconsShouldAlignToPixels;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(BOOL)arg3;
- (void)_insertSubview:(id)arg1;
- (int)_interactionMode;
- (int)_interfaceOrientation;
- (BOOL)_isCalloutExpanded;
- (BOOL)_isChangingRegionForGesture;
- (BOOL)_isHandlingNonselectingTap;
- (BOOL)_isHandlingUserEvent;
- (BOOL)_isLocationPropagationEnabled;
- (BOOL)_isLocationPulseEnabled;
- (BOOL)_isPitched;
- (BOOL)_isShowingFlyover;
- (BOOL)_isUserLocationInView:(BOOL)arg1;
- (BOOL)_isUserLocationViewCentered:(float)arg1;
- (BOOL)_isUsingDevResourceStyleSheet;
- (BOOL)_isVectorKitConsoleEnabled;
- (BOOL)_isVectorKitStyleDebugEnabled;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_labelEdgeInsets;
- (id)_labelMarkerAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)_labelMarkersInCurrentViewport;
- (id)_labelMarkersInCurrentViewportForType:(int)arg1;
- (void)_layoutAttribution;
- (BOOL)_localizeLabels;
- (id)_longPressGestureRecognizer;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; })_mapDisplayStyle;
- (id)_mapLayer;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectWithFraction:(double)arg1 ofVisible:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_mapRegionOfInterest;
- (id)_mapRegionWithCenterCoordinate:(struct { double x1; double x2; })arg1 zoomScale:(float)arg2;
- (float)_maximumZoomLevel;
- (float)_minimumZoomLevel;
- (BOOL)_mustWaitUntilSized;
- (id)_nonselectingTapGestureRecognizer;
- (double)_panDurationFromPoint:(struct CGPoint { float x1; float x2; })arg1 toPoint:(struct CGPoint { float x1; float x2; })arg2;
- (BOOL)_panWithMomentum;
- (id)_panningGestureRecognizer;
- (void)_pauseFlyoverAnimation;
- (void)_pauseUserLocationUpdates;
- (void)_performFlyoverAnimation:(id)arg1;
- (void)_performFlyoverAnimation:(id)arg1 animateToStart:(BOOL)arg2;
- (id)_pinchGestureRecognizer;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_prepareFlyoverAnimation:(id)arg1 completion:(id /* block */)arg2;
- (id)_pressureGestureRecognizer;
- (void)_removePersistentVectorOverlay:(id)arg1;
- (void)_removeVectorOverlay:(id)arg1;
- (void)_replaceAnnotation:(id)arg1 withAnnotation:(id)arg2;
- (void)_resetMaximumZoomLevel;
- (void)_restoreViewportFromDictionary:(id)arg1;
- (void)_resumeFlyoverAnimation;
- (void)_resumeUserInteraction;
- (void)_resumeUserLocationUpdates:(BOOL)arg1;
- (BOOL)_roomForCompass;
- (id)_rotationGestureRecognizer;
- (BOOL)_rotationPossible;
- (int)_roundedZoomLevel;
- (void)_selectAnnotation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)_selectLabelMarker:(id)arg1 animated:(BOOL)arg2;
- (void)_selectLabelMarker:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)_selectTransitLineMarker:(id)arg1;
- (void)_selectTransitLineMarkerWithFeatureID:(unsigned long long)arg1;
- (void)_selectUserLocationTypeWithDeltaZoomLevel:(float)arg1;
- (id)_selectedLabelMarker;
- (id)_selectedTransitLineIDs;
- (id)_selectingTapGestureRecognizer;
- (void)_setAdditionalManifestConfiguration:(id)arg1;
- (void)_setAllowsPopoverWhenNotInWindow:(BOOL)arg1;
- (void)_setAlwaysShowHeadingIndicator:(BOOL)arg1;
- (void)_setAnnotationTrackingZoomStyle:(int)arg1;
- (void)_setApplicationState:(int)arg1;
- (void)_setAttributionInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)_setAutomaticallySnapsToNorth:(BOOL)arg1;
- (void)_setCamera:(id)arg1;
- (void)_setCamera:(id)arg1 animated:(BOOL)arg2;
- (void)_setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id /* block */)arg7;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timing:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (void)_setCamera:(id)arg1 duration:(double)arg2 timingCurve:(int)arg3;
- (void)_setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)_setCanSelectAllLabels:(BOOL)arg1;
- (void)_setCanSelectPOIs:(BOOL)arg1;
- (void)_setClearUserLocationOnLocationReset:(BOOL)arg1;
- (void)_setCompassVisible:(BOOL)arg1 animated:(BOOL)arg2;
- (void)_setCurrentFlyoverAnimationID:(unsigned long long)arg1;
- (void)_setDebugConsoleAdditionalInfoProvider:(id /* block */)arg1;
- (void)_setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)_setEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1 explicit:(BOOL)arg2;
- (void)_setForceDisplayEffects:(BOOL)arg1;
- (void)_setInteractionMode:(int)arg1;
- (void)_setLabelEdgeInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)_setLocalizeLabels:(BOOL)arg1;
- (void)_setLocationPropagationEnabled:(BOOL)arg1;
- (void)_setLocationPulseEnabled:(BOOL)arg1;
- (void)_setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; })arg1;
- (void)_setMapType:(unsigned int)arg1 animated:(BOOL)arg2;
- (void)_setMapType:(unsigned int)arg1 onInit:(BOOL)arg2 animated:(BOOL)arg3;
- (void)_setMaximumZoomLevel:(float)arg1;
- (void)_setPanWithMomentum:(BOOL)arg1;
- (void)_setRouteContextForRoute:(id)arg1;
- (void)_setRouteContextInspectedLegIndex:(unsigned int)arg1 inspectedStepIndex:(unsigned int)arg2;
- (void)_setSafeDelegate:(id)arg1;
- (void)_setShouldAnimatePositionWithRouteMatch:(BOOL)arg1;
- (void)_setShouldDelayLocationUpdatesUntilInitialRendering:(BOOL)arg1;
- (void)_setShouldLoadFallbackTiles:(BOOL)arg1;
- (void)_setShouldSplitRouteLine:(BOOL)arg1;
- (void)_setShowHeadingIndicator:(BOOL)arg1;
- (void)_setShowsCurrentEnvironmentName:(BOOL)arg1;
- (void)_setShowsNightMode:(BOOL)arg1;
- (void)_setShowsPressedLabelMarkerEffect:(BOOL)arg1;
- (void)_setShowsScaleDuringZoom:(BOOL)arg1;
- (void)_setShowsTraffic:(BOOL)arg1;
- (void)_setShowsTrafficIncidents:(BOOL)arg1;
- (void)_setTracePlaybackSpeedMultiplier:(double)arg1;
- (void)_setUseVehicleHeading:(BOOL)arg1;
- (void)_setUserInteractionPausesLocationUpdates:(BOOL)arg1;
- (void)_setUserTrackingMode:(int)arg1 animated:(BOOL)arg2 fromTrackingButton:(BOOL)arg3;
- (void)_setUserTrackingZoomStyle:(int)arg1;
- (void)_setVectorKitConsoleEnabled:(BOOL)arg1;
- (void)_setVectorKitStyleDebugEnabled:(BOOL)arg1;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2 completionHandler:(id /* block */)arg3;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 duration:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)_setZoomScale:(float)arg1 centerCoordinate:(struct { double x1; double x2; })arg2 duration:(double)arg3 animated:(BOOL)arg4;
- (void)_setZoomScale:(float)arg1 centerMapPoint:(struct { double x1; double x2; })arg2 duration:(double)arg3 animated:(BOOL)arg4;
- (BOOL)_shouldAnimatePositionWithRouteMatch;
- (BOOL)_shouldAnimatePropertyWithKey:(id)arg1;
- (BOOL)_shouldCalculateAnimationDuration;
- (BOOL)_shouldDelayLocationUpdatesUntilInitialRendering;
- (BOOL)_shouldDisplayScaleForCurrentRegion;
- (BOOL)_shouldLoadFallbackTiles;
- (BOOL)_shouldSplitRouteLine;
- (void)_showAnimationAtCoordinate:(struct { double x1; double x2; })arg1 withMapRegion:(id)arg2;
- (BOOL)_showHeadingIndicator;
- (void)_showOrHideScaleIfNecessary:(BOOL)arg1;
- (BOOL)_showsCurrentEnvironmentName;
- (BOOL)_showsNightMode;
- (BOOL)_showsPressedLabelMarkerEffect;
- (BOOL)_showsScaleDuringZoom;
- (BOOL)_showsTraffic;
- (BOOL)_showsTrafficIncidents;
- (void)_sizeDidChangeWithCenterCoordinate:(struct { double x1; double x2; })arg1;
- (void)_sizeWillChange;
- (void)_snapToNorthIfNecessary;
- (void)_snapToTrueNorthAndCallBack:(BOOL)arg1;
- (void)_startEffects;
- (id)_startEffectsTimer;
- (void)_startFlyoverTourAnimation:(unsigned long long)arg1 duration:(double)arg2 completion:(id /* block */)arg3;
- (void)_startPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_startTrackingHeading;
- (void)_startZoomForExternalGesture;
- (void)_stopEffects;
- (void)_stopFlyoverAnimation;
- (void)_stopPanningAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_stopTrackingHeading;
- (BOOL)_supportsVKMapType:(int)arg1;
- (void)_suspendUserInteraction;
- (id)_transitLineMarkerForFeatureID:(unsigned long long)arg1;
- (id)_transitLineMarkersForSelectionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)_transitLineMarkersInCurrentViewport;
- (id)_twoFingerPanGestureRecognizer;
- (void)_updateAttribution;
- (void)_updateCameraState;
- (void)_updateCompassPosition;
- (void)_updateCompassVisibility;
- (void)_updateContentBounds;
- (void)_updateCourseForMapViewHeading:(id)arg1;
- (void)_updateEffects;
- (void)_updateEnvironmentLabelText;
- (void)_updateFallbackTileLoading;
- (void)_updateFromCamera:(id)arg1;
- (void)_updateFromCamera:(id)arg1 duration:(double)arg2 timing:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (void)_updateHeading:(id)arg1 animated:(BOOL)arg2;
- (void)_updateHeadingIndicatorAnimated:(BOOL)arg1;
- (void)_updateHeadingOrientation;
- (void)_updateIconsShouldAlignToPixels;
- (void)_updateInsets;
- (void)_updateLocationConsole;
- (void)_updatePanWithTranslation:(struct CGPoint { float x1; float x2; })arg1;
- (void)_updateRotationAttributes;
- (BOOL)_updateRotationSupported;
- (void)_updateScale;
- (void)_updateScalePosition;
- (void)_updateScrollContainerView:(BOOL)arg1;
- (void)_updateScrollingAndGestures;
- (void)_updateShouldDisplayEffects;
- (void)_updateShowHeadingIndicator;
- (void)_updateUserLocation:(id)arg1 routeMatch:(id)arg2;
- (void)_updateUserLocationViewWithLocation:(id)arg1 hadUserLocation:(BOOL)arg2;
- (void)_updateVectorKitConsoleFrameWithEdgeInsets;
- (BOOL)_useVehicleHeading;
- (BOOL)_userInteractionPausesLocationUpdates;
- (BOOL)_userLocationWithinVisibleMapBounds;
- (int)_userTrackingZoomStyle;
- (int)_viewIndexForSubview:(id)arg1;
- (id)_viewportDictionary;
- (id)_visibleTileSets;
- (void)_willChangeRegionAnimated:(BOOL)arg1;
- (void)_willChangeStatusBarFrame:(id)arg1;
- (void)_willStartZoom:(BOOL)arg1;
- (void)_zoomIn;
- (void)_zoomInWithCompletionHandler:(id /* block */)arg1;
- (float)_zoomLevel;
- (float)_zoomLevelForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(BOOL)arg2;
- (float)_zoomLevelForRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 includeAccessoryPadding:(BOOL)arg2;
- (void)_zoomOut;
- (void)_zoomOutWithCompletionHandler:(id /* block */)arg1;
- (struct { float x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_zoomRegionForMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2 maxZoomLevel:(int)arg3 minZoomLevel:(int)arg4;
- (float)_zoomScale;
- (float)_zoomScaleForMapRegion:(id)arg1;
- (void)_zoomWithAmount:(double)arg1;
- (void)_zoomWithAmount:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotationRepresentation:(id)arg1 allowAnimation:(BOOL)arg2;
- (void)addAnnotations:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addOverlay:(id)arg1 level:(int)arg2;
- (void)addOverlays:(id)arg1;
- (void)addOverlays:(id)arg1 level:(int)arg2;
- (void)annotationContainer:(id)arg1 annotationView:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (float)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(struct { double x1; double x2; })arg2 maxDistance:(float*)arg3;
- (void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(struct CGPoint { float x1; float x2; })arg2 annotationCoordinate:(struct { double x1; double x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)annotationContainerDidAnimateBubble:(id)arg1;
- (void)annotationContainerDidDropPins:(id)arg1;
- (void)annotationContainerDidFinishMapsTransitionExpanding:(id)arg1;
- (BOOL)annotationContainerIsRotated:(id)arg1;
- (BOOL)annotationContainerShouldAlignToPixels:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })annotationContainerVisibleRect:(id)arg1;
- (void)annotationContainerWillAnimateBubble:(id)arg1;
- (void)annotationContainerWillDropPins:(id)arg1;
- (float)annotationContainerZoomScale:(id)arg1;
- (id /* block */)annotationCoordinateTest;
- (void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2;
- (void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2;
- (void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2;
- (id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2;
- (void)annotationManager:(id)arg1 willDeselectAnnotationRepresentation:(id)arg2;
- (id /* block */)annotationRectTest;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })annotationVisibleRect;
- (id)annotations;
- (id)annotationsInMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationDidFinishSuspensionSnapshot:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })attributionFrame;
- (id)beginStoppingEffects;
- (void)calloutDidAppearForAnnotationView:(id)arg1 inContainer:(id)arg2;
- (BOOL)calloutViewContainsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)camera;
- (BOOL)canRotateForHeading;
- (struct { double x1; double x2; })centerCoordinate;
- (id)compassView;
- (id)compassVisibilityAnimation;
- (BOOL)compassVisible;
- (void)contentSizeCategoryDidChange:(id)arg1;
- (struct CGPoint { float x1; float x2; })convertCoordinate:(struct { double x1; double x2; })arg1 toPointToView:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (struct { double x1; double x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toCoordinateFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toMapRectFromView:(id)arg2;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toRegionFromView:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 toRectToView:(id)arg2;
- (id)createDrawableForOverlay:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1;
- (void)deselectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)deselectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2;
- (void)deviceOrientationDidChange:(id)arg1;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forViewPrintFormatter:(id)arg2;
- (BOOL)drawsBlackOnWhiteScale;
- (BOOL)effectsEnabled;
- (void)enableMapRotationIfNeeded;
- (void)encodeWithCoder:(id)arg1;
- (void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2;
- (void)exchangeOverlayAtIndex:(unsigned int)arg1 withOverlayAtIndex:(unsigned int)arg2;
- (void)geoDefaultsDidChange:(id)arg1;
- (BOOL)gestureController:(id)arg1 shouldReceiveTouch:(id)arg2;
- (double)gestureController:(id)arg1 shouldWaitForNextTapForDuration:(double)arg2 afterTouch:(id)arg3;
- (struct CGPoint { float x1; float x2; })gestureController:(id)arg1 smartAimingPointForPoint:(struct CGPoint { float x1; float x2; })arg2;
- (void)gestureControllerDidStopPanning:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerDidStopPanningDecelerating:(id)arg1;
- (void)gestureControllerDidStopRotating:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerDidStopRotatingDecelerating:(id)arg1;
- (void)gestureControllerDidStopTilting:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)gestureControllerDidStopTiltingDecelerating:(id)arg1;
- (void)gestureControllerDidStopTwoFingerLongPress:(id)arg1;
- (void)gestureControllerDidStopUserInteraction:(id)arg1;
- (void)gestureControllerDidStopZooming:(id)arg1 direction:(int)arg2 willDecelerate:(BOOL)arg3;
- (void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(int)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })gestureControllerSignificantViewFrame:(id)arg1;
- (void)gestureControllerWillStartPanning:(id)arg1;
- (void)gestureControllerWillStartRotating:(id)arg1;
- (void)gestureControllerWillStartTilting:(id)arg1;
- (void)gestureControllerWillStartTwoFingerLongPress:(id)arg1;
- (void)gestureControllerWillStartUserInteraction:(id)arg1;
- (void)gestureControllerWillStartZooming:(id)arg1 animated:(BOOL)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)goToDefaultLocation;
- (void)handleCompassTap:(id)arg1;
- (void)handleLongPress:(id)arg1;
- (BOOL)hasRenderedSomething;
- (BOOL)hasUserLocation;
- (BOOL)ignoreLocationUpdates;
- (id)initFromIBWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertOverlay:(id)arg1 atIndex:(unsigned int)arg2 level:(int)arg3;
- (void)insertOverlay:(id)arg1 belowOverlay:(id)arg2;
- (BOOL)isCompassEnabled;
- (BOOL)isLocationConsoleEnabled;
- (BOOL)isPitchEnabled;
- (BOOL)isRegionChanging;
- (BOOL)isRotateEnabled;
- (BOOL)isScaleEnabled;
- (BOOL)isScrollEnabled;
- (BOOL)isShowingNoDataPlaceholders;
- (BOOL)isSuspended;
- (BOOL)isUserLocationVisible;
- (BOOL)isZoomEnabled;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (void)locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerFailedToUpdateHeading:(id)arg1 withError:(id)arg2;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (BOOL)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedHeading:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (id)mapAttributionWithStringAttributes:(id)arg1;
- (void)mapLayer:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 canShowFlyoverDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 canZoomInDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 canZoomOutDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didStopFlyoverTourCompleted:(BOOL)arg2;
- (void)mapLayer:(id)arg1 didUpdateVerticalYawTo:(double)arg2;
- (void)mapLayer:(id)arg1 flyoverModeDidChange:(int)arg2;
- (void)mapLayer:(id)arg1 flyoverModeWillChange:(int)arg2;
- (void)mapLayer:(id)arg1 flyoverTourLabelDidChange:(id)arg2;
- (id)mapLayer:(id)arg1 painterForOverlay:(id)arg2;
- (id)mapLayer:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)mapLayer:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)mapLayer:(id)arg1 showingFlyoverDidChange:(BOOL)arg2;
- (void)mapLayer:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)mapLayer:(id)arg1 willTransitionFrom:(int)arg2 to:(int)arg3 duration:(double)arg4;
- (void)mapLayerDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapLayerDidBecomePartiallyDrawn:(id)arg1;
- (void)mapLayerDidChangeVisibleRegion:(id)arg1;
- (void)mapLayerDidDraw:(id)arg1;
- (void)mapLayerDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapLayerDidFinishInitialTrackingAnimation:(id)arg1;
- (void)mapLayerDidFinishLoadingTiles:(id)arg1;
- (void)mapLayerDidStartLoadingTiles:(id)arg1;
- (void)mapLayerWillStartFlyoverTour:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2;
- (id)mapRegion;
- (unsigned int)mapType;
- (void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(struct { double x1; double x2; })arg2 animated:(BOOL)arg3 duration:(double)arg4;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlayContainer;
- (void)overlayContainerAddedDrawables:(id)arg1;
- (id)overlays;
- (id)overlaysInLevel:(int)arg1;
- (void)pauseUserHeadingUpdates;
- (void)pauseUserLocationUpdates;
- (id)predictedUserLocation;
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { double x1; double x2; double x3; })arg2 course:(double)arg3;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionThatFits:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeAnnotation:(id)arg1;
- (void)removeAnnotationRepresentation:(id)arg1;
- (void)removeAnnotations:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removeOverlays:(id)arg1;
- (void)removeUserLocation;
- (id)rendererForOverlay:(id)arg1;
- (BOOL)rendersInBackground;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)resumeUserHeadingUpdates;
- (void)resumeUserLocationUpdates;
- (id)scaleView;
- (void)selectAnnotation:(id)arg1 animated:(BOOL)arg2;
- (void)selectAnnotationRepresentation:(id)arg1 animated:(BOOL)arg2 avoid:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)selectedAnnotations;
- (void)setBackdropViewQualityChangingDisabled:(BOOL)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCamera:(id)arg1;
- (void)setCamera:(id)arg1 animated:(BOOL)arg2;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6;
- (void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(id /* block */)arg7;
- (void)setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5;
- (void)setCenter:(struct CGPoint { float x1; float x2; })arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 animated:(BOOL)arg2;
- (void)setCompassEnabled:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFlyoverMode:(int)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setIgnoreLocationUpdates:(BOOL)arg1;
- (void)setLayoutMargins:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setLocationConsoleEnabled:(BOOL)arg1;
- (void)setMapType:(unsigned int)arg1;
- (void)setPitchEnabled:(BOOL)arg1;
- (void)setPredictedUserLocation:(id)arg1;
- (void)setRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRegion:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (void)setRendersInBackground:(BOOL)arg1;
- (void)setRotateEnabled:(BOOL)arg1;
- (void)setScaleEnabled:(BOOL)arg1;
- (void)setScrollEnabled:(BOOL)arg1;
- (void)setSelectedAnnotations:(id)arg1;
- (void)setShowsAttribution:(BOOL)arg1;
- (void)setShowsAttributionBadge:(BOOL)arg1;
- (void)setShowsBuildings:(BOOL)arg1;
- (void)setShowsCompass:(BOOL)arg1;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (void)setShowsScale:(BOOL)arg1;
- (void)setShowsTraffic:(BOOL)arg1;
- (void)setShowsUserLocation:(BOOL)arg1;
- (void)setSuspended:(BOOL)arg1;
- (void)setUserTrackingMode:(int)arg1;
- (void)setUserTrackingMode:(int)arg1 animated:(BOOL)arg2;
- (void)setVehicleState:(struct { BOOL x1; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(BOOL)arg2;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg2 animated:(BOOL)arg3;
- (void)setZoomEnabled:(BOOL)arg1;
- (void)set_annotationViewsAreAddedImmediately:(BOOL)arg1;
- (void)set_defaultLocationTimer:(id)arg1;
- (void)set_startEffectsTimer:(id)arg1;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (void)showAnnotations:(id)arg1 animated:(BOOL)arg2;
- (BOOL)showsAttribution;
- (BOOL)showsAttributionBadge;
- (BOOL)showsBuildings;
- (BOOL)showsCompass;
- (BOOL)showsPointsOfInterest;
- (BOOL)showsScale;
- (BOOL)showsTraffic;
- (BOOL)showsUserLocation;
- (void)snapToNorth:(id)arg1;
- (void)startUpdatingUserLocation;
- (void)stopUpdatingUserLocation;
- (void)toggleLocationConsole:(id)arg1;
- (void)updateLayoutGuides;
- (id)userLocation;
- (id)userLocationView;
- (int)userTrackingMode;
- (id)viewForAnnotation:(id)arg1;
- (id)viewForOverlay:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleCenteringRectInView:(id)arg1;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })visibleMapRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRectInView:(id)arg1;
- (id)vk_mapLayer;
- (void)willMoveToWindow:(id)arg1;

// Image: /System/Library/PrivateFrameworks/SlideshowKit.framework/Frameworks/OpusFoundation.framework/OpusFoundation

- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionToFitAnnotations;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })regionToFitLocations:(id)arg1;
- (void)zoomToFitAnnotations;
- (void)zoomToFitLocations:(id)arg1 animated:(BOOL)arg2;

@end
