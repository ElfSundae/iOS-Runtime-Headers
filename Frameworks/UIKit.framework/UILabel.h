/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UILabel : UIView <ABText, MPUAutoupdatingTextContainer, NSCoding, _UIMultilineTextContentSizing> {
    BOOL __textColorFollowsTintColor;
    id _content;
    NSMutableDictionary *_defaultAttributes;
    float _firstLineBaseline;
    UIColor *_highlightedColor;
    float _lastLineBaseline;
    id _layout;
    int _lineSpacing;
    int _measuredNumberOfLines;
    float _minimumFontSize;
    float _minimumScaleFactor;
    int _numberOfLines;
    float _preferredMaxLayoutWidth;
    float _previousBaselineOffsetFromBottom;
    float _previousFirstLineBaseline;
    _UILabelScaledMetrics *_scaledMetrics;
    struct CGSize { 
        float width; 
        float height; 
    } _size;
    NSAttributedString *_synthesizedAttributedText;
    struct { 
        unsigned int unused1 : 3; 
        unsigned int highlighted : 1; 
        unsigned int autosizeTextToFit : 1; 
        unsigned int autotrackTextToFit : 1; 
        unsigned int baselineAdjustment : 2; 
        unsigned int enabled : 1; 
        unsigned int wordRoundingEnabled : 1; 
        unsigned int explicitAlignment : 1; 
        unsigned int marqueeEnabled : 1; 
        unsigned int marqueeRunable : 1; 
        unsigned int marqueeRequired : 1; 
        unsigned int drawsLetterpress : 1; 
        unsigned int unused3 : 1; 
        unsigned int usesExplicitPreferredMaxLayoutWidth : 1; 
        unsigned int determiningPreferredMaxLayoutWidth : 1; 
        unsigned int inSecondConstraintsPass : 1; 
        unsigned int drawsDebugBaselines : 1; 
        unsigned int explicitBaselineOffset : 1; 
        unsigned int usesSimpleTextEffects : 1; 
        unsigned int isComplexString : 1; 
        unsigned int isVariableLengthString : 1; 
        unsigned int wantsUnderlineForAccessibilityButtonShapesEnabled : 1; 
    } _textLabelFlags;
}

@property (setter=MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:, nonatomic) BOOL MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
@property (nonatomic, readonly) MPUTextContainerContentSizeUpdater *MPU_contentSizeUpdater;
@property (nonatomic, readonly) float _capOffsetFromBoundsTop;
@property (setter=_setDrawsDebugBaselines:, nonatomic) BOOL _drawsDebugBaselines;
@property (setter=_setFirstLineBaselineFrameOriginY:, nonatomic) float _firstLineBaselineFrameOriginY;
@property (nonatomic, readonly) float _firstLineBaselineOffsetFromBoundsTop;
@property (setter=_setFirstLineCapFrameOriginY:, nonatomic) float _firstLineCapFrameOriginY;
@property (nonatomic, readonly) float _lastLineBaseline;
@property (setter=_setLastLineBaselineFrameOriginY:, nonatomic) float _lastLineBaselineFrameOriginY;
@property (getter=_synthesizedAttributedText, setter=_setSynthesizedAttributedText:, nonatomic, retain) NSAttributedString *_synthesizedAttributedText;
@property (setter=_setTextColorFollowsTintColor:, nonatomic) BOOL _textColorFollowsTintColor;
@property (setter=_setWantsUnderlineForAccessibilityButtonShapesEnabled:, nonatomic) BOOL _wantsUnderlineForAccessibilityButtonShapesEnabled;
@property (nonatomic, copy) NSString *ab_text;
@property (nonatomic, copy) NSDictionary *ab_textAttributes;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) BOOL adjustsLetterSpacingToFitWidth;
@property (nonatomic) BOOL allowsDefaultTighteningForTruncation;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic) int baselineAdjustment;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) BOOL enabled;
@property (nonatomic, retain) UIFont *font;
@property (readonly) unsigned int hash;
@property (getter=isHighlighted, nonatomic) BOOL highlighted;
@property (nonatomic, retain) UIColor *highlightedTextColor;
@property (nonatomic) int lineBreakMode;
@property (nonatomic) int lineSpacing;
@property (nonatomic) float minimumFontSize;
@property (nonatomic) float minimumScaleFactor;
@property (nonatomic, readonly) float naui_baselineOffsetFromBottom;
@property (nonatomic, readonly) float naui_capOffsetFromTop;
@property (nonatomic) int numberOfLines;
@property (nonatomic) float preferredMaxLayoutWidth;
@property (nonatomic, readonly) float rc_baselineOffsetFromBottom;
@property (nonatomic, readonly) float rc_capOffsetFromTop;
@property (nonatomic, retain) UIColor *shadowColor;
@property (nonatomic) struct CGSize { float x1; float x2; } shadowOffset;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) int textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (getter=isUserInteractionEnabled, nonatomic) BOOL userInteractionEnabled;

// Image: /System/Library/Frameworks/UIKit.framework/UIKit

+ (id)_defaultAttributes;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_insetRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forAttributedString:(id)arg2 withDefaultFont:(id)arg3 inView:(id)arg4;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_insetsForAttributedString:(id)arg1 withDefaultFont:(id)arg2 inView:(id)arg3;
+ (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_insetsForString:(id)arg1 withFont:(id)arg2 inView:(id)arg3;
+ (struct CGSize { float x1; float x2; })_legacy_adjustSizeForWebKitConstraining:(struct CGSize { float x1; float x2; })arg1 withFont:(id)arg2;
+ (struct __CFCharacterSet { }*)_tooBigChars;
+ (id)defaultFont;
+ (Class)layerClass;

- (void).cxx_destruct;
- (void)_accessibilityButtonShapesChangedNotification:(id)arg1;
- (void)_accessibilityButtonShapesParametersDidChange;
- (float)_actualScaleFactor;
- (id)_associatedScalingLabel;
- (BOOL)_attributedStringHasAttributesNotCoveredByPrimitives;
- (float)_baselineOffsetFromBottom;
- (void)_baselineOffsetParametersDidChange;
- (float)_capOffsetFromBoundsTop;
- (void)_commonInit;
- (id)_compatibilityAttributedString;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_contentInsetsFromFonts;
- (void)_coordinateBeginTimeForMarqueeAnimations:(double)arg1;
- (id)_defaultAttributes;
- (void)_didChangeFromIdiom:(int)arg1 onScreen:(id)arg2 traverseHierarchy:(BOOL)arg3;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (id)_disabledFontColor;
- (void)_drawFullMarqueeTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 baselineCalculationOnly:(BOOL)arg2;
- (BOOL)_drawsDebugBaselines;
- (BOOL)_drawsUnderline;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_ensureBaselineMetricsReturningBounds;
- (float)_firstBaselineOffsetFromTop;
- (float)_firstLineBaselineFrameOriginY;
- (float)_firstLineBaselineOffsetFromBoundsTop;
- (float)_firstLineCapFrameOriginY;
- (id)_image;
- (struct CGSize { float x1; float x2; })_intrinsicSizeWithinSize:(struct CGSize { float x1; float x2; })arg1;
- (void)_invalidateAsNeededForNewSize:(struct CGSize { float x1; float x2; })arg1 oldSize:(struct CGSize { float x1; float x2; })arg2 withLinkCheck:(BOOL)arg3;
- (void)_invalidateDefaultAttributes;
- (void)_invalidateLayout;
- (void)_invalidateSynthesizedAttributedTextAndLayout;
- (void)_invalidateTextSize;
- (BOOL)_isTextFieldCenteredLabel;
- (float)_lastLineBaseline;
- (float)_lastLineBaselineFrameOriginY;
- (id)_layoutDebuggingTitle;
- (float)_maximumMarqueeTextWidth;
- (int)_measuredNumberOfLines;
- (float)_minimumFontSize;
- (BOOL)_needsDoubleUpdateConstraintsPass;
- (float)_preferredMaxLayoutWidth;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_resetToBeginningOfDoublePass;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (id)_scriptingInfo;
- (void)_setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)_setAttributedText:(id)arg1 andTakeOwnership:(BOOL)arg2;
- (void)_setColor:(id)arg1;
- (void)_setDefaultAttributes:(id)arg1;
- (void)_setDrawsDebugBaselines:(BOOL)arg1;
- (void)_setFirstLineBaselineFrameOriginY:(float)arg1;
- (void)_setFirstLineCapFrameOriginY:(float)arg1;
- (void)_setFont:(id)arg1;
- (void)_setInSecondConstraintsPass:(BOOL)arg1;
- (void)_setLastLineBaselineFrameOriginY:(float)arg1;
- (void)_setLineBreakMode:(int)arg1;
- (void)_setMinimumFontSize:(float)arg1;
- (void)_setShadow:(id)arg1;
- (void)_setShadowUIOffset:(struct UIOffset { float x1; float x2; })arg1;
- (void)_setSynthesizedAttributedText:(id)arg1;
- (void)_setText:(id)arg1;
- (void)_setTextAlignment:(int)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextColorFollowsTintColor:(BOOL)arg1;
- (void)_setUsesSimpleTextEffects:(BOOL)arg1;
- (void)_setWantsUnderlineForAccessibilityButtonShapesEnabled:(BOOL)arg1;
- (void)_setWordRoundingEnabled:(BOOL)arg1;
- (id)_shadow;
- (BOOL)_shouldCeilSizeToViewScale;
- (BOOL)_shouldDrawUnderlinesLikeWebKit;
- (BOOL)_shouldShowAccessibilityButtonShapesUnderline;
- (id)_siblingMarqueeLabels;
- (void)_startMarquee;
- (void)_startMarqueeIfNecessary;
- (void)_stopMarqueeWithRedisplay:(BOOL)arg1;
- (id)_stringDrawingContext;
- (id)_synthesizedAttributedText;
- (id)_synthesizedTextAttributes;
- (BOOL)_textColorFollowsTintColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2 includingShadow:(BOOL)arg3;
- (BOOL)_updateScaledMetricsForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_updateVariableLengthString;
- (BOOL)_usesSimpleTextEffects;
- (BOOL)_wantsUnderlineForAccessibilityButtonShapesEnabled;
- (BOOL)adjustsFontSizeToFitWidth;
- (BOOL)adjustsLetterSpacingToFitWidth;
- (BOOL)allowsDefaultTighteningForTruncation;
- (id)attributedText;
- (BOOL)autotrackTextToFit;
- (int)baselineAdjustment;
- (BOOL)centersHorizontally;
- (id)color;
- (id)currentTextColor;
- (void)dealloc;
- (unsigned long long)defaultAccessibilityTraits;
- (void)drawContentsInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)drawsLetterpress;
- (BOOL)drawsUnderline;
- (void)encodeWithCoder:(id)arg1;
- (id)font;
- (id)highlightedTextColor;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGSize { float x1; float x2; })intrinsicContentSize;
- (void)invalidateIntrinsicContentSize;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isEnabled;
- (BOOL)isHighlighted;
- (id)letterpressStyle;
- (int)lineBreakMode;
- (int)lineSpacing;
- (BOOL)marqueeEnabled;
- (BOOL)marqueeRunning;
- (float)minimumFontSize;
- (float)minimumScaleFactor;
- (int)numberOfLines;
- (float)preferredMaxLayoutWidth;
- (struct CGSize { float x1; float x2; })rawSize;
- (void)setAdjustsFontSizeToFitWidth:(BOOL)arg1;
- (void)setAdjustsLetterSpacingToFitWidth:(BOOL)arg1;
- (void)setAllowsDefaultTighteningForTruncation:(BOOL)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAutotrackTextToFit:(BOOL)arg1;
- (void)setBaselineAdjustment:(int)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCentersHorizontally:(BOOL)arg1;
- (void)setColor:(id)arg1;
- (void)setDrawsLetterpress:(BOOL)arg1;
- (void)setDrawsUnderline:(BOOL)arg1;
- (void)setEnabled:(BOOL)arg1;
- (void)setFont:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(BOOL)arg1;
- (void)setHighlightedTextColor:(id)arg1;
- (void)setLetterpressStyle:(id)arg1;
- (void)setLineBreakMode:(int)arg1;
- (void)setLineSpacing:(int)arg1;
- (void)setMarqueeEnabled:(BOOL)arg1;
- (void)setMarqueeRunning:(BOOL)arg1;
- (void)setMinimumFontSize:(float)arg1;
- (void)setMinimumScaleFactor:(float)arg1;
- (void)setNumberOfLines:(int)arg1;
- (void)setPreferredMaxLayoutWidth:(float)arg1;
- (void)setRawSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setSemanticContentAttribute:(int)arg1;
- (void)setShadowBlur:(float)arg1;
- (void)setShadowColor:(id)arg1;
- (void)setShadowOffset:(struct CGSize { float x1; float x2; })arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(int)arg1;
- (void)setTextColor:(id)arg1;
- (void)setUserInteractionEnabled:(BOOL)arg1;
- (float)shadowBlur;
- (id)shadowColor;
- (struct CGSize { float x1; float x2; })shadowOffset;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (id)text;
- (int)textAlignment;
- (id)textColor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(int)arg2;
- (struct CGSize { float x1; float x2; })textSize;
- (struct CGSize { float x1; float x2; })textSizeForWidth:(float)arg1;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateConstraints;

// Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI

- (void)_cnui_applyContactStyle;
- (id)ab_text;
- (id)ab_textAttributes;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;

// Image: /System/Library/Frameworks/PassKit.framework/PassKit

- (void)pk_applyAppearance:(struct _PKAppearanceSpecifier { BOOL x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; unsigned short x29; void*x30; short x31; void*x32; void*x33; void*x34; void*x35; unsigned long x36; int x37; unsigned int x38/* : ? */; const void*x39; const void*x40; void*x41; void*x42; const int x43; void x44; void*x45; void*x46; void*x47; void*x48; const void*x49; void*x50; void*x51; void*x52; out const void*x53; short x54; void*x55; bycopy float x56; float x57; int x58; BOOL x59; void*x60; unsigned int x61; void*x62; void*x63; out const void*x64; void*x65; float x66; const void*x67; void*x68; void*x69; void*x70; out const void*x71; void*x72; bycopy float x73; float x74; int x75; BOOL x76; void*x77; unsigned int x78; void*x79; void*x80; out const void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; Class x124; void*x125; void*x126; void*x127; void*x128; int x129; long x130; unsigned char x131; out void*x132; void*x133; out short x134; void*x135; inout void*x136; void x137; int x138; void*x139; void*x140; void*x141; int x142; out in bool x143; void*x144; const void*x145; int x146; void*x147; long x148; void*x149; oneway int x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; in void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; id x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; id x254; void*x255; double x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; unsigned int x267/* : ? */; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; unsigned short x339; void*x340; short x341; void*x342; void*x343; void*x344; void*x345; unsigned long x346; int x347; unsigned int x348/* : ? */; const void*x349; const void*x350; void*x351; void*x352; const int x353; void x354; void*x355; void*x356; void*x357; void*x358; const void*x359; void*x360; void*x361; void*x362; out const void*x363; short x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; int x371; void*x372; unsigned short x373; void*x374; const void x375; int x376; BOOL x377; void*x378; short x379; void*x380; float x381; const void*x382; void*x383; void*x384; void*x385; out const void*x386; void*x387; void*x388; const void*x389; void*x390; void*x391; void*x392; out const void*x393; short x394; void*x395; void*x396; unsigned char x397; out in float x398; void*x399; const void*x400; in BOOL x401; void*x402; void*x403; float x404; const void*x405; void*x406; void*x407; void*x408; out const void*x409; void*x410; void*x411; unsigned char x412; out in float x413; void*x414; const void*x415; in BOOL x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void**x436; void*x437; void*x438; void*x439; void*x440; union { void x_441_1_1; out int x_441_1_2; double x_441_1_3; } x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; short x532; int x533; BOOL x534; void*x535; long x536; void*x537; void*x538; bool x539; void*x540; void*x541; void*x542; out in void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; short x562; int x563; BOOL x564; void*x565; unsigned short x566; void*x567; long x568; void*x569; void*x570; unsigned int x571/* : ? */; void*x572; BOOL x573; void*x574; void*x575; void*x576; long long x577; void*x578; void*x579; short x580; void*x581; void*x582; long doublex583; void*x584; void*x585; void*x586; void*x587[8]; void*x588; void*x589; out void*x590; long x591; double x592; long x593; long x594; out void*x595; unsigned short x596; void*x597; long x598; void*x599; BOOL x600; void*x601; int x602; out in void*x603; void*x604; short x605; void*x606; void*x607; const void*x608; short x609; SEL x610; void*x611; void*x612; void*x613; out int x614; in void*x615; SEL x616; void*x617; out bool x618; void*x619; void*x620; int x621; in SEL x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; double x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; id x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; id x715; void*x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; void*x745; id x746; int x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; void*x786; void*x787; void*x788; void*x789; void*x790; void*x791; long x792; BOOL x793; int x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void**x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; long long x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; unsigned char x848; out in void*x849; void*x850; int x851; in void*x852; void*x853; void*x854; void*x855; in short x856; int x857; out in unsigned int x858; in void*x859; void*x860; void*x861; void*x862; out double x863; void*x864; short x865; void*x866; void*x867; void*x868; void*x869; void*x870; void*x871; void*x872; void*x873; void*x874; void*x875; void*x876; void*x877; void*x878; void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; void*x885; unsigned long x886; unsigned char x887; long doublex888; void*x889; void*x890; void*x891; void*x892; oneway int x893; void*x894; void*x895; unsigned short x896; BOOL x897; const out long x898; long x899; int x900; in void*x901; oneway int x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; void*x912; void*x913; void*x914; void*x915; void*x916; void*x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; double x924; void*x925; void*x926; void*x927; void*x928; void*x929; void*x930; void*x931; void*x932; void*x933; void*x934; void*x935; void*x936; id x937; void*x938; float x939; void*x940; void*x941; void*x942; void*x943; void*x944; void*x945; void*x946; void*x947; void*x948; void*x949; void*x950; void*x951; void*x952; void*x953; void*x954; void*x955; void*x956; void*x957; void*x958; void*x959; void*x960; void*x961; void*x962; void*x963; void*x964; void*x965; void*x966; void*x967; id x968; void*x969; void*x970; void*x971; void*x972; void*x973; void*x974; void*x975; void*x976; void*x977; void*x978; void*x979; void*x980; void*x981; void*x982; void*x983; void*x984; void*x985; void*x986; void*x987; void*x988; void*x989; void*x990; void*x991; void*x992; void*x993; void*x994; void*x995; void*x996; void*x997; void*x998; id x999; void*x1000; long x1001; void*x1002; void*x1003; void*x1004; void*x1005; void*x1006; void*x1007; void*x1008; void*x1009; void*x1010; void*x1011; void*x1012; void*x1013; void*x1014; void*x1015; void*x1016; void*x1017; void*x1018; void*x1019; void*x1020; void*x1021; void*x1022; void*x1023; void*x1024; void*x1025; void*x1026; void*x1027; void*x1028; void*x1029; id x1030; void*x1031; void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; void*x1037; void*x1038; void*x1039; void*x1040; void*x1041; void*x1042; void*x1043; void*x1044; void*x1045; void*x1046; void*x1047; void*x1048; void*x1049; void*x1050; void*x1051; void*x1052; void*x1053; void*x1054; void*x1055; void*x1056; void*x1057; void*x1058; void*x1059; void*x1060; void*x1061; void*x1062; void*x1063; void*x1064; void*x1065; void*x1066; void*x1067; void*x1068; void*x1069; void*x1070; void*x1071; void*x1072; void*x1073; void*x1074; void*x1075; void*x1076; void*x1077; void*x1078; void*x1079; void*x1080; void*x1081; void*x1082; void*x1083; unsigned short x1084; void*x1085; short x1086; void*x1087; void*x1088; void*x1089; void*x1090; unsigned long x1091; int x1092; unsigned int x1093/* : ? */; const void*x1094; const void*x1095; void*x1096; void*x1097; const int x1098; void x1099; void*x1100; void*x1101; void*x1102; void*x1103; const void*x1104; void*x1105; void*x1106; void*x1107; out const void*x1108; short x1109; void*x1110; inout void*x1111; in out void*x1112; void*x1113; double x1114; int x1115; void*x1116; void*x1117; void*x1118; void*x1119; out void*x1120; void*x1121; void*x1122; float x1123; const void*x1124; void*x1125; void*x1126; void*x1127; out const void*x1128; void*x1129; inout void*x1130; in out void*x1131; void*x1132; double x1133; int x1134; void*x1135; void*x1136; void*x1137; void*x1138; out void*x1139; void*x1140; void*x1141; void*x1142; void*x1143; void*x1144; void*x1145; void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; void*x1151; void*x1152; void*x1153; void*x1154; void*x1155; void*x1156; void*x1157; void*x1158; int x1159; void*x1160; void*x1161; void*x1162; short x1163; void*x1164; void*x1165; unsigned long x1166; void*x1167; short x1168; void*x1169; unsigned long x1170; int x1171; in void*x1172; bool x1173; void*x1174; short x1175; void*x1176; long x1177; int x1178; in void*x1179; void*x1180; const void*x1181; void*x1182; void*x1183; bycopy const int x1184; void*x1185; int x1186; in void*x1187; SEL x1188; union { float x_1189_1_1; long x_1189_1_2; out void*x_1189_1_3; void*x_1189_1_4; } x1189; void*x1190; const void*x1191; void*x1192; void*x1193; void*x1194; void*x1195; void*x1196; void*x1197; void*x1198; void*x1199; void*x1200; void*x1201; void*x1202; void*x1203; void*x1204; void*x1205; void*x1206; void*x1207; void*x1208; void*x1209; void*x1210; void*x1211; void*x1212; void*x1213; unsigned int x1214; unsigned short x1215; void*x1216; void*x1217; void*x1218; void*x1219; short x1220; bool x1221; void*x1222; const bycopy const int x1223; void*x1224; in void*x1225; void*x1226; void*x1227; int x1228; out in in int x1229; void*x1230; void*x1231; void*x1232; int x1233; out in void*x1234; void*x1235; const void*x1236; void*x1237; void*x1238; void*x1239; void*x1240; const short x1241; void*x1242; void*x1243; void*x1244; void*x1245; void*x1246; void*x1247; void*x1248; void*x1249; void*x1250; void*x1251; void*x1252; void*x1253; void*x1254; void*x1255; void*x1256; void*x1257; short x1258; void*x1259; void*x1260; void*x1261; float x1262; void*x1263; void*x1264; void*x1265; void*x1266; void*x1267; void*x1268; void*x1269; void*x1270; void*x1271; void*x1272; void*x1273; void*x1274; void*x1275; void*x1276; void*x1277; void*x1278; void*x1279; void*x1280; void*x1281; void*x1282; void*x1283; void*x1284; void*x1285; void*x1286; void*x1287; void*x1288; void*x1289; id x1290; void*x1291; void*x1292; void*x1293; void*x1294; void*x1295; void*x1296; void*x1297; void*x1298; void*x1299; void*x1300; void*x1301; void*x1302; void*x1303; void*x1304; void*x1305; void*x1306; void*x1307; void*x1308; void*x1309; void*x1310; void*x1311; void*x1312; void*x1313; void*x1314; void*x1315; void*x1316; void*x1317; void*x1318; void*x1319; void*x1320; id x1321; void*x1322; long x1323; void*x1324; void*x1325; void*x1326; void*x1327; void*x1328; void*x1329; void*x1330; void*x1331; void*x1332; void*x1333; void*x1334; void*x1335; void*x1336; void*x1337; void*x1338; void*x1339; void*x1340; void*x1341; void*x1342; void*x1343; void*x1344; void*x1345; void*x1346; void*x1347; void*x1348; void*x1349; void*x1350; void*x1351; void*x1352; void*x1353; void*x1354; void*x1355; void*x1356; void*x1357; void*x1358; void*x1359; void*x1360; void*x1361; void*x1362; void*x1363; void*x1364; void*x1365; void*x1366; void*x1367; void*x1368; void*x1369; void*x1370; void*x1371; void*x1372; void*x1373; void*x1374; void*x1375; void*x1376; void*x1377; void*x1378; void*x1379; void*x1380; void*x1381; void*x1382; void*x1383; void*x1384; void*x1385; void*x1386; void*x1387; void*x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; void*x1394; void*x1395; void*x1396; void*x1397; void*x1398; void*x1399; void*x1400; void*x1401; void*x1402; void*x1403; void*x1404; void*x1405; void*x1406; void*x1407; void*x1408; void*x1409; void*x1410; void*x1411; void*x1412; void*x1413; void*x1414; id x1415; void*x1416; long x1417; void*x1418; void*x1419; void*x1420; void*x1421; void*x1422; void*x1423; void*x1424; void*x1425; void*x1426; void*x1427; void*x1428; void*x1429; void*x1430; void*x1431; void*x1432; void*x1433; void*x1434; void*x1435; void*x1436; void*x1437; void*x1438; void*x1439; void*x1440; void*x1441; void*x1442; void*x1443; void*x1444; void*x1445; void*x1446; void*x1447; void*x1448; void*x1449; void*x1450; void*x1451; void*x1452; void*x1453; void*x1454; void*x1455; void*x1456; void*x1457; void*x1458; void*x1459; void*x1460; void*x1461; void*x1462; void*x1463; void*x1464; void*x1465; void*x1466; void*x1467; void*x1468; void*x1469; void*x1470; void*x1471; void*x1472; void*x1473; void*x1474; void*x1475; void*x1476; void*x1477; void*x1478; void*x1479; void*x1480; void*x1481; char *x1482; void*x1483; void*x1484; short x1485; int x1486; BOOL x1487; void*x1488; long x1489; void*x1490; void*x1491; unsigned int x1492/* : ? */; void*x1493; BOOL x1494; void*x1495; void*x1496; const out void*x1497; const void*x1498; short x1499; short x1500; unsigned short x1501; BOOL x1502; const void*x1503; unsigned int x1504/* : ? */; unsigned int x1505/* : ? */; void*x1506; const long doublex1507; void*x1508; long x1509; void*x1510; void*x1511; void*x1512; void*x1513; void*x1514; void*x1515; void*x1516; void*x1517; void*x1518; float x1519; void*x1520; void*x1521; void*x1522; in void*x1523; void*x1524; void*x1525; void*x1526; unsigned char x1527; void*x1528; void*x1529; out int x1530; in void*x1531; void*x1532; struct  float x1; float x2;  {} x1533; void*x1534; BOOL x1535; out in void x1536; void*x1537; const void*x1538; void*x1539; out int x1540; in void*x1541; SEL x1542; union { short x_1543_1_1; void*x_1543_1_2; const void*x_1543_1_3; BOOL x_1543_1_4; void*x_1543_1_5; void*x_1543_1_6; unsigned char x_1543_1_7; void*x_1543_1_8; void*x_1543_1_9; out int x_1543_1_10; in void*x_1543_1_11; void*x_1543_1_12; struct  float x1; float x2;  {} x_1543_1_13; } x1543; void*x1544; const void*x1545; void*x1546; void*x1547; float x1548; const out void*x1549; unsigned short x1550; BOOL x1551; void*x1552; in void*x1553; SEL x1554; union { int x_1555_1_1; double x_1555_1_2; } x1555; void*x1556; const void*x1557; void*x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; void*x1566; void*x1567; void*x1568; void*x1569; void*x1570; id x1571; void*x1572; void*x1573; id x1574; void*x1575; void*x1576; void*x1577; void*x1578; void*x1579; void*x1580; void*x1581; void*x1582; void*x1583; void*x1584; void*x1585; void*x1586; void*x1587; void*x1588; void*x1589; void*x1590; void*x1591; void*x1592; void*x1593; void*x1594; void*x1595; void*x1596; void*x1597; void*x1598; void*x1599; void*x1600; void*x1601; void*x1602; void*x1603; void*x1604; void*x1605; void*x1606; void*x1607; void*x1608; void*x1609; void*x1610; void*x1611; void*x1612; void*x1613; void*x1614; void*x1615; double x1616; void*x1617; void*x1618; void*x1619; void*x1620; void*x1621; void*x1622; void*x1623; void*x1624; void*x1625; void*x1626; void*x1627; void*x1628; void*x1629; void*x1630; void*x1631; void*x1632; void*x1633; void*x1634; void*x1635; void*x1636; void*x1637; void*x1638; void*x1639; void*x1640; void*x1641; void*x1642; void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; id x1648; char *x1649; float x1650; void*x1651; void*x1652; void*x1653; void*x1654; void*x1655; void*x1656; void*x1657; void*x1658; void*x1659; void*x1660; void*x1661; void*x1662; void*x1663; void*x1664; void*x1665; void*x1666; void*x1667; void*x1668; void*x1669; void*x1670; void*x1671; void*x1672; void*x1673; void*x1674; void*x1675; void*x1676; void*x1677; id x1678; void*x1679; void*x1680; void*x1681; void*x1682; void*x1683; void*x1684; void*x1685; void*x1686; void*x1687; void*x1688; void*x1689; void*x1690; void*x1691; void*x1692; void*x1693; void*x1694; void*x1695; void*x1696; void*x1697; void*x1698; void*x1699; void*x1700; void*x1701; void*x1702; void*x1703; void*x1704; void*x1705; void*x1706; void*x1707; void*x1708; void*x1709; void*x1710; void*x1711; void*x1712; void*x1713; void*x1714; void*x1715; void*x1716; void*x1717; void*x1718; void*x1719; void*x1720; void*x1721; void*x1722; void*x1723; void*x1724; void*x1725; void*x1726; void*x1727; void*x1728; void*x1729; void*x1730; void*x1731; void*x1732; void*x1733; void*x1734; void*x1735; void*x1736; void*x1737; void*x1738; void*x1739; void*x1740; id x1741; void*x1742; void*x1743; void*x1744; void*x1745; void*x1746; void*x1747; void*x1748; void*x1749; void*x1750; void*x1751; void*x1752; void*x1753; void*x1754; void*x1755; void*x1756; void*x1757; void*x1758; void*x1759; void*x1760; void*x1761; void*x1762; void*x1763; void*x1764; void*x1765; void*x1766; void*x1767; void*x1768; void*x1769; void*x1770; void*x1771; void*x1772; void*x1773; void*x1774; void*x1775; void*x1776; void*x1777; void*x1778; void*x1779; void*x1780; void*x1781; void*x1782; void*x1783; void*x1784; void*x1785; void*x1786; void*x1787; void*x1788; void*x1789; void*x1790; void*x1791; void*x1792; void*x1793; void*x1794; void*x1795; void*x1796; void*x1797; void*x1798; void*x1799; void*x1800; void*x1801; void*x1802; void*x1803; void*x1804; void*x1805; void*x1806; void*x1807; void*x1808; void*x1809; void*x1810; void*x1811; void*x1812; void*x1813; void*x1814; const void*x1815; void*x1816; in BOOL x1817; void*x1818; unsigned char x1819; void*x1820; const double x1821; long doublex1822; void*x1823; long x1824; void*x1825; void*x1826; int x1827; out in void*x1828; void*x1829; unsigned int x1830/* : ? */; long x1831; void*x1832; unsigned int x1833; void*x1834; void*x1835; void*x1836; void*x1837; void*x1838; void*x1839; void*x1840; void*x1841; void*x1842; void*x1843; void*x1844; void*x1845; void*x1846; void*x1847; void*x1848; void*x1849; void*x1850; void*x1851; void*x1852; void*x1853; void*x1854; void*x1855; void*x1856; void*x1857; void*x1858; void*x1859; void*x1860; void*x1861; void*x1862; void*x1863; void*x1864; void*x1865; void*x1866; void*x1867; void*x1868; void*x1869; void*x1870; void*x1871; void*x1872; void*x1873; unsigned char x1874; void*x1875; void*x1876; void*x1877; void*x1878; void*x1879; void*x1880; void*x1881; BOOL x1882; void*x1883; void*x1884; void*x1885; void*x1886; void*x1887; struct x1888; void*x1889; void*x1890; void*x1891; short x1892; void*x1893; void*x1894; void*x1895; const void*x1896; void*x1897; void*x1898; BOOL x1899; void*x1900; void*x1901; void*x1902; void*x1903; void*x1904; unsigned char x1905; void*x1906; void*x1907; void*x1908; void*x1909; void*x1910; out void*x1911; int x1912; void*x1913; in void*x1914; void*x1915; void*x1916; void*x1917; void*x1918; struct x1919; void*x1920; void*x1921; void*x1922; float x1923; void*x1924; long x1925; void*x1926; out void*x1927; void*x1928; void*x1929; void*x1930; void*x1931; void*x1932; void*x1933; void*x1934; void*x1935; void*x1936; void*x1937; void*x1938; void*x1939; void*x1940; void*x1941; void*x1942; void*x1943; void*x1944; void*x1945; void*x1946; void*x1947; void*x1948; void*x1949; void*x1950; void*x1951; float x1952; void*x1953; long x1954; void*x1955; out void*x1956; void*x1957; void*x1958; void*x1959; void*x1960; void*x1961; void*x1962; void*x1963; void*x1964; void*x1965; void*x1966; void*x1967; void*x1968; void*x1969; void*x1970; void*x1971; void*x1972; void*x1973; void*x1974; void*x1975; void*x1976; void*x1977; void*x1978; void*x1979; void*x1980; }*)arg1;
- (id)pk_childrenForAppearance;
- (void)pk_setAttributedTextRespectingTextAndBackgroundColors:(id)arg1;
- (struct CGSize { float x1; float x2; })pkui_sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })pkui_sizeThatFits:(struct CGSize { float x1; float x2; })arg1 forceWordWrap:(BOOL)arg2;

// Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI

- (void)transitionToTextColor:(id)arg1 duration:(double)arg2;

// Image: /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation

- (BOOL)MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
- (void)MPU_configureWithTextAttributes:(id)arg1;
- (id)MPU_contentSizeUpdater;
- (void)MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:(BOOL)arg1;

// Image: /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI

- (int)_textAlignmentFromElementAlignment:(unsigned int)arg1;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3 capitalize:(BOOL)arg4;

// Image: /System/Library/PrivateFrameworks/NetAppsUtilitiesUI.framework/NetAppsUtilitiesUI

- (float)naui_baselineOffsetFromBottom;
- (float)naui_capOffsetFromTop;
- (float)naui_distanceFromBaselineToCoordinate:(float)arg1 inView:(id)arg2;
- (void)naui_reloadDynamicFontWithTextStyleDescriptor:(id)arg1;

// Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos

+ (void)rc_transitionFromLabel:(id)arg1 toLabelWithText:(id)arg2 sizeNewLabelToFit:(BOOL)arg3 duration:(double)arg4 newLabelTransitionCompleteHandler:(id /* block */)arg5;

- (float)rc_baselineOffsetFromBottom;
- (float)rc_capOffsetFromTop;
- (float)rc_distanceFromBaselineToCoordinate:(float)arg1 inView:(id)arg2;

// Image: /System/Library/PrivateFrameworks/WeatherUI.framework/WeatherUI

- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForBaseline:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setFrameOnBaseline:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;

@end
