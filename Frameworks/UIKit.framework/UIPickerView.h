/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIPickerView : UIView <NSCoding, UIPickerTableViewContainerDelegate, UIPickerViewScrollTesting, UITableViewDataSource, UITableViewDelegate> {
    UIView *_backgroundView;
    UIImageView *_bottomGradient;
    UIView *_bottomLineView;
    _UIPickerViewTestParameters *_currentTestParameters;
    <UIPickerViewDataSource> *_dataSource;
    <UIPickerViewDelegate> *_delegate;
    NSMutableArray *_dividers;
    UIView *_foregroundView;
    BOOL _isInLayoutSubviews;
    BOOL _magnifierEnabled;
    CALayer *_maskGradientLayer;
    int _numberOfComponents;
    struct { 
        unsigned int needsLayout : 1; 
        unsigned int delegateRespondsToNumberOfComponentsInPickerView : 1; 
        unsigned int delegateRespondsToNumberOfRowsInComponent : 1; 
        unsigned int delegateRespondsToDidSelectRow : 1; 
        unsigned int delegateRespondsToViewForRow : 1; 
        unsigned int delegateRespondsToTitleForRow : 1; 
        unsigned int delegateRespondsToAttributedTitleForRow : 1; 
        unsigned int delegateRespondsToWidthForComponent : 1; 
        unsigned int delegateRespondsToRowHeightForComponent : 1; 
        unsigned int showsSelectionBar : 1; 
        unsigned int allowsMultipleSelection : 1; 
        unsigned int allowSelectingCells : 1; 
        unsigned int soundsDisabled : 1; 
        unsigned int usesCheckedSelection : 1; 
        unsigned int skipsBackground : 1; 
    } _pickerViewFlags;
    NSMutableArray *_selectionBars;
    NSMutableArray *_tables;
    UIColor *_textColor;
    UIColor *_textShadowColor;
    UIView *_topFrame;
    UIImageView *_topGradient;
    UIView *_topLineView;
    BOOL _usesModernStyle;
}

@property (setter=_setInLayoutSubviews:, nonatomic) BOOL _isInLayoutSubviews;
@property (setter=_setMagnifierEnabled:, nonatomic) BOOL _magnifierEnabled;
@property (nonatomic) <UIPickerViewDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <UIPickerViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (getter=_highlightColor, setter=_setHighlightColor:, nonatomic, retain) UIColor *highlightColor;
@property (nonatomic, readonly) int numberOfComponents;
@property (nonatomic) BOOL showsSelectionIndicator;
@property (readonly) Class superclass;
@property (getter=_textColor, setter=_setTextColor:, nonatomic, retain) UIColor *textColor;
@property (getter=_textShadowColor, setter=_setTextShadowColor:, nonatomic, retain) UIColor *textShadowColor;
@property (getter=_usesModernStyle, setter=_setUsesModernStyle:) BOOL usesModernStyle;

// Image: /System/Library/Frameworks/UIKit.framework/UIKit

+ (id)_modernCenterCellFont;
+ (id)_modernNonCenterCellFont;
+ (struct CGSize { float x1; float x2; })defaultSizeForCurrentOrientation;
+ (struct CGSize { float x1; float x2; })defaultSizeForMainScreenTraits;
+ (struct CGSize { float x1; float x2; })defaultSizeForTraits:(id)arg1;
+ (struct CGSize { float x1; float x2; })sizeForMainScreenTraitsThatFits:(struct CGSize { float x1; float x2; })arg1;
+ (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1 forTraits:(id)arg2;

- (void).cxx_destruct;
- (void)_addMagnifierLinesForRowHeight:(float)arg1;
- (void)_completeCurrentTest;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (id)_contentView;
- (id)_createColumnWithTableFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 rowHeight:(float)arg2;
- (id)_createTableWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forComponent:(int)arg2;
- (id)_createViewForPickerPiece:(int)arg1;
- (id)_delegateAttributedTitleForRow:(int)arg1 forComponent:(int)arg2;
- (int)_delegateNumberOfComponents;
- (int)_delegateNumberOfRowsInComponent:(int)arg1;
- (float)_delegateRowHeightForComponent:(int)arg1;
- (id)_delegateTitleForRow:(int)arg1 forComponent:(int)arg2;
- (float)_delegateWidthForComponent:(int)arg1 ofCount:(int)arg2 withSizeLeft:(float)arg3;
- (BOOL)_drawsBackground;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_effectiveTableViewFrameForColumn:(int)arg1;
- (id)_highlightColor;
- (struct CGSize { float x1; float x2; })_intrinsicSizeWithinSize:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)_isInLayoutSubviews;
- (BOOL)_isLandscapeOrientation;
- (void)_iterateOnCurrentTest;
- (BOOL)_magnifierEnabled;
- (void)_noteScrollingFinishedForComponent:(int)arg1;
- (id)_orientationImageSuffix;
- (void)_performScrollTest:(id)arg1 withIterations:(int)arg2 rowsToScroll:(int)arg3 inComponent:(int)arg4;
- (struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })_perspectiveTransform;
- (id)_popoverSuffix;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_resetSelectionOfTables;
- (void)_selectRow:(int)arg1 inComponent:(int)arg2 animated:(BOOL)arg3 notify:(BOOL)arg4;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionBarRectForHeight:(float)arg1;
- (id)_selectionBarSuffix;
- (void)_sendCheckedRow:(int)arg1 inTableView:(id)arg2 checked:(BOOL)arg3;
- (void)_sendSelectionChangedForComponent:(int)arg1 notify:(BOOL)arg2;
- (void)_sendSelectionChangedFromTable:(id)arg1 notify:(BOOL)arg2;
- (void)_setDrawsBackground:(BOOL)arg1;
- (void)_setHighlightColor:(id)arg1;
- (void)_setInLayoutSubviews:(BOOL)arg1;
- (void)_setMagnifierEnabled:(BOOL)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextShadowColor:(id)arg1;
- (void)_setUsesCheckedSelection:(BOOL)arg1;
- (void)_setUsesModernStyle:(BOOL)arg1;
- (BOOL)_shouldDrawWithModernStyle;
- (struct CGSize { float x1; float x2; })_sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)_soundsEnabled;
- (float)_tableRowHeight;
- (id)_textColor;
- (id)_textShadowColor;
- (void)_updateSelectedRows;
- (void)_updateSound;
- (void)_updateWithOldSize:(struct CGSize { float x1; float x2; })arg1 newSize:(struct CGSize { float x1; float x2; })arg2;
- (BOOL)_usesCheckSelection;
- (BOOL)_usesCheckedSelection;
- (BOOL)_usesModernStyle;
- (float)_wheelShift;
- (BOOL)allowsMultipleSelection;
- (int)columnForTableView:(id)arg1;
- (id)createDividerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)dataSource;
- (void)dealloc;
- (struct CGSize { float x1; float x2; })defaultSize;
- (id)delegate;
- (void)didMoveToWindow;
- (void)encodeWithCoder:(id)arg1;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)imageForPickerPiece:(int)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isAccessibilityElementByDefault;
- (void)layoutSubviews;
- (int)numberOfColumns;
- (int)numberOfComponents;
- (int)numberOfRowsInColumn:(int)arg1;
- (int)numberOfRowsInComponent:(int)arg1;
- (id)pickerImageNamePrefix;
- (void)reload;
- (void)reloadAllComponents;
- (void)reloadAllPickerPieces;
- (void)reloadComponent:(int)arg1;
- (void)reloadData;
- (void)reloadDataForColumn:(int)arg1;
- (struct CGSize { float x1; float x2; })rowSizeForComponent:(int)arg1;
- (double)scrollAnimationDuration;
- (void)selectRow:(int)arg1 inColumn:(int)arg2 animated:(BOOL)arg3;
- (void)selectRow:(int)arg1 inComponent:(int)arg2 animated:(BOOL)arg3;
- (int)selectedRowForColumn:(int)arg1;
- (int)selectedRowInComponent:(int)arg1;
- (void)setAllowsMultipleSelection:(BOOL)arg1;
- (void)setAlpha:(float)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setHidden:(BOOL)arg1;
- (void)setNeedsLayout;
- (void)setShowsSelectionIndicator:(BOOL)arg1;
- (void)setSoundsEnabled:(BOOL)arg1;
- (BOOL)showsSelectionIndicator;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (int)tableView:(id)arg1 numberOfRowsInSection:(int)arg2;
- (id)tableViewForColumn:(int)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (id)viewForRow:(int)arg1 forComponent:(int)arg2;
- (struct _NSRange { unsigned int x1; unsigned int x2; })visibleRowsForColumn:(int)arg1;

// Image: /System/Library/Frameworks/PassKit.framework/PassKit

- (void)pk_applyAppearance:(struct _PKAppearanceSpecifier { BOOL x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; id x12; id x13; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; inout void*x44; unsigned char x45; out in void*x46; void*x47; BOOL x48; void*x49; long x50; void*x51; short x52; short x53; void*x54; void*x55; void*x56; void*x57; void*x58; in void*x59; unsigned short x60; void*x61; short x62; short x63; int x64; out in unsigned int x65; in void*x66; void*x67; const float x68; void*x69; BOOL x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; inout void*x84; unsigned char x85; out in void*x86; void*x87; BOOL x88; void*x89; long x90; void*x91; short x92; short x93; void*x94; void*x95; void*x96; void*x97; void*x98; in void*x99; unsigned short x100; void*x101; short x102; short x103; int x104; out in unsigned int x105; in void*x106; void*x107; const float x108; void*x109; BOOL x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; unsigned short x125; void*x126; short x127; void*x128; void*x129; void*x130; void*x131; unsigned long x132; int x133; unsigned int x134/* : ? */; const void*x135; const void*x136; void*x137; void*x138; const int x139; void x140; void*x141; void*x142; void*x143; void*x144; const void*x145; void*x146; void*x147; void*x148; out const void*x149; short x150; void*x151; inout void*x152; void*x153; const void*x154; int x155; void*x156; long x157; double x158; void*x159; float x160; const void*x161; void*x162; void*x163; void*x164; out const void*x165; void*x166; inout void*x167; void*x168; const void*x169; int x170; void*x171; long x172; double x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; int x227; long x228; int x229; void*x230; int x231; void*x232; short x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; int x291; long x292; int x293; void*x294; int x295; void*x296; short x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; short x321; const void*x322; long x323; int x324; unsigned int x325/* : ? */; void*x326; long x327; int x328; unsigned int x329/* : ? */; void*x330; void*x331; void*x332; void*x333; double x334; void*x335; void*x336; void*x337; void*x338; double x339; void*x340; long x341; int x342; unsigned int x343/* : ? */; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; out in void*x402; void*x403; void*x404; void*x405; BOOL x406; void*x407; bool x408; const void*x409; short x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; }*)arg1;
- (id)pk_childrenForAppearance;

@end
