/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@interface __NSCFURLLocalStreamTask : NSURLSessionTask {
    NSMutableArray *_afterConnectQueue;
    BOOL _betterRouteDiscovered;
    NSString *_boundInterfaceIdentifier;
    int _connectionState;
    long long _countOfBytesExpectedToReceive;
    long long _countOfBytesExpectedToSend;
    long long _countOfBytesReceived;
    long long _countOfBytesSent;
    NSURLRequest *_currentRequest;
    BOOL _disallowCellular;
    id /* block */ _disavow;
    BOOL _doingWorkOnThisQueue;
    NSError *_error;
    long long _expectedWorkload;
    NSMutableArray *_extraWork;
    NSMutableArray *_finalizationQueue;
    BOOL _goneSecure;
    NSString *_ledBellyServiceIdentifier;
    NSDictionary *_legacySocketStreamProperties;
    double _loadingPriorityValue;
    int _networkServiceType;
    NSURLRequest *_originalRequest;
    NSMutableArray *_pendingWork;
    long long _priorityValue;
    NSData *_readBuffer;
    BOOL _readEOF;
    struct { 
        int domain; 
        int error; 
    } _readError;
    BOOL _readSignaled;
    struct __CFReadStream { } *_readStream;
    NSURLResponse *_response;
    __NSURLSessionLocal *_session;
    struct BaseSocketStreamClient { int (**x1)(); } *_socketStreamClient;
    int _state;
    NSString *_taskDescription;
    unsigned int _taskIdentifier;
    NSObject<OS_dispatch_source> *_tickerTimeoutTimer;
    double _timeWindowDelay;
    double _timeWindowDuration;
    NSObject<OS_dispatch_queue> *_workQueue;
    NSData *_writeBuffer;
    long _writeBufferAlreadyWrittenForNextWrite;
    BOOL _writeEOF;
    struct { 
        int domain; 
        int error; 
    } _writeError;
    BOOL _writeSignaled;
    struct __CFWriteStream { } *_writeStream;
    double startTime;
}

@property (readonly) BOOL _goneSecure;
@property long long countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend;
@property long long countOfBytesReceived;
@property long long countOfBytesSent;
@property (copy) NSURLRequest *currentRequest;
@property (copy) NSError *error;
@property (copy) NSURLRequest *originalRequest;
@property (copy) NSURLResponse *response;
@property int state;
@property (copy) NSString *taskDescription;
@property unsigned int taskIdentifier;

- (id)_boundInterfaceIdentifier;
- (struct __CFDictionary { }*)_copySocketStreamProperties;
- (BOOL)_disallowCellular;
- (long long)_expectedWorkload;
- (BOOL)_goneSecure;
- (id)_initCommonWithSession:(id)arg1 disavow:(id /* block */)arg2;
- (id)_initWithExistingTask:(id)arg1 disavow:(id /* block */)arg2;
- (id)_initWithSession:(id)arg1 disavow:(id /* block */)arg2;
- (void)_init_setupTimeoutTimer;
- (id)_ledBellyServiceIdentifier;
- (id)_legacySocketStreamProperties;
- (int)_networkServiceType;
- (void)_onqueue_addBlockOp:(id /* block */)arg1 description:(const char *)arg2;
- (void)_onqueue_addBlockOpAtHead:(id /* block */)arg1 description:(const char *)arg2;
- (void)_onqueue_captureStreams;
- (void)_onqueue_checkForCompletion;
- (void)_onqueue_closeReadOp;
- (void)_onqueue_closeWriteOp;
- (void)_onqueue_dealWithSessionClientCertAuth:(int)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_dealWithSessionTrustAuth:(int)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_disavow;
- (id)_onqueue_errorOrCancelError;
- (void)_onqueue_ioTick;
- (void)_onqueue_needClientCert:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_needServerTrust:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_postConnectConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_preConnectionConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (BOOL)_onqueue_processReadWork:(id)arg1;
- (BOOL)_onqueue_processWriteWork:(id)arg1;
- (void)_onqueue_readDataOfMinLength:(unsigned int)arg1 maxLength:(unsigned int)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
- (void)_onqueue_readStream:(struct __CFReadStream { }*)arg1 writeStreamAvailable:(struct __CFWriteStream { }*)arg2;
- (void)_onqueue_readStreamEvent:(unsigned long)arg1;
- (void)_onqueue_resume;
- (void)_onqueue_scheduleStreams;
- (BOOL)_onqueue_sendSessionChallenge:(id)arg1 completionHandler:(id /* block */)arg2;
- (BOOL)_onqueue_shufflePendingFor:(Class)arg1;
- (void)_onqueue_startSecureConnection;
- (void)_onqueue_stopSecureConnection;
- (void)_onqueue_unscheduleStreams;
- (void)_onqueue_writeData:(id)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_writeStreamEvent:(unsigned long)arg1;
- (void)_reportTimingDataToAWD;
- (void)_task_onqueue_didFinish;
- (void)_task_onqueue_didReceiveDispatchData:(id)arg1 completionHandler:(id /* block */)arg2;
- (double)_timeWindowDelay;
- (double)_timeWindowDuration;
- (void)adjustConditionalConnectionProperties:(struct __CFDictionary { }*)arg1;
- (void)cancel;
- (void)captureStreams;
- (void)cleanupAndBreakCycles;
- (void)closeRead;
- (void)closeWrite;
- (long long)computeAdjustedPoolPriority;
- (long long)countOfBytesExpectedToReceive;
- (long long)countOfBytesExpectedToSend;
- (long long)countOfBytesReceived;
- (long long)countOfBytesSent;
- (id)currentRequest;
- (void)dealloc;
- (id)describePending:(id)arg1;
- (id)description;
- (id)error;
- (id)initWithHost:(id)arg1 port:(int)arg2 session:(id)arg3 disavow:(id /* block */)arg4;
- (id)initWithNetService:(id)arg1 session:(id)arg2 disavow:(id /* block */)arg3;
- (id)originalRequest;
- (void)readDataOfMinLength:(unsigned int)arg1 maxLength:(unsigned int)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
- (id)response;
- (void)resume;
- (void)setCountOfBytesExpectedToReceive:(long long)arg1;
- (void)setCountOfBytesExpectedToSend:(long long)arg1;
- (void)setCountOfBytesReceived:(long long)arg1;
- (void)setCountOfBytesSent:(long long)arg1;
- (void)setCurrentRequest:(id)arg1;
- (void)setError:(id)arg1;
- (void)setOriginalRequest:(id)arg1;
- (void)setResponse:(id)arg1;
- (void)setState:(int)arg1;
- (void)setTaskDescription:(id)arg1;
- (void)setTaskIdentifier:(unsigned int)arg1;
- (void)set_boundInterfaceIdentifier:(id)arg1;
- (void)set_disallowCellular:(BOOL)arg1;
- (void)set_expectedWorkload:(long long)arg1;
- (void)set_ledBellyServiceIdentifier:(id)arg1;
- (void)set_legacySocketStreamProperties:(id)arg1;
- (void)set_networkServiceType:(int)arg1;
- (void)set_timeWindowDelay:(double)arg1;
- (void)set_timeWindowDuration:(double)arg1;
- (void)startSecureConnection;
- (int)state;
- (void)stopSecureConnection;
- (void)suspend;
- (id)taskDescription;
- (unsigned int)taskIdentifier;
- (void)writeData:(id)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;

@end
