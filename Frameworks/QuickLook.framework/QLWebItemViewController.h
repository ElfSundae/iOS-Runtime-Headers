/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuickLook.framework/QuickLook
 */

@interface QLWebItemViewController : QLItemViewController <QLScrubViewDataSource, UIScrollViewDelegate, UIWebPDFViewHandlerDelegate, UIWebViewDelegate> {
    id /* block */  _completionBlock;
    float  _defaultZoom;
    BOOL  _embeddedPDFWasCopied;
    QLPDFHanderDelegateForwarder * _forwarder;
    BOOL  _fullScreen;
    NSMutableArray * _htmlSlideNodes;
    BOOL  _inScroll;
    unsigned int  _isLoadedDuringZoom;
    int  _lastPage;
    unsigned int  _loadStarted;
    NSString * _password;
    NSData * _pdfPreviewData;
    QLPreviewConverter * _previewConverter;
    NSURLRequest * _previewRequest;
    QLWebViewPrintPageHelper * _printPageHelper;
    QLScrubView * _scrubView;
    NSLayoutConstraint * _scrubberRightConstraint;
    BOOL  _tryToFit;
    UIWebView * _webView;
    BOOL  _webViewReadyForThumbnailing;
    unsigned int  webItemType;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (retain) NSString *password;
@property (readonly) NSData *pdfPreviewData;
@property (readonly) QLPreviewConverter *previewConverter;
@property (readonly) QLScrubView *scrubView;
@property (readonly) Class superclass;
@property (readonly) unsigned int webItemType;
@property (readonly) UIWebView *webView;

- (void).cxx_destruct;
- (id)_defaultColor;
- (struct CGPDFDocument { }*)_getCGPDFDocumentRef;
- (void)_hideScrubberIfNeeded:(BOOL)arg1;
- (id)_htmlPageXPath;
- (id)_htmlSlideNodes;
- (void)_showScrubberIfNeeded:(BOOL)arg1;
- (void)_updateScrubberForTraitCollection:(id)arg1 animated:(BOOL)arg2;
- (void)_updateScrubberVisibilityAnimated:(BOOL)arg1;
- (id)alertViewForUIWebPDFViewHandler:(id)arg1;
- (BOOL)automaticallyUpdateScrollViewContentInset;
- (BOOL)automaticallyUpdateScrollViewContentOffset;
- (BOOL)canEnterFullScreen;
- (BOOL)canPinchToDismiss;
- (BOOL)canSwipeToDismiss;
- (unsigned int)currentPageNumber;
- (void)dealloc;
- (void)didReceiveMemoryWarning;
- (void)loadPreviewControllerWithPreviewItem:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)loadView;
- (int)numberOfPagesInScrubView:(id)arg1;
- (struct CGPoint { float x1; float x2; })originForPDFPageLabelViewWithHandler:(id)arg1 proposedOrigin:(struct CGPoint { float x1; float x2; })arg2;
- (int)pageCount;
- (struct CGSize { float x1; float x2; })pageSizeAtIndex:(int)arg1;
- (id)password;
- (id)pdfPreviewData;
- (void)pdfViewHandlerCompletedLayoutAndIsUnlocked:(id)arg1;
- (void)performCompletionBlockWithError:(id)arg1;
- (int)preferredWhitePointAdaptivityStyle;
- (void)previewBecameFullScreen:(BOOL)arg1 animated:(BOOL)arg2;
- (id)previewConverter;
- (void)previewDidDisappear:(BOOL)arg1;
- (id)printer;
- (id)registeredKeyCommands;
- (void)scrollToPage:(unsigned int)arg1;
- (id)scrollView;
- (void)scrollViewDidScroll:(id)arg1;
- (id)scrubView;
- (void)scrubView:(id)arg1 didSelectPageAtIndex:(unsigned int)arg2;
- (struct CGSize { float x1; float x2; })scrubView:(id)arg1 pageSizeAtIndex:(unsigned int)arg2;
- (id)scrubView:(id)arg1 thumbnailOperationForPageAtIndex:(unsigned int)arg2;
- (void)setAppearance:(id)arg1 animated:(BOOL)arg2;
- (void)setPassword:(id)arg1;
- (BOOL)shouldAcceptTouch:(id)arg1 ofGestureRecognizer:(id)arg2;
- (BOOL)shouldRecognizeGestureRecognizer:(id)arg1;
- (void)transitionDidFinish:(BOOL)arg1 didComplete:(BOOL)arg2;
- (void)transitionDidStart:(BOOL)arg1;
- (void)transitionWillFinish:(BOOL)arg1 didComplete:(BOOL)arg2;
- (id)transitioningView;
- (void)uiWebView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (void)uiWebView:(id)arg1 didFirstLayoutInFrame:(id)arg2;
- (void)uiWebView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;
- (void)uiWebView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (id)uiWebView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { float x1; float x2; })arg1 withTransitionCoordinator:(id)arg2;
- (unsigned int)webItemType;
- (id)webView;
- (BOOL)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(int)arg3;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)willTransitionToTraitCollection:(id)arg1 withTransitionCoordinator:(id)arg2;

@end
