/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Speech.framework/Speech
 */

@interface SFSpeechRecognizer : NSObject <AFDictationDelegate> {
    int  _defaultTaskHint;
    <SFSpeechRecognizerDelegate> * _delegate;
    AFDictationConnection * _dictationConnection;
    <NSObject> * _facetimeObserver;
    <NSObject> * _foregroundObserver;
    NSString * _languageCode;
    NSLocale * _locale;
    <NSObject> * _preferencesObserver;
    NSOperationQueue * _queue;
}

@property (getter=_isAvailableForForcedOfflineRecognition, nonatomic, readonly) BOOL _availableForForcedOfflineRecognition;
@property (getter=isAvailable, nonatomic, readonly) BOOL available;
@property (getter=isAvailableForRecordingRecognition, nonatomic, readonly) BOOL availableForRecordingRecognition;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) int defaultTaskHint;
@property (nonatomic) <SFSpeechRecognizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly, copy) NSLocale *locale;
@property (nonatomic, retain) NSOperationQueue *queue;
@property (readonly) Class superclass;

+ (void)_fetchSupportedForcedOfflineLocalesWithCompletion:(id /* block */)arg1;
+ (int)authorizationStatus;
+ (void)initialize;
+ (void)requestAuthorization:(id /* block */)arg1;
+ (id)supportedLocales;

- (void).cxx_destruct;
- (void)_informDelegateOfAvailabilityChange;
- (void)_informDelegateOfPreferencesChange;
- (BOOL)_isAvailableForForcedOfflineRecognition;
- (BOOL)_isInternalTaskHint:(int)arg1;
- (id)_recognitionTaskWithResultHandler:(id /* block */)arg1;
- (void)_requestOfflineDictationSupportWithCompletion:(id /* block */)arg1;
- (void)_sendEngagementFeedback:(int)arg1 requestIdentifier:(id)arg2;
- (void)dealloc;
- (int)defaultTaskHint;
- (id)delegate;
- (void)dictationConnnectionDidChangeAvailability:(id)arg1;
- (id)init;
- (id)initWithLocale:(id)arg1;
- (BOOL)isAvailable;
- (BOOL)isAvailableForRecordingRecognition;
- (id)locale;
- (void)prepareWithRequest:(id)arg1;
- (id)queue;
- (id)recognitionTaskWithRequest:(id)arg1 delegate:(id)arg2;
- (id)recognitionTaskWithRequest:(id)arg1 resultHandler:(id /* block */)arg2;
- (void)setDefaultTaskHint:(int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setQueue:(id)arg1;

@end
