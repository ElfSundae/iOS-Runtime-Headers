/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKWebView : UIView <UIScrollViewDelegate, WBUFormAutoFillWebView> {
    int  _activeAnimatedResizeCount;
    unsigned int  _activeFocusedStateRetainCount;
    BOOL  _allowsBackForwardNavigationGestures;
    BOOL  _allowsLinkPreview;
    BOOL  _allowsViewportShrinkToFit;
    BOOL  _commitDidRestoreScrollPosition;
    struct RetainPtr<WKWebViewConfiguration> { 
        void *m_ptr; 
    }  _configuration;
    struct RetainPtr<WKContentView> { 
        void *m_ptr; 
    }  _contentView;
    BOOL  _currentlyAdjustingScrollViewInsetsForKeyboard;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _customContentFixedOverlayView;
    struct RetainPtr<UIView<WKWebViewContentProvider> > { 
        void *m_ptr; 
    }  _customContentView;
    BOOL  _delayUpdateVisibleContentRects;
    BOOL  _didScrollSinceLastTimerFire;
    int  _dynamicViewportUpdateMode;
    struct RetainPtr<NSTimer> { 
        void *m_ptr; 
    }  _enclosingScrollViewScrollTimer;
    BOOL  _fastClickingIsDisabled;
    unsigned long long  _firstPaintAfterCommitLoadTransactionID;
    unsigned long long  _firstTransactionIDAfterPageRestore;
    struct optional<CGRect> { 
        bool init_; 
        union constexpr_storage_t<CGRect> { 
            unsigned char dummy_; 
            struct CGRect { 
                struct CGPoint { 
                    float x; 
                    float y; 
                } origin; 
                struct CGSize { 
                    float width; 
                    float height; 
                } size; 
            } value_; 
        } storage_; 
    }  _frozenUnobscuredContentRect;
    struct optional<CGRect> { 
        bool init_; 
        union constexpr_storage_t<CGRect> { 
            unsigned char dummy_; 
            struct CGRect { 
                struct CGPoint { 
                    float x; 
                    float y; 
                } origin; 
                struct CGSize { 
                    float width; 
                    float height; 
                } size; 
            } value_; 
        } storage_; 
    }  _frozenVisibleContentRect;
    struct unique_ptr<WebKit::ViewGestureController, std::__1::default_delete<WebKit::ViewGestureController> > { 
        struct __compressed_pair<WebKit::ViewGestureController *, std::__1::default_delete<WebKit::ViewGestureController> > { 
            struct ViewGestureController {} *__first_; 
        } __ptr_; 
    }  _gestureController;
    BOOL  _hadDelayedUpdateVisibleContentRects;
    BOOL  _hasCommittedLoadForMainFrame;
    BOOL  _haveSetObscuredInsets;
    struct unique_ptr<WebKit::IconLoadingDelegate, std::__1::default_delete<WebKit::IconLoadingDelegate> > { 
        struct __compressed_pair<WebKit::IconLoadingDelegate *, std::__1::default_delete<WebKit::IconLoadingDelegate> > { 
            struct IconLoadingDelegate {} *__first_; 
        } __ptr_; 
    }  _iconLoadingDelegate;
    float  _initialScaleFactor;
    /* Warning: unhandled struct encoding: '{WeakObjCPtr<id<_WKInputDelegate> >="m_weakReference"@}' */ struct WeakObjCPtr<id<_WKInputDelegate> > { 
        id m_weakReference; 
    }  _inputDelegate;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    }  _inputViewBounds;
    int  _interfaceOrientationOverride;
    BOOL  _isChangingObscuredInsetsInteractively;
    float  _lastAdjustmentForScroller;
    struct CGSize { 
        float width; 
        float height; 
    }  _maximumUnobscuredSizeOverride;
    struct CGSize { 
        float width; 
        float height; 
    }  _minimumLayoutSizeOverride;
    struct unique_ptr<WebKit::NavigationState, std::__1::default_delete<WebKit::NavigationState> > { 
        struct __compressed_pair<WebKit::NavigationState *, std::__1::default_delete<WebKit::NavigationState> > { 
            struct NavigationState {} *__first_; 
        } __ptr_; 
    }  _navigationState;
    BOOL  _needsResetViewStateAfterCommitLoadForMainFrame;
    BOOL  _needsToRestoreScrollPosition;
    BOOL  _needsToRestoreUnobscuredCenter;
    struct FloatSize { 
        float m_width; 
        float m_height; 
    }  _obscuredInsetWhenSaved;
    struct UIEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    }  _obscuredInsets;
    unsigned int  _observedRenderingProgressEvents;
    BOOL  _overridesInterfaceOrientation;
    BOOL  _overridesMaximumUnobscuredSize;
    BOOL  _overridesMinimumLayoutSize;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    }  _page;
    struct RetainPtr<_WKRemoteObjectRegistry> { 
        void *m_ptr; 
    }  _remoteObjectRegistry;
    struct CATransform3D { 
        float m11; 
        float m12; 
        float m13; 
        float m14; 
        float m21; 
        float m22; 
        float m23; 
        float m24; 
        float m31; 
        float m32; 
        float m33; 
        float m34; 
        float m41; 
        float m42; 
        float m43; 
        float m44; 
    }  _resizeAnimationTransformAdjustments;
    struct optional<unsigned long long> { 
        bool init_; 
        union constexpr_storage_t<unsigned long long> { 
            unsigned char dummy_; 
            unsigned long long value_; 
        } storage_; 
    }  _resizeAnimationTransformTransactionID;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    }  _resizeAnimationView;
    double  _scaleToRestore;
    struct FloatPoint { 
        float m_x; 
        float m_y; 
    }  _scrollOffsetToRestore;
    struct RetainPtr<WKScrollView> { 
        void *m_ptr; 
    }  _scrollView;
    struct Color { 
        union { 
            unsigned long long rgbaAndFlags; 
            struct ExtendedColor {} *extendedColor; 
        } m_colorData; 
    }  _scrollViewBackgroundColor;
    struct Vector<std::__1::function<void ()>, 0, WTF::CrashOnOverflow, 16>="m_buffer"^{function<void ()> {}  _snapshotsDeferredDuringResize;
    struct RetainPtr<NSMutableArray> { 
        void *m_ptr; 
    }  _stableStatePresentationUpdateCallbacks;
    float  _totalScrollViewBottomInsetAdjustmentForKeyboard;
    struct unique_ptr<WebKit::UIDelegate, std::__1::default_delete<WebKit::UIDelegate> > { 
        struct __compressed_pair<WebKit::UIDelegate *, std::__1::default_delete<WebKit::UIDelegate> > { 
            struct UIDelegate {} *__first_; 
        } __ptr_; 
    }  _uiDelegate;
    struct FloatPoint { 
        float m_x; 
        float m_y; 
    }  _unobscuredCenterToRestore;
    BOOL  _viewportMetaTagCameFromImageDocument;
    float  _viewportMetaTagWidth;
    BOOL  _viewportMetaTagWidthWasExplicit;
}

@property (nonatomic) <WKUIDelegate> *UIDelegate;
@property (nonatomic, readonly, copy) NSURL *URL;
@property (nonatomic, readonly) NSString *_MIMEType;
@property (setter=_setAddsVisitedLinks:, nonatomic) BOOL _addsVisitedLinks;
@property (nonatomic, readonly) BOOL _allowsDoubleTapGestures;
@property (getter=_allowsMediaDocumentInlinePlayback, setter=_setAllowsMediaDocumentInlinePlayback:, nonatomic) BOOL _allowsMediaDocumentInlinePlayback;
@property (setter=_setAllowsRemoteInspection:, nonatomic) BOOL _allowsRemoteInspection;
@property (setter=_setAllowsViewportShrinkToFit:, nonatomic) BOOL _allowsViewportShrinkToFit;
@property (setter=_setApplicationNameForUserAgent:, copy) NSString *_applicationNameForUserAgent;
@property (setter=_setBackgroundExtendsBeyondPage:, nonatomic) BOOL _backgroundExtendsBeyondPage;
@property (nonatomic, readonly) NSArray *_certificateChain;
@property (nonatomic, readonly) NSURL *_committedURL;
@property (nonatomic, readonly) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } _computedContentInset;
@property (nonatomic, readonly) WKWebViewContentProviderRegistry *_contentProviderRegistry;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } _contentVisibleRect;
@property (setter=_setCustomUserAgent:, copy) NSString *_customUserAgent;
@property (nonatomic, readonly) NSData *_dataForDisplayedPDF;
@property (setter=_setDiagnosticLoggingDelegate:, nonatomic) <_WKDiagnosticLoggingDelegate> *_diagnosticLoggingDelegate;
@property (getter=_isDisplayingPDF, nonatomic, readonly) BOOL _displayingPDF;
@property (getter=_isDisplayingStandaloneImageDocument, nonatomic, readonly) BOOL _displayingStandaloneImageDocument;
@property (getter=_isDisplayingStandaloneMediaDocument, nonatomic, readonly) BOOL _displayingStandaloneMediaDocument;
@property (getter=_isEditable, setter=_setEditable:, nonatomic) BOOL _editable;
@property (setter=_setFindDelegate:, nonatomic) <_WKFindDelegate> *_findDelegate;
@property (setter=_setFixedLayoutSize:, nonatomic) struct CGSize { float x1; float x2; } _fixedLayoutSize;
@property (setter=_setFullscreenDelegate:, nonatomic) <_WKFullscreenDelegate> *_fullscreenDelegate;
@property (setter=_setGapBetweenPages:, nonatomic) float _gapBetweenPages;
@property (nonatomic, readonly) WKBrowsingContextHandle *_handle;
@property (setter=_setHistoryDelegate:, nonatomic) <WKHistoryDelegatePrivate> *_historyDelegate;
@property (setter=_setIconLoadingDelegate:, nonatomic) <_WKIconLoadingDelegate> *_iconLoadingDelegate;
@property (setter=_setInputDelegate:, nonatomic) <_WKInputDelegate> *_inputDelegate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } _inputViewBounds;
@property (setter=_setInterfaceOrientationOverride:, nonatomic) int _interfaceOrientationOverride;
@property (nonatomic, readonly) BOOL _isBackground;
@property (nonatomic, readonly) BOOL _isInFullscreen;
@property (setter=_setLayoutMode:, nonatomic) unsigned int _layoutMode;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } _maximumUnobscuredSizeOverride;
@property (nonatomic, readonly) struct CGSize { float x1; float x2; } _minimumLayoutSizeOverride;
@property (nonatomic, readonly) BOOL _networkRequestsInProgress;
@property (setter=_setObscuredInsets:, nonatomic) struct UIEdgeInsets { float x1; float x2; float x3; float x4; } _obscuredInsets;
@property (setter=_setObservedRenderingProgressEvents:, nonatomic) unsigned int _observedRenderingProgressEvents;
@property (readonly) unsigned int _pageCount;
@property (setter=_setPageLength:, nonatomic) float _pageLength;
@property (setter=_setPageZoomFactor:, nonatomic) double _pageZoomFactor;
@property (setter=_setPaginationBehavesLikeColumns:, nonatomic) BOOL _paginationBehavesLikeColumns;
@property (setter=_setPaginationLineGridEnabled:, nonatomic) BOOL _paginationLineGridEnabled;
@property (setter=_setPaginationMode:, nonatomic) int _paginationMode;
@property (nonatomic, readonly) <_WKWebViewPrintProvider> *_printProvider;
@property (setter=_setRemoteInspectionNameOverride:, nonatomic, copy) NSString *_remoteInspectionNameOverride;
@property (nonatomic, readonly) id _remoteObjectRegistry;
@property (nonatomic, readonly) NSArray *_scrollPerformanceData;
@property (setter=_setScrollPerformanceDataCollectionEnabled:, nonatomic) BOOL _scrollPerformanceDataCollectionEnabled;
@property (nonatomic, readonly) NSString *_scrollingTreeAsText;
@property (nonatomic, readonly) int _selectionGranularity;
@property (nonatomic, readonly) _WKSessionState *_sessionState;
@property (nonatomic, readonly) NSData *_sessionStateData;
@property (setter=_sf_setSecurityInfo:, nonatomic, retain) _SFSecurityInfo *_sf_securityInfo;
@property (getter=_isShowingNavigationGestureSnapshot, nonatomic, readonly) BOOL _showingNavigationGestureSnapshot;
@property (nonatomic, readonly) NSNumber *_stableStateOverride;
@property (nonatomic, readonly) NSString *_suggestedFilenameForDisplayedPDF;
@property (nonatomic, readonly) BOOL _supportsTextZoom;
@property (setter=_setTextZoomFactor:, nonatomic) double _textZoomFactor;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } _uiTextCaretRect;
@property (nonatomic, readonly) NSArray *_uiTextSelectionRects;
@property (nonatomic, readonly) NSURL *_unreachableURL;
@property (nonatomic, readonly) NSString *_userAgent;
@property (setter=_setUserContentExtensionsEnabled:, nonatomic) BOOL _userContentExtensionsEnabled;
@property (setter=_setViewScale:, nonatomic) float _viewScale;
@property (nonatomic, readonly) int _webProcessIdentifier;
@property (nonatomic, readonly) BOOL _webProcessIsResponsive;
@property (nonatomic, readonly) _WKWebViewPrintFormatter *_webViewPrintFormatter;
@property (nonatomic) BOOL allowsBackForwardNavigationGestures;
@property (nonatomic) BOOL allowsLinkPreview;
@property (nonatomic, readonly) WKBackForwardList *backForwardList;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) BOOL canGoForward;
@property (nonatomic, readonly, copy) NSArray *certificateChain;
@property (nonatomic, readonly, copy) WKWebViewConfiguration *configuration;
@property (nonatomic, copy) NSString *customUserAgent;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, readonly) BOOL hasOnlySecureContent;
@property (readonly) unsigned int hash;
@property (getter=isLoading, nonatomic, readonly) BOOL loading;
@property (nonatomic) <WKNavigationDelegate> *navigationDelegate;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) struct __SecTrust { }*serverTrust;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *title;
@property (setter=webui_setLastGeneratedPasswordForCurrentBackForwardItem:, nonatomic, copy) NSString *webui_lastGeneratedPasswordForCurrentBackForwardItem;
@property (nonatomic, readonly) UIViewController *webui_presentingViewController;
@property (nonatomic, readonly) BOOL webui_privateBrowsingEnabled;

// Image: /System/Library/Frameworks/WebKit.framework/WebKit

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)UIDelegate;
- (id)URL;
- (id)_MIMEType;
- (void)_accessibilitySettingsDidChange:(id)arg1;
- (BOOL)_addsVisitedLinks;
- (struct CGPoint { float x1; float x2; })_adjustedContentOffset:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)_allowsDoubleTapGestures;
- (BOOL)_allowsMediaDocumentInlinePlayback;
- (BOOL)_allowsRemoteInspection;
- (BOOL)_allowsViewportShrinkToFit;
- (id)_applicationNameForUserAgent;
- (BOOL)_backgroundExtendsBeyondPage;
- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)arg1 completionHandler:(id /* block */)arg2;
- (void)_beginAnimatedResizeWithUpdates:(id /* block */)arg1;
- (void)_beginInteractiveObscuredInsetsChange;
- (id)_certificateChain;
- (void)_close;
- (id)_committedURL;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_computedContentInset;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_contentBoundsExtendedForRubberbandingWithScale:(float)arg1;
- (id)_contentProviderRegistry;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_contentRectForUserInteraction;
- (id)_contentSizeCategory;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_contentVisibleRect;
- (id)_contentsOfUserInterfaceItem:(id)arg1;
- (struct CGPoint { float x1; float x2; })_convertPointFromContentsToView:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })_convertPointFromViewToContents:(struct CGPoint { float x1; float x2; })arg1;
- (void)_couldNotRestorePageState;
- (void)_countStringMatches:(id)arg1 options:(unsigned int)arg2 maxCount:(unsigned int)arg3;
- (id)_currentContentView;
- (id)_customUserAgent;
- (id)_dataDetectionResults;
- (id)_dataForDisplayedPDF;
- (id)_diagnosticLoggingDelegate;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow, 16> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_3_1_1; } x3; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didDismissForcePressPreview;
- (void)_didFailLoadForMainFrame;
- (void)_didFinishLoadForMainFrame;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg1 data:(id)arg2;
- (void)_didFinishScrolling;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_didRelaunchProcess;
- (void)_didSameDocumentNavigationForMainFrame:(int)arg1;
- (void)_didScroll;
- (void)_didShowForcePressPreview;
- (void)_disableBackForwardSnapshotVolatilityForTesting;
- (void)_doAfterNextPresentationUpdate:(id /* block */)arg1;
- (void)_doAfterNextPresentationUpdateWithoutWaitingForPainting:(id /* block */)arg1;
- (void)_doAfterNextStablePresentationUpdate:(id /* block */)arg1;
- (void)_dynamicViewportUpdateChangedTargetToScale:(double)arg1 position:(struct CGPoint { float x1; float x2; })arg2 nextValidLayerTreeTransactionID:(unsigned long long)arg3;
- (void)_enclosingScrollerScrollingEnded:(id)arg1;
- (void)_endAnimatedResize;
- (void)_endInteractiveObscuredInsetsChange;
- (id)_findDelegate;
- (void)_findString:(id)arg1 options:(unsigned int)arg2 maxCount:(unsigned int)arg3;
- (void)_firePresentationUpdateForPendingStableStatePresentationCallbacks;
- (struct CGSize { float x1; float x2; })_fixedLayoutSize;
- (id)_formDelegate;
- (void)_frameOrBoundsChanged;
- (id)_fullscreenDelegate;
- (float)_gapBetweenPages;
- (void)_getMainResourceDataWithCompletionHandler:(id /* block */)arg1;
- (void)_getWebArchiveDataWithCompletionHandler:(id /* block */)arg1;
- (id)_handle;
- (void)_handleActiveNowPlayingSessionInfoResponse:(BOOL)arg1 title:(id)arg2 duration:(double)arg3 elapsedTime:(double)arg4;
- (void)_hideContentUntilNextUpdate;
- (void)_hideFindUI;
- (id)_historyDelegate;
- (id)_iconLoadingDelegate;
- (void)_initializeWithConfiguration:(id)arg1;
- (id)_inputDelegate;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_inputViewBounds;
- (int)_interfaceOrientationOverride;
- (BOOL)_isBackground;
- (BOOL)_isDisplayingPDF;
- (BOOL)_isDisplayingStandaloneImageDocument;
- (BOOL)_isDisplayingStandaloneMediaDocument;
- (BOOL)_isEditable;
- (BOOL)_isInFullscreen;
- (BOOL)_isNavigationSwipeGestureRecognizer:(id)arg1;
- (BOOL)_isShowingNavigationGestureSnapshot;
- (BOOL)_isShowingVideoPictureInPicture;
- (void)_keyboardChangedWithInfo:(id)arg1 adjustScrollView:(BOOL)arg2;
- (void)_keyboardDidChangeFrame:(id)arg1;
- (void)_keyboardDidShow:(id)arg1;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (void)_killWebContentProcess;
- (void)_killWebContentProcessAndResetState;
- (void)_layerTreeCommitComplete;
- (unsigned int)_layoutMode;
- (void)_loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (id)_loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4 userData:(id)arg5;
- (struct CGSize { float x1; float x2; })_maximumUnobscuredSizeOverride;
- (BOOL)_mayAutomaticallyShowVideoPictureInPicture;
- (struct CGSize { float x1; float x2; })_minimumLayoutSizeOverride;
- (void)_navigationGestureDidBegin;
- (void)_navigationGestureDidEnd;
- (BOOL)_networkRequestsInProgress;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_obscuredInsets;
- (unsigned int)_observedRenderingProgressEvents;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { float x1; float x2; })arg1 maximumUnobscuredSizeOverride:(struct CGSize { float x1; float x2; })arg2;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { float x1; float x2; })arg1 minimumLayoutSizeForMinimalUI:(struct CGSize { float x1; float x2; })arg2 maximumUnobscuredSizeOverride:(struct CGSize { float x1; float x2; })arg3;
- (unsigned int)_pageCount;
- (struct OpaqueWKPage { }*)_pageForTesting;
- (float)_pageLength;
- (float)_pageScale;
- (double)_pageZoomFactor;
- (BOOL)_paginationBehavesLikeColumns;
- (BOOL)_paginationLineGridEnabled;
- (int)_paginationMode;
- (Class)_printFormatterClass;
- (id)_printProvider;
- (void)_processDidExit;
- (id)_reloadWithoutContentBlockers;
- (id)_remoteInspectionNameOverride;
- (id)_remoteObjectRegistry;
- (void)_requestActiveNowPlayingSessionInfo;
- (void)_resizeWhileHidingContentWithUpdates:(id /* block */)arg1;
- (void)_restoreFromSessionStateData:(id)arg1;
- (void)_restorePageScrollPosition:(struct FloatPoint { float x1; float x2; })arg1 scrollOrigin:(struct FloatPoint { float x1; float x2; })arg2 previousObscuredInset:(struct FloatSize { float x1; float x2; })arg3 scale:(double)arg4;
- (void)_restorePageStateToUnobscuredCenter:(struct FloatPoint { float x1; float x2; })arg1 scale:(double)arg2;
- (id)_restoreSessionState:(id)arg1 andNavigate:(BOOL)arg2;
- (id /* block */)_retainActiveFocusedState;
- (void)_saveBackForwardSnapshotForItem:(id)arg1;
- (void)_scrollByContentOffset:(struct FloatPoint { float x1; float x2; })arg1;
- (id)_scrollPerformanceData;
- (BOOL)_scrollPerformanceDataCollectionEnabled;
- (void)_scrollToContentScrollPosition:(struct FloatPoint { float x1; float x2; })arg1 scrollOrigin:(struct IntPoint { int x1; int x2; })arg2;
- (BOOL)_scrollToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 origin:(struct FloatPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (void)_scrollViewDidInterruptDecelerating:(id)arg1;
- (BOOL)_scrollViewIsRubberBanding;
- (id)_scrollingTreeAsText;
- (int)_selectionGranularity;
- (id)_sessionState;
- (id)_sessionStateData;
- (id)_sessionStateWithFilter:(id /* block */)arg1;
- (void)_setAddsVisitedLinks:(BOOL)arg1;
- (void)_setAllowsMediaDocumentInlinePlayback:(BOOL)arg1;
- (void)_setAllowsRemoteInspection:(BOOL)arg1;
- (void)_setAllowsViewportShrinkToFit:(BOOL)arg1;
- (void)_setApplicationNameForUserAgent:(id)arg1;
- (void)_setBackgroundExtendsBeyondPage:(BOOL)arg1;
- (void)_setCustomUserAgent:(id)arg1;
- (void)_setDiagnosticLoggingDelegate:(id)arg1;
- (void)_setEditable:(BOOL)arg1;
- (void)_setFindDelegate:(id)arg1;
- (void)_setFixedLayoutSize:(struct CGSize { float x1; float x2; })arg1;
- (void)_setFormDelegate:(id)arg1;
- (void)_setFullscreenDelegate:(id)arg1;
- (void)_setGapBetweenPages:(float)arg1;
- (void)_setHasCustomContentView:(BOOL)arg1 loadedMIMEType:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg2;
- (void)_setHistoryDelegate:(id)arg1;
- (void)_setIconLoadingDelegate:(id)arg1;
- (void)_setInputDelegate:(id)arg1;
- (void)_setInterfaceOrientationOverride:(int)arg1;
- (void)_setLayoutMode:(unsigned int)arg1;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { float x1; float x2; })arg1;
- (void)_setMinimumLayoutSizeOverride:(struct CGSize { float x1; float x2; })arg1;
- (void)_setObscuredInsets:(struct UIEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)_setObservedRenderingProgressEvents:(unsigned int)arg1;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { float x1; float x2; })arg1;
- (void)_setPageLength:(float)arg1;
- (void)_setPageScale:(float)arg1 withOrigin:(struct CGPoint { float x1; float x2; })arg2;
- (void)_setPageZoomFactor:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(BOOL)arg1;
- (void)_setPaginationLineGridEnabled:(BOOL)arg1;
- (void)_setPaginationMode:(int)arg1;
- (void)_setRemoteInspectionNameOverride:(id)arg1;
- (void)_setScrollPerformanceDataCollectionEnabled:(BOOL)arg1;
- (void)_setTextZoomFactor:(double)arg1;
- (void)_setUpSQLiteDatabaseTrackerClient;
- (void)_setUserContentExtensionsEnabled:(BOOL)arg1;
- (void)_setViewScale:(float)arg1;
- (BOOL)_shouldUpdateKeyboardWithInfo:(id)arg1;
- (id)_snapshotLayerContentsForBackForwardListItem:(id)arg1;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 intoImageOfWidth:(float)arg2 completionHandler:(id /* block */)arg3;
- (id)_stableStateOverride;
- (void)_stopMediaCapture;
- (id)_suggestedFilenameForDisplayedPDF;
- (BOOL)_supportsTextZoom;
- (struct PassRefPtr<WebKit::ViewSnapshot> { struct ViewSnapshot {} *x1; })_takeViewSnapshot;
- (float)_targetContentZoomScaleForRect:(const struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 currentScale:(double)arg2 fitEntireRect:(BOOL)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5;
- (double)_textZoomFactor;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_uiTextCaretRect;
- (id)_uiTextSelectionRects;
- (id)_unreachableURL;
- (void)_updateContentRectsWithState:(BOOL)arg1;
- (void)_updateScrollViewBackground;
- (void)_updateVisibleContentRectAfterScrollInView:(id)arg1;
- (void)_updateVisibleContentRects;
- (id)_userAgent;
- (BOOL)_userContentExtensionsEnabled;
- (id)_viewForFindUI;
- (float)_viewScale;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_visibleContentRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_visibleRectInEnclosingScrollView:(id)arg1;
- (int)_webProcessIdentifier;
- (BOOL)_webProcessIsResponsive;
- (id)_webViewPrintFormatter;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (void)_windowDidRotate:(id)arg1;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(BOOL)arg2;
- (void)_zoomToFocusRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 selectionRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 insideFixed:(BOOL)arg3 fontSize:(float)arg4 minimumScale:(double)arg5 maximumScale:(double)arg6 allowScaling:(BOOL)arg7 forceScroll:(BOOL)arg8;
- (void)_zoomToInitialScaleWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(BOOL)arg2;
- (void)_zoomToPoint:(struct FloatPoint { float x1; float x2; })arg1 atScale:(double)arg2 animated:(BOOL)arg3;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 atScale:(double)arg2 origin:(struct FloatPoint { float x1; float x2; })arg3 animated:(BOOL)arg4;
- (BOOL)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct FloatPoint { float x1; float x2; })arg2 fitEntireRect:(BOOL)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (BOOL)allowsBackForwardNavigationGestures;
- (BOOL)allowsLinkPreview;
- (id)backForwardList;
- (BOOL)becomeFirstResponder;
- (id)browsingContextController;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canGoBack;
- (BOOL)canGoForward;
- (id)certificateChain;
- (id)configuration;
- (id)customUserAgent;
- (void)dealloc;
- (void)didEndFormControlInteraction;
- (void)didMoveToWindow;
- (void)didStartFormControlInteraction;
- (void)dismissFormAccessoryView;
- (void)encodeWithCoder:(id)arg1;
- (double)estimatedProgress;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)goBack;
- (id)goForward;
- (id)goToBackForwardListItem:(id)arg1;
- (BOOL)hasOnlySecureContent;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (BOOL)isLoading;
- (void)keyboardAccessoryBarNext;
- (void)keyboardAccessoryBarPrevious;
- (void)layoutSubviews;
- (id)loadData:(id)arg1 MIMEType:(id)arg2 characterEncodingName:(id)arg3 baseURL:(id)arg4;
- (id)loadFileURL:(id)arg1 allowingReadAccessToURL:(id)arg2;
- (id)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (id)loadRequest:(id)arg1;
- (id)navigationDelegate;
- (id)reload;
- (id)reloadFromOrigin;
- (id)scrollView;
- (struct CGSize { float x1; float x2; })scrollView:(id)arg1 contentSizeForZoomScale:(float)arg2 withProposedSize:(struct CGSize { float x1; float x2; })arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(float)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { float x1; float x2; })arg2 targetContentOffset:(inout struct CGPoint { float x1; float x2; }*)arg3;
- (void)selectFormAccessoryPickerRow:(int)arg1;
- (struct __SecTrust { }*)serverTrust;
- (void)setAllowsBackForwardNavigationGestures:(BOOL)arg1;
- (void)setAllowsLinkPreview:(BOOL)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCustomUserAgent:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setNavigationDelegate:(id)arg1;
- (void)setOpaque:(BOOL)arg1;
- (void)setSemanticContentAttribute:(int)arg1;
- (void)setUIDelegate:(id)arg1;
- (void)stopLoading;
- (id)title;
- (BOOL)usesStandardContentView;
- (id)viewForZoomingInScrollView:(id)arg1;
- (struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })visibleRectInViewCoordinates;

// Image: /System/Library/Frameworks/SafariServices.framework/SafariServices

- (void)_sf_applicationDidEnterBackgroundOrWillTerminate:(id)arg1;
- (void)_sf_saveUnsubmittedGeneratedPasswordAndRemoveFormMetadata;
- (id)_sf_securityInfo;
- (void)_sf_setSecurityInfo:(id)arg1;
- (id)webui_formMetadataAndFrame:(id*)arg1 forLastPasswordGenerationOrSubmitEventInFrame:(id)arg2;
- (id)webui_formMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (id)webui_lastGeneratedPasswordForCurrentBackForwardItem;
- (id)webui_presentingViewController;
- (id /* block */)webui_preventNavigationDuringAutoFillPrompt;
- (BOOL)webui_privateBrowsingEnabled;
- (void)webui_removeFormMetadataForLastPasswordGenerationOrSubmitEventInFrame:(id)arg1;
- (void)webui_setFormMetadata:(id)arg1 forLastPasswordGenerationOrSubmitEventInFrame:(id)arg2;
- (void)webui_setLastGeneratedPasswordForCurrentBackForwardItem:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared

- (struct UIImage { Class x1; }*)compassImageForColor:(struct UIColor { Class x1; }*)arg1;
- (char *)createRGBAPixelBufferFromImage:(struct CGImage { }*)arg1;
- (struct UIImage { Class x1; }*)defaultSiteIcon;
- (struct UIColor { Class x1; }*)keyColorFromImage:(struct UIImage { Class x1; }*)arg1;
- (struct UIImage { Class x1; }*)screenshot;

@end
