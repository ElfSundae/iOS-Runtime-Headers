/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKContentView : UIView <UIGestureRecognizerDelegate, UIPreviewItemDelegate, UITextInputPrivate, UIWKInteractionViewProtocol, UIWebFormAccessoryDelegate, UIWebTouchEventsGestureRecognizerDelegate, WKActionSheetAssistantDelegate, WKFileUploadPanelDelegate> {
    struct RetainPtr<WKActionSheetAssistant> { 
        void *m_ptr; 
    } _actionSheetAssistant;
    struct RetainPtr<WKAirPlayRoutePicker> { 
        void *m_ptr; 
    } _airPlayRoutePicker;
    struct unique_ptr<WebKit::ApplicationStateTracker, std::__1::default_delete<WebKit::ApplicationStateTracker> > { 
        struct __compressed_pair<WebKit::ApplicationStateTracker *, std::__1::default_delete<WebKit::ApplicationStateTracker> > { 
            struct ApplicationStateTracker {} *__first_; 
        } __ptr_; 
    } _applicationStateTracker;
    struct AssistedNodeInformation { 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } elementRect; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } selectionRect; 
        double minimumScaleFactor; 
        double maximumScaleFactor; 
        double nodeFontSize; 
        bool hasNextNode; 
        bool hasPreviousNode; 
        bool isAutocorrect; 
        bool isMultiSelect; 
        bool isReadOnly; 
        bool allowsUserScaling; 
        bool insideFixedPosition; 
        int autocapitalizeType; 
        int elementType; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } formAction; 
        struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16> { 
            struct OptionItem {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectOptions; 
        int selectedIndex; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } value; 
        double valueAsNumber; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
    } _assistedNodeInformation;
    struct WKAutoCorrectionData { 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } fontName; 
        float fontSize; 
        unsigned long long fontTraits; 
        struct CGRect { 
            struct CGPoint { 
                float x; 
                float y; 
            } origin; 
            struct CGSize { 
                float width; 
                float height; 
            } size; 
        } textFirstRect; 
        struct CGRect { 
            struct CGPoint { 
                float x; 
                float y; 
            } origin; 
            struct CGSize { 
                float width; 
                float height; 
            } size; 
        } textLastRect; 
        id /* block */ autocorrectionHandler; 
        id /* block */ autocorrectionContextHandler; 
    } _autocorrectionData;
    struct RetainPtr<WKBrowsingContextController> { 
        void *m_ptr; 
    } _browsingContextController;
    BOOL _canSendTouchEventsAsynchronously;
    BOOL _didAccessoryTabInitiateFocus;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _doubleTapGestureRecognizer;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _fastDoubleTapGestureRecognizer;
    struct RetainPtr<WKFileUploadPanel> { 
        void *m_ptr; 
    } _fileUploadPanel;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _fixedClippingView;
    struct RetainPtr<UIWebFormAccessory> { 
        void *m_ptr; 
    } _formAccessoryView;
    struct RetainPtr<WKFormInputSession> { 
        void *m_ptr; 
    } _formInputSession;
    BOOL _hasTapHighlightForPotentialTap;
    BOOL _hasValidPositionInformation;
    BOOL _highlightLongPressCanClick;
    struct RetainPtr<_UIWebHighlightLongPressGestureRecognizer> { 
        void *m_ptr; 
    } _highlightLongPressGestureRecognizer;
    struct RetainPtr<_UIHighlightView> { 
        void *m_ptr; 
    } _highlightView;
    struct HistoricalVelocityData { 
        unsigned int m_historySize; 
        unsigned int m_latestDataIndex; 
        double m_lastAppendTimestamp; 
        struct Data { 
            double timestamp; 
            struct CGPoint { 
                float x; 
                float y; 
            } position; 
            double scale; 
        } m_history[3]; 
    } _historicalKinematicData;
    <UITextInputDelegate> *_inputDelegate;
    struct RetainPtr<NSObject<WKFormPeripheral> > { 
        void *m_ptr; 
    } _inputPeripheral;
    struct RetainPtr<WKInspectorHighlightView> { 
        void *m_ptr; 
    } _inspectorHighlightView;
    struct RetainPtr<WKInspectorIndicationView> { 
        void *m_ptr; 
    } _inspectorIndicationView;
    BOOL _inspectorNodeSearchEnabled;
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { 
        void *m_ptr; 
    } _inspectorNodeSearchGestureRecognizer;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _interactionViewsContainerView;
    BOOL _isDoubleTapPending;
    BOOL _isEditable;
    BOOL _isExpectingFastSingleTapCommit;
    BOOL _isTapHighlightIDValid;
    struct CGPoint { 
        float x; 
        float y; 
    } _lastInteractionLocation;
    struct WKSelectionDrawingInfo { 
        int type; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } caretRect; 
        struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow, 16> { 
            struct SelectionRect {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectionRects; 
    } _lastSelectionDrawingInfo;
    unsigned long long _latestTapID;
    struct RetainPtr<UILongPressGestureRecognizer> { 
        void *m_ptr; 
    } _longPressGestureRecognizer;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    } _markedText;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    } _page;
    struct unique_ptr<WebKit::PageClientImpl, std::__1::default_delete<WebKit::PageClientImpl> > { 
        struct __compressed_pair<WebKit::PageClientImpl *, std::__1::default_delete<WebKit::PageClientImpl> > { 
            struct PageClientImpl {} *__first_; 
        } __ptr_; 
    } _pageClient;
    struct InteractionInformationAtPosition { 
        struct IntPoint { 
            int m_x; 
            int m_y; 
        } point; 
        bool nodeAtPositionIsAssistedNode; 
        bool isSelectable; 
        bool isNearMarkedText; 
        bool touchCalloutEnabled; 
        bool isAnimatedImage; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } clickableElementName; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } url; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } imageURL; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } bounds; 
        struct RefPtr<WebKit::ShareableBitmap> { 
            struct ShareableBitmap {} *m_ptr; 
        } image; 
        struct TextIndicatorData { 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } selectionRectInRootViewCoordinates; 
            struct FloatRect { 
                struct FloatPoint { 
                    float m_x; 
                    float m_y; 
                } m_location; 
                struct FloatSize { 
                    float m_width; 
                    float m_height; 
                } m_size; 
            } textBoundingRectInRootViewCoordinates; 
            struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { 
                struct FloatRect {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } textRectsInBoundingRectCoordinates; 
            float contentImageScaleFactor; 
            struct RefPtr<WebCore::Image> { 
                struct Image {} *m_ptr; 
            } contentImageWithHighlight; 
            struct RefPtr<WebCore::Image> { 
                struct Image {} *m_ptr; 
            } contentImage; 
            int presentationTransition; 
            bool wantsMargin; 
        } linkIndicator; 
    } _positionInformation;
    BOOL _potentialTapInProgress;
    struct RetainPtr<UIGestureRecognizer> { 
        void *m_ptr; 
    } _previewGestureRecognizer;
    struct RetainPtr<UIPreviewItemController> { 
        void *m_ptr; 
    } _previewItemController;
    struct RetainPtr<UIGestureRecognizer> { 
        void *m_ptr; 
    } _previewSecondaryGestureRecognizer;
    BOOL _resigningFirstResponder;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _rootContentView;
    BOOL _selectionNeedsUpdate;
    BOOL _shouldRestoreSelection;
    BOOL _showDebugTapHighlightsForFastClicking;
    BOOL _showingTextStyleOptions;
    struct RetainPtr<WKSyntheticClickTapGestureRecognizer> { 
        void *m_ptr; 
    } _singleTapGestureRecognizer;
    struct unique_ptr<WebKit::SmartMagnificationController, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
        struct __compressed_pair<WebKit::SmartMagnificationController *, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
            struct SmartMagnificationController {} *__first_; 
        } __ptr_; 
    } _smartMagnificationController;
    struct TapHighlightInformation { 
        struct Color { 
            unsigned int m_color; 
            bool m_valid; 
        } color; 
        struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16> { 
            struct FloatQuad {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } quads; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topRightRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomRightRadius; 
    } _tapHighlightInformation;
    struct RetainPtr<UIWKTextInteractionAssistant> { 
        void *m_ptr; 
    } _textSelectionAssistant;
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> { 
        void *m_ptr; 
    } _touchEventGestureRecognizer;
    struct RetainPtr<UITextInputTraits> { 
        void *m_ptr; 
    } _traits;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _twoFingerDoubleTapGestureRecognizer;
    struct RetainPtr<UIEvent> { 
        void *m_ptr; 
    } _uiEventBeingResent;
    struct RetainPtr<NSUndoManager> { 
        void *m_ptr; 
    } _undoManager;
    BOOL _usingGestureForSelection;
    struct RetainPtr<UIWKSelectionAssistant> { 
        void *m_ptr; 
    } _webSelectionAssistant;
    WKWebView *_webView;
}

@property (nonatomic, copy) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic, readonly) const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; /* Warning: unhandled struct encoding: '{Vector<WebKit::OptionItem' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; short x42; void*x43; void*x44; void*x45; inout void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; unsigned short x104; void*x105; void*x106; unsigned int x107; void*x108; int x109; float x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; int x118; BOOL x119; void*x120; void*x121; const oneway int x122; void*x123; void*x124; unsigned char x125; out in void*x126; const out long x127; long x128; void*x129; const void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void* x136[ /* ? */ ]; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; id x163; double x164; out void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; id x193; double x194; out void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; const long long x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; id x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; unsigned short x325; void*x326; out void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; unsigned long x334; long x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; unsigned char x342; void*x343; void*x344; void*x345; unsigned short x346; void*x347; int x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; struct x356; void*x357; void*x358; void*x359; float x360; void*x361; long x362; void*x363; out void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; float x389; void*x390; long x391; void*x392; out void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; }*assistedNodeInformation; /* unknown property attribute:  16>=^{OptionItem}II}i{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}d{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}} */
@property (nonatomic) int autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic, readonly) const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; float x2; unsigned long long x3; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_4_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; id /* block */ x6; id /* block */ x7; }*autocorrectionData;
@property (nonatomic) int autocorrectionType;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic, readonly) WKBrowsingContextController *browsingContextController;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL deferBecomingResponder;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic, readonly) UIWebFormAccessory *formAccessoryView;
@property (readonly) unsigned int hash;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned int insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, readonly) BOOL isAssistingNode;
@property (nonatomic, readonly) BOOL isBackground;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic, readonly) BOOL isEditable;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) int keyboardAppearance;
@property (nonatomic) int keyboardType;
@property (nonatomic, readonly) struct CGPoint { float x1; float x2; } lastInteractionLocation;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic, readonly) struct WebPageProxy { int (**x1)(); id x2; int (*x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; /* Warning: unhandled struct encoding: '{unique_ptr<API::LoaderClient' */ struct x7; void*x8; void*x9; void x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; SEL x17; void*x18; unsigned short x19; void*x20; short x21; void*x22; void*x23; void*x24; void*x25; unsigned long x26; int x27; unsigned int x28/* : ? */; const void*x29; const void*x30; void*x31; void*x32; const void*x33; void*x34; void*x35; void*x36; out const void*x37; short x38; void*x39; unsigned long long x40; void*x41; void*x42; const void*x43; void*x44; unsigned char x45; out const void*x46; void*x47; float x48; const void*x49; void*x50; void*x51; void*x52; out const void*x53; void*x54; unsigned long long x55; void*x56; void*x57; const void*x58; void*x59; unsigned char x60; out const void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; bool x86; void*x87; double x88; void*x89; void*x90; void*x91; void*x92; in void*x93; void*x94; void*x95; const void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; bool x148; void*x149; double x150; void*x151; void*x152; void*x153; void*x154; in void*x155; void*x156; void*x157; const void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; unsigned int x167 : 3; void*x168; void*x169; void*x170; void*x171; }*page; /* unknown property attribute:  16>=^QII}I} */
@property (nonatomic, readonly) const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_9_1_1; } x9; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_10_1_1; } x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_12_1_1; } x12; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_13_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_13_1_2; /* Warning: unhandled struct encoding: '{Vector<WebCore::FloatRect' */ struct x_13_1_3; void*x_13_1_4; void*x_13_1_5; void*x_13_1_6; void*x_13_1_7; void*x_13_1_8; void*x_13_1_9; void*x_13_1_10; void*x_13_1_11; void*x_13_1_12; } x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void x61; void*x62; void*x63; void*x64; void*x65; long long x66; void*x67; void*x68; void*x69; unsigned long x70; void*x71; int x72; BOOL x73; const out bool x74; long x75; out void*x76; BOOL x77; BOOL x78; out void*x79; in void*x80; short x81; void*x82; void*x83; unsigned int x84/* : ? */; long x85; void*x86; oneway int x87; void*x88; void*x89; unsigned char x90; out in void*x91; const out long x92; long x93; void*x94; const void*x95; void*x96; void*x97; void*x98; id x99; void*x100; void*x101; void*x102; void*x103; bool x104; inout out void*x105; int x106; float x107; int x108; BOOL x109; void*x110; void*x111; int x112; out in bool x113; void*x114; void*x115; void*x116; void x117; int x118; out const void*x119; void*x120; int x121; long x122; int x123; void*x124; int x125; void*x126; short x127; unsigned char x128; long x129; int x130; void*x131; in void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; id x138; void*x139; long long x140; void*x141; void*x142; unsigned short x143; void*x144; unsigned char x145; long x146; out void*x147; double x148; void*x149; long x150; void*x151; void*x152; float x153; out const void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; id x165; void*x166; void*x167; void*x168; void*x169; unsigned short x170; void*x171; unsigned int x172; unsigned long x173; int x174; short x175; void*x176; void*x177; void*x178; short x179; void*x180; const int x181; BOOL x182; void*x183; int x184; out in short x185; unsigned char x186; out in void*x187; const out long x188; long x189; void*x190; const void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; id x203; void*x204; long x205; void*x206; void*x207; void*x208; oneway void*x209; in const void*x210; void*x211; BOOL x212; void*x213; void*x214; unsigned int x215/* : ? */; long x216; void*x217; short x218; short x219; void*x220; void*x221; unsigned int x222; in short x223; void*x224; void*x225; BOOL x226; void*x227; out const unsigned long x228; out void*x229; double x230; void*x231; const void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; id x241; void*x242; void*x243; void*x244; void*x245; void*x246; long doublex247; long doublex248; void*x249; void*x250; out const void*x251; BOOL x252; void*x253; short x254; void*x255; unsigned short x256; void*x257; const int x258; in void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; id x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; unsigned int x276; unsigned char x277; out void*x278; in void*x279; void*x280; const void*x281; int x282; void*x283; void*x284; oneway int x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; id x295; struct x296; void*x297; unsigned long x298; void*x299; void*x300; int x301; void*x302; void*x303; void*x304; const void*x305; short x306; void*x307; const void*x308; void*x309; BOOL x310; out const double x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; id x319; void*x320; out void*x321; void*x322; void*x323; unsigned char x324; void*x325; void*x326; void x327; void*x328; in void*x329; unsigned int x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; id x348; void*x349; long x350; void*x351; void*x352; void*x353; void*x354; void*x355; out const void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; const void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; id x376; struct x377; void*x378; unsigned short x379; long doublex380; bool x381; const void*x382; short x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; in int x391; void*x392; void*x393; long x394; void*x395; void*x396; int x397; out in void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; unsigned short x414; void*x415; void*x416; void*x417; void*x418; void*x419; unsigned long long x420; void*x421; void*x422; unsigned short x423; void*x424; void*x425; in void*x426; void*x427; void*x428; double x429; bycopy unsigned int x430/* : ? */; void*x431; void*x432; BOOL x433; void*x434; unsigned int x435; long doublex436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; unsigned short x453; long doublex454; void*x455; void*x456; void*x457; out in void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; double x482; void*x483; void*x484; void*x485; double x486; void*x487; void*x488; void*x489; double x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; unsigned short x514; unsigned char x515; inout void*x516; void*x517; unsigned long x518; void*x519; void*x520; short x521; short x522; void*x523; void*x524; short x525; out void*x526; const BOOL x527; void*x528; bool x529; int x530; in double x531; int x532; in void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; unsigned short x557; unsigned char x558; inout void*x559; void*x560; unsigned long x561; void*x562; void*x563; short x564; short x565; void*x566; void*x567; short x568; out void*x569; const BOOL x570; void*x571; bool x572; int x573; in double x574; int x575; in void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; unsigned short x601; void*x602; short x603; void*x604; void*x605; void*x606; void*x607; unsigned long x608; int x609; unsigned int x610/* : ? */; const void*x611; const void*x612; void*x613; void*x614; const void*x615; void*x616; void*x617; void*x618; out const void*x619; short x620; void*x621; unsigned short x622; BOOL x623; void*x624; in void*x625; void*x626; int x627; void*x628; void*x629; float x630; const void*x631; void*x632; void*x633; void*x634; out const void*x635; void*x636; unsigned short x637; BOOL x638; void*x639; in void*x640; void*x641; int x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; long x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; long doublex717; bycopy void*x718; void*x719; in void*x720; int x721; void*x722; void*x723; void*x724; void*x725; float x726; void*x727; const void*x728; in BOOL x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; id x744; void*x745; void*x746; id x747; void*x748; void*x749; void*x750; unsigned long long x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; long doublex775; bycopy void*x776; void*x777; in void*x778; int x779; void*x780; void*x781; void*x782; void*x783; float x784; void*x785; const void*x786; in BOOL x787; void*x788; void*x789; void*x790; void*x791; void*x792; void*x793; union x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; union x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; unsigned char x851; inout int x852; bycopy unsigned short x853; bool x854; void*x855; void*x856; void*x857; void*x858; const void*x859; int x860; BOOL x861; int x862; void*x863; void*x864; in void*x865; void*x866; void*x867; void*x868; BOOL x869; void*x870; int x871; in void*x872; unsigned short x873; void*x874; void*x875; const BOOL x876; void*x877; bycopy void*x878; void*x879; const void*x880; void*x881; int x882; out in long doublex883; void*x884; long x885; void*x886; void*x887; void*x888; void*x889; void*x890; void*x891; void*x892; void*x893; void*x894; void*x895; struct x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; void*x908; void*x909; void*x910; void*x911; void*x912; void*x913; void*x914; void*x915; id x916; void*x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; void*x924; void*x925; void*x926; void*x927; void*x928; void*x929; void*x930; void*x931; void*x932; void*x933; void*x934; void*x935; void*x936; void*x937; void*x938; void*x939; long x940; void*x941; void*x942; void*x943; void*x944; void*x945; void*x946; void*x947; void*x948; void*x949; void*x950; void*x951; void*x952; void*x953; void*x954; void*x955; void*x956; void*x957; void x958; void*x959; void*x960; void*x961; void*x962; void*x963; void*x964; void*x965; void*x966; void*x967; void*x968; void*x969; void*x970; void*x971; void*x972; void*x973; void*x974; void*x975; void*x976; void*x977; void*x978; void*x979; void*x980; void*x981; void*x982; void*x983; void*x984; void*x985; void*x986; void*x987; void*x988; void*x989; float x990; void*x991; void*x992; void*x993; void*x994; void*x995; void*x996; void*x997; void*x998; void*x999; void*x1000; void*x1001; void*x1002; long x1003; long long x1004; void*x1005; void*x1006; void*x1007; void*x1008; void*x1009; void*x1010; unsigned int x1011; void*x1012; int x1013; in double x1014; out void*x1015; void*x1016; int x1017; void*x1018; void*x1019; void*x1020; int x1021; out in unsigned char x1022; out in void*x1023; const out long x1024; long x1025; void*x1026; const void*x1027; void*x1028; void*x1029; void*x1030; void*x1031; void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; void*x1037; void*x1038; void*x1039; void*x1040; id x1041; void*x1042; void*x1043; void*x1044; void*x1045; unsigned int x1046; void*x1047; void*x1048; void*x1049; void*x1050; void x1051; void*x1052; in void*x1053; void*x1054; void*x1055; void*x1056; void*x1057; void*x1058; unsigned int x1059/* : ? */; int x1060; void*x1061; void*x1062; void*x1063; void*x1064; void*x1065; void*x1066; void*x1067; void*x1068; void*x1069; id x1070; void*x1071; void*x1072; unsigned char x1073; void*x1074; unsigned char x1075; const void*x1076; void*x1077; void*x1078; void*x1079; unsigned short x1080; void*x1081; short x1082; short x1083; int x1084; out in unsigned int x1085; in float x1086; out void*x1087; void*x1088; long long x1089; void*x1090; void*x1091; short x1092; void*x1093; void*x1094; void*x1095; void*x1096; void*x1097; void*x1098; void*x1099; void*x1100; void*x1101; void*x1102; void*x1103; void*x1104; void*x1105; void*x1106; void*x1107; void*x1108; void*x1109; id x1110; void*x1111; void*x1112; id x1113; void*x1114; void*x1115; BOOL x1116; void*x1117; int x1118; out in bool x1119; int x1120; in double x1121; int x1122; in void*x1123; unsigned short x1124; void*x1125; int x1126; void*x1127; void*x1128; void*x1129; void*x1130; void*x1131; void*x1132; void*x1133; void*x1134; id x1135; void*x1136; void*x1137; void*x1138; void*x1139; unsigned short x1140; unsigned char x1141; void*x1142; unsigned char x1143; void*x1144; void*x1145; const void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; long x1151; void*x1152; void*x1153; void*x1154; in void*x1155; short x1156; void*x1157; void*x1158; in double x1159; void*x1160; const void*x1161; const void*x1162; void*x1163; void*x1164; void*x1165; void*x1166; void*x1167; void*x1168; void*x1169; void*x1170; void*x1171; void*x1172; void*x1173; void*x1174; id x1175; void*x1176; void*x1177; void*x1178; void*x1179; unsigned long x1180; void*x1181; const out void*x1182; const void*x1183; short x1184; short x1185; unsigned short x1186; void*x1187; void*x1188; BOOL x1189; void*x1190; void*x1191; void*x1192; void*x1193; void*x1194; void*x1195; void*x1196; void*x1197; void*x1198; void*x1199; void*x1200; void*x1201; id x1202; void*x1203; void*x1204; void*x1205; void*x1206; long doublex1207; void*x1208; void*x1209; void*x1210; out void*x1211; void*x1212; BOOL x1213; void*x1214; int x1215; out in oneway int x1216; void*x1217; void*x1218; unsigned short x1219; void*x1220; const void x1221; int x1222; BOOL x1223; void*x1224; unsigned char x1225; out in void*x1226; void*x1227; void*x1228; void*x1229; void*x1230; void*x1231; void*x1232; void*x1233; void*x1234; void*x1235; void*x1236; void*x1237; void*x1238; void*x1239; id x1240; void*x1241; void*x1242; void*x1243; void*x1244; unsigned short x1245; void*x1246; void*x1247; out const void*x1248; void*x1249; long x1250; void*x1251; void*x1252; void*x1253; void*x1254; void*x1255; void*x1256; void*x1257; void*x1258; void*x1259; void*x1260; void*x1261; void*x1262; void*x1263; void*x1264; void*x1265; void*x1266; void*x1267; id x1268; void*x1269; void*x1270; void*x1271; void*x1272; void*x1273; void*x1274; int x1275; long x1276; int x1277; in void*x1278; unsigned short x1279; BOOL x1280; const out long x1281; long x1282; unsigned int x1283; in float x1284; out void*x1285; void*x1286; void*x1287; void*x1288; void*x1289; void*x1290; void*x1291; void*x1292; id x1293; void*x1294; void*x1295; void*x1296; void*x1297; void*x1298; void*x1299; void*x1300; void*x1301; void*x1302; unsigned char x1303; out in void*x1304; const out long x1305; long x1306; void*x1307; const void*x1308; void*x1309; void*x1310; void*x1311; void*x1312; void*x1313; void*x1314; void*x1315; void*x1316; void*x1317; id x1318; void*x1319; void*x1320; void*x1321; void*x1322; void*x1323; long doublex1324; void*x1325; unsigned short x1326; void*x1327; unsigned int x1328/* : ? */; short x1329; BOOL x1330; const int x1331; void*x1332; void*x1333; int x1334; out in unsigned char x1335; const void*x1336; void*x1337; void*x1338; void*x1339; void*x1340; void*x1341; short x1342; void*x1343; out in short x1344; void*x1345; void*x1346; void*x1347; void*x1348; void*x1349; void*x1350; void*x1351; void*x1352; void*x1353; void*x1354; void*x1355; void*x1356; void*x1357; id x1358; void*x1359; void*x1360; void*x1361; void*x1362; void*x1363; unsigned short x1364; unsigned char x1365; inout bycopy const int x1366; void*x1367; void*x1368; void*x1369; int x1370; void*x1371; void*x1372; out void*x1373; void*x1374; void*x1375; const void*x1376; void*x1377; void*x1378; void*x1379; void*x1380; void*x1381; void*x1382; id x1383; void*x1384; void*x1385; void*x1386; void*x1387; unsigned short x1388; unsigned char x1389; void*x1390; unsigned char x1391; void*x1392; void*x1393; const void*x1394; bool x1395; void*x1396; unsigned int x1397/* : ? */; unsigned int x1398/* : ? */; long x1399; void*x1400; void*x1401; long x1402; void*x1403; void*x1404; void*x1405; in void*x1406; short x1407; void*x1408; void*x1409; in double x1410; void*x1411; const void*x1412; const void*x1413; void*x1414; void*x1415; void*x1416; void*x1417; void*x1418; void*x1419; void*x1420; void*x1421; void*x1422; void*x1423; id x1424; void*x1425; void*x1426; void*x1427; void*x1428; unsigned int x1429; void*x1430; void*x1431; double x1432; void*x1433; void*x1434; void*x1435; void*x1436; const void*x1437; in BOOL x1438; void*x1439; unsigned char x1440; out in void*x1441; void*x1442; int x1443; in void*x1444; const void*x1445; void*x1446; void*x1447; void*x1448; void*x1449; void*x1450; void*x1451; void*x1452; void*x1453; void*x1454; void*x1455; void*x1456; void*x1457; void*x1458; void*x1459; void*x1460; void*x1461; void*x1462; id x1463; void*x1464; void*x1465; char *x1466; void*x1467; void*x1468; void*x1469; unsigned short x1470; void*x1471; void*x1472; BOOL x1473; void*x1474; oneway int x1475; void*x1476; void*x1477; void*x1478; void*x1479; void*x1480; void*x1481; void*x1482; void*x1483; void*x1484; void*x1485; void*x1486; void*x1487; void*x1488; void*x1489; void*x1490; void*x1491; id x1492; void*x1493; void*x1494; Class x1495; void*x1496; unsigned long x1497; void*x1498; void*x1499; void*x1500; void*x1501; void*x1502; void*x1503; const void*x1504; unsigned long x1505; out void*x1506; double x1507; void*x1508; const void*x1509; void*x1510; void*x1511; void*x1512; void*x1513; void*x1514; void*x1515; void*x1516; void*x1517; void*x1518; id x1519; void*x1520; void*x1521; void*x1522; void*x1523; unsigned char x1524; long doublex1525; const void*x1526; void*x1527; int x1528; in void*x1529; void*x1530; in double x1531; out unsigned short x1532; void*x1533; void*x1534; BOOL x1535; void*x1536; void*x1537; void*x1538; void*x1539; void*x1540; void*x1541; void*x1542; void*x1543; void*x1544; id x1545; void*x1546; void*x1547; void*x1548; void*x1549; void*x1550; void*x1551; void*x1552; void*x1553; void*x1554; void*x1555; void*x1556; int x1557; long x1558; int x1559; void*x1560; int x1561; void*x1562; short x1563; void*x1564; void*x1565; void*x1566; void*x1567; void*x1568; void*x1569; void*x1570; void*x1571; void*x1572; void*x1573; void*x1574; void*x1575; id x1576; long long *x1577; void*x1578; void*x1579; void*x1580; unsigned int x1581; void*x1582; long doublex1583; void*x1584; oneway int x1585; void*x1586; void*x1587; void*x1588; out void*x1589; BOOL x1590; void*x1591; void*x1592; void*x1593; in double x1594; long x1595; void*x1596; const void*x1597; void*x1598; void*x1599; void*x1600; void*x1601; id x1602; void*x1603; void*x1604; void*x1605; void*x1606; void*x1607; void*x1608; short x1609; int x1610; BOOL x1611; unsigned char x1612; out in void*x1613; void*x1614; void*x1615; void*x1616; void*x1617; void*x1618; long x1619; unsigned short x1620; void*x1621; out void*x1622; unsigned int x1623; in unsigned short x1624; void*x1625; out const void*x1626; long x1627; void*x1628; const void*x1629; BOOL x1630; void*x1631; int x1632; out in void*x1633; void*x1634; void*x1635; void*x1636; void*x1637; id x1638; id x1639; unsigned long long x1640; void*x1641; void*x1642; unsigned char x1643; long doublex1644; void*x1645; float x1646; void*x1647; void*x1648; long x1649; void*x1650; long doublex1651; void*x1652; void*x1653; void*x1654; unsigned long x1655; void*x1656; unsigned int x1657/* : ? */; void*x1658; long x1659; void*x1660; void*x1661; void*x1662; void*x1663; void*x1664; void*x1665; void*x1666; void*x1667; id x1668; unsigned int x1669; void*x1670; void*x1671; void*x1672; void*x1673; unsigned short x1674; oneway void*x1675; void*x1676; short x1677; void*x1678; inout out void*x1679; int x1680; float x1681; int x1682; BOOL x1683; void*x1684; void*x1685; int x1686; out in void*x1687; void*x1688; const void*x1689; void*x1690; void*x1691; void*x1692; void*x1693; const short x1694; void*x1695; void*x1696; void*x1697; void*x1698; void*x1699; void*x1700; void*x1701; void*x1702; void*x1703; void*x1704; void*x1705; void*x1706; void*x1707; id x1708; void*x1709; long long x1710; void*x1711; void*x1712; void*x1713; unsigned short x1714; void*x1715; long x1716; void*x1717; void*x1718; unsigned short x1719; void*x1720; void*x1721; void*x1722; void*x1723; short x1724; void*x1725; void*x1726; double x1727; void*x1728; void*x1729; void*x1730; void*x1731; void*x1732; short x1733; void*x1734; out in short x1735; void*x1736; void*x1737; void*x1738; void*x1739; void*x1740; void*x1741; void*x1742; void*x1743; void*x1744; void*x1745; void*x1746; void*x1747; void*x1748; void*x1749; void*x1750; void*x1751; void*x1752; id x1753; void*x1754; void*x1755; void*x1756; void*x1757; unsigned char x1758; long doublex1759; void*x1760; void*x1761; int x1762; short x1763; void*x1764; long x1765; unsigned int x1766/* : ? */; void*x1767; void*x1768; short x1769; long doublex1770; void*x1771; void*x1772; void*x1773; unsigned short x1774; out void*x1775; const BOOL x1776; void*x1777; void*x1778; void*x1779; void*x1780; void*x1781; void*x1782; void*x1783; void*x1784; void*x1785; void*x1786; void*x1787; void*x1788; void*x1789; void*x1790; void*x1791; void*x1792; void*x1793; void*x1794; id x1795; void*x1796; long long x1797; void*x1798; void*x1799; void*x1800; unsigned char x1801; out void*x1802; void*x1803; void*x1804; in double x1805; unsigned int x1806; void*x1807; in out const void*x1808; double x1809; void*x1810; void*x1811; void*x1812; void*x1813; void*x1814; void*x1815; void*x1816; void*x1817; void*x1818; void*x1819; id x1820; void*x1821; void*x1822; void*x1823; void*x1824; void*x1825; unsigned short x1826; void*x1827; void*x1828; double x1829; void*x1830; void*x1831; void*x1832; short x1833; long doublex1834; void*x1835; void*x1836; void*x1837; unsigned int x1838/* : ? */; void*x1839; short x1840; void*x1841; unsigned short x1842; BOOL x1843; void*x1844; void*x1845; void*x1846; void*x1847; void*x1848; void*x1849; void*x1850; void*x1851; void*x1852; void*x1853; void*x1854; void*x1855; void*x1856; void*x1857; void*x1858; void*x1859; void*x1860; void*x1861; void*x1862; void*x1863; void*x1864; void*x1865; void*x1866; id x1867; void*x1868; void*x1869; void*x1870; void*x1871; void*x1872; unsigned short x1873; void*x1874; void*x1875; void*x1876; void*x1877; out const void*x1878; const void*x1879; bycopy unsigned int x1880/* : ? */; void*x1881; void*x1882; BOOL x1883; void*x1884; unsigned int x1885; long doublex1886; void*x1887; double x1888; void*x1889; float x1890; void*x1891; void*x1892; long x1893; void*x1894; void*x1895; void*x1896; void*x1897; void*x1898; void*x1899; void*x1900; void*x1901; void*x1902; void*x1903; void*x1904; void*x1905; void*x1906; void*x1907; void*x1908; void*x1909; id x1910; void*x1911; void*x1912; void*x1913; void*x1914; unsigned long x1915; unsigned long x1916; out BOOL x1917; void*x1918; void*x1919; int x1920; out in unsigned char x1921; out in void*x1922; const out long x1923; long x1924; void*x1925; const void*x1926; void*x1927; void*x1928; void*x1929; void*x1930; void*x1931; id x1932; void*x1933; long x1934; void*x1935; void*x1936; void*x1937; void*x1938; void*x1939; unsigned int x1940; bycopy void x1941; void*x1942; const long x1943; void*x1944; void*x1945; void*x1946; long x1947; int x1948; void*x1949; void*x1950; const void*x1951; in short x1952; int x1953; void*x1954; int x1955; out in void*x1956; void*x1957; void*x1958; void*x1959; void*x1960; void*x1961; void*x1962; void*x1963; void*x1964; void*x1965; void*x1966; void*x1967; void*x1968; void*x1969; double x1970; void*x1971; void*x1972; void*x1973; void*x1974; void*x1975; void*x1976; void*x1977; void*x1978; void*x1979; void*x1980; void*x1981; void*x1982; void*x1983; void*x1984; void*x1985; void*x1986; void*x1987; void*x1988; void*x1989; void*x1990; void*x1991; void*x1992; void*x1993; void*x1994; void*x1995; void*x1996; void*x1997; void*x1998; void*x1999; void*x2000; void*x2001; void*x2002; void*x2003; void*x2004; void*x2005; void*x2006; void*x2007; void*x2008; void*x2009; void*x2010; void*x2011; void*x2012; void*x2013; void*x2014; void*x2015; void*x2016; void*x2017; void*x2018; void*x2019; void*x2020; void*x2021; void*x2022; void*x2023; void*x2024; void*x2025; void*x2026; void*x2027; void*x2028; void*x2029; void*x2030; void*x2031; void*x2032; void*x2033; void*x2034; void*x2035; void*x2036; void*x2037; void*x2038; void*x2039; void*x2040; void*x2041; void*x2042; void*x2043; void*x2044; void*x2045; void*x2046; void*x2047; void*x2048; bool x2049; void*x2050; void*x2051; void*x2052; void*x2053; void*x2054; void*x2055; void*x2056; void*x2057; void*x2058; void*x2059; void*x2060; void*x2061; void*x2062; void*x2063; void*x2064; void*x2065; void*x2066; void*x2067; void*x2068; void*x2069; void*x2070; void*x2071; void*x2072; void*x2073; void*x2074; void*x2075; void*x2076; void*x2077; void*x2078; void*x2079; void*x2080; void*x2081; void*x2082; void*x2083; void*x2084; void*x2085; void*x2086; void*x2087; void*x2088; void*x2089; void*x2090; void*x2091; void*x2092; void*x2093; void*x2094; void*x2095; void*x2096; void*x2097; void*x2098; void*x2099; void*x2100; unsigned long long x2101; void*x2102; long long x2103; long long x2104; void*x2105; void*x2106; void*x2107; void*x2108; unsigned char x2109; void*x2110; int x2111; long x2112; void*x2113; void*x2114; const out void x2115; int x2116; double x2117; void*x2118; const void*x2119; void*x2120; void*x2121; void*x2122; void*x2123; void*x2124; void*x2125; void*x2126; void*x2127; void*x2128; void*x2129; id x2130; void*x2131; long long x2132; void*x2133; void*x2134; void*x2135; void*x2136; unsigned short x2137; void*x2138; void*x2139; void*x2140; BOOL x2141; void*x2142; void*x2143; void*x2144; unsigned long x2145; void*x2146; void*x2147; BOOL x2148; out void*x2149; in int x2150; void*x2151; int x2152; out in void*x2153; void*x2154; long long x2155; void*x2156; void*x2157; short x2158; void*x2159; void*x2160; void*x2161; void*x2162; void*x2163; void*x2164; void*x2165; void*x2166; void*x2167; void*x2168; void*x2169; void*x2170; void*x2171; void*x2172; id x2173; void*x2174; long long x2175; void*x2176; void*x2177; void*x2178; void*x2179; unsigned int x2180/* : ? */; long doublex2181; void*x2182; void x2183; int x2184; BOOL x2185; void*x2186; bycopy const int x2187; void*x2188; in void*x2189; void*x2190; void*x2191; int x2192; out in void*x2193; void*x2194; void*x2195; void*x2196; void*x2197; void*x2198; id x2199; void*x2200; long long x2201; void*x2202; void*x2203; void*x2204; void*x2205; void*x2206; void*x2207; const BOOL x2208; void*x2209; void*x2210; in void*x2211; void*x2212; void*x2213; void*x2214; oneway int x2215; void*x2216; void*x2217; unsigned char x2218; out in void*x2219; const out long x2220; long x2221; void*x2222; const void*x2223; void*x2224; void*x2225; void*x2226; void*x2227; void*x2228; void*x2229; void*x2230; void*x2231; void*x2232; void*x2233; void*x2234; void*x2235; void*x2236; void*x2237; id x2238; void*x2239; long long x2240; void*x2241; void*x2242; unsigned long x2243; unsigned char x2244; out void*x2245; void*x2246; out short x2247; void*x2248; const void*x2249; void*x2250; void*x2251; void*x2252; void*x2253; void*x2254; void*x2255; void*x2256; void*x2257; void*x2258; void*x2259; void*x2260; void*x2261; void*x2262; void*x2263; void*x2264; id x2265; void x2266; long long x2267; void*x2268; void*x2269; void*x2270; unsigned short x2271; void*x2272; void*x2273; void*x2274; void*x2275; unsigned int x2276/* : ? */; long x2277; void*x2278; long doublex2279; void*x2280; void*x2281; void*x2282; void*x2283; void*x2284; void*x2285; void*x2286; void*x2287; void*x2288; void*x2289; void*x2290; void*x2291; void*x2292; void*x2293; void*x2294; void*x2295; id x2296; void*x2297; void*x2298; id x2299; void*x2300; void*x2301; unsigned char x2302; void*x2303; short x2304; void*x2305; const long doublex2306; void*x2307; float x2308; void*x2309; void*x2310; long x2311; void*x2312; short x2313; void*x2314; void*x2315; in void*x2316; void*x2317; void*x2318; const void*x2319; void*x2320; void*x2321; void*x2322; id x2323; void*x2324; void*x2325; void*x2326; void*x2327; void*x2328; void*x2329; bycopy unsigned short x2330; void*x2331; void*x2332; const BOOL x2333; void*x2334; unsigned char x2335; void*x2336; void*x2337; void*x2338; void*x2339; out const void*x2340; void*x2341; void*x2342; void*x2343; void*x2344; void*x2345; void*x2346; void*x2347; void*x2348; void*x2349; id x2350; void*x2351; void*x2352; void*x2353; void*x2354; void*x2355; void*x2356; long doublex2357; unsigned long x2358; int x2359; unsigned int x2360/* : ? */; in void*x2361; void*x2362; BOOL x2363; out const void*x2364; void*x2365; unsigned char x2366; void*x2367; void*x2368; void*x2369; bycopy unsigned short x2370; void*x2371; void*x2372; void*x2373; short x2374; void*x2375; void*x2376; void*x2377; out const void*x2378; void*x2379; void*x2380; void*x2381; void*x2382; void*x2383; void*x2384; void*x2385; void*x2386; void*x2387; void*x2388; void*x2389; void*x2390; id x2391; bycopy void*x2392; void*x2393; void*x2394; void*x2395; bool x2396; void*x2397; void*x2398; const short x2399; out in void*x2400; void*x2401; unsigned int x2402/* : ? */; long x2403; void*x2404; oneway int x2405; void*x2406; void*x2407; BOOL x2408; void*x2409; int x2410; out in short x2411; long doublex2412; void*x2413; long x2414; void*x2415; void*x2416; void*x2417; void*x2418; void*x2419; void*x2420; void*x2421; void*x2422; void*x2423; void*x2424; void*x2425; void*x2426; void*x2427; void*x2428; void*x2429; id x2430; void*x2431; out void*x2432; void*x2433; void*x2434; void*x2435; void*x2436; void*x2437; long x2438; out void*x2439; double x2440; void*x2441; const void*x2442; void*x2443; void*x2444; void*x2445; const const out const void*x2446; void*x2447; BOOL x2448; out void x2449; void*x2450; const void*x2451; void*x2452; void*x2453; void*x2454; void*x2455; void*x2456; void*x2457; void*x2458; const void*x2459; void*x2460; void*x2461; void*x2462; void*x2463; void*x2464; void*x2465; id x2466; void*x2467; void*x2468; void*x2469; void*x2470; void*x2471; inout unsigned short x2472; void*x2473; in double x2474; out unsigned int x2475; in void x2476; out BOOL x2477; void*x2478; void*x2479; int x2480; out in void*x2481; void*x2482; void*x2483; void*x2484; void*x2485; void*x2486; void*x2487; void*x2488; void*x2489; id x2490; void*x2491; void*x2492; void*x2493; void*x2494; void*x2495; in float x2496; out long doublex2497; int x2498; void*x2499; void*x2500; const void*x2501; void*x2502; unsigned char x2503; void*x2504; unsigned int x2505/* : ? */; long x2506; int x2507; in void*x2508; unsigned long x2509; void*x2510; void*x2511; void*x2512; const void*x2513; void*x2514; void*x2515; void*x2516; void*x2517; void*x2518; void*x2519; void*x2520; void*x2521; void*x2522; void*x2523; void*x2524; void*x2525; void*x2526; void*x2527; void*x2528; void*x2529; void*x2530; void*x2531; id x2532; void*x2533; void*x2534; void*x2535; void*x2536; void*x2537; void*x2538; oneway int x2539; void*x2540; void*x2541; void*x2542; long x2543; void*x2544; void*x2545; void*x2546; in void*x2547; void*x2548; void*x2549; void*x2550; void*x2551; void*x2552; void*x2553; void*x2554; void*x2555; void*x2556; void*x2557; void*x2558; void*x2559; void*x2560; id x2561; void*x2562; long x2563; unsigned long long x2564; void*x2565; void*x2566; int x2567; void*x2568; BOOL x2569; BOOL x2570; void*x2571; long x2572; void*x2573; const out void*x2574; void*x2575; void*x2576; void*x2577; const long doublex2578; void*x2579; long x2580; void*x2581; void*x2582; void*x2583; void*x2584; void*x2585; void*x2586; void*x2587; void*x2588; void*x2589; void*x2590; void*x2591; void*x2592; void*x2593; void*x2594; void*x2595; void*x2596; void*x2597; void*x2598; void*x2599; void*x2600; void*x2601; void*x2602; void*x2603; id x2604; void*x2605; void*x2606; void*x2607; void*x2608; void*x2609; void*x2610; void*x2611; void*x2612; in void*x2613; void*x2614; void*x2615; double x2616; long doublex2617; void*x2618; float x2619; void*x2620; void*x2621; long x2622; void*x2623; short x2624; void*x2625; void*x2626; void*x2627; void*x2628; void*x2629; void*x2630; void*x2631; void*x2632; void*x2633; id x2634; void*x2635; void*x2636; void*x2637; void*x2638; void*x2639; unsigned long long x2640; void*x2641; void*x2642; void*x2643; unsigned int x2644/* : ? */; long x2645; void*x2646; unsigned short x2647; void*x2648; void*x2649; void*x2650; void*x2651; void*x2652; void*x2653; void*x2654; void*x2655; void*x2656; void*x2657; void*x2658; void*x2659; void*x2660; void*x2661; void*x2662; void*x2663; void*x2664; id x2665; void*x2666; long long x2667; void*x2668; void*x2669; void*x2670; void*x2671; void*x2672; unsigned int x2673/* : ? */; oneway int x2674; double x2675; void*x2676; out void*x2677; void*x2678; short x2679; void*x2680; long x2681; void*x2682; void*x2683; void*x2684; void*x2685; void*x2686; void*x2687; void*x2688; void*x2689; void*x2690; void*x2691; void*x2692; void*x2693; void*x2694; void*x2695; void*x2696; void*x2697; void*x2698; void*x2699; void*x2700; void*x2701; void*x2702; void*x2703; void*x2704; void*x2705; void*x2706; void*x2707; void*x2708; void*x2709; void*x2710; void*x2711; void*x2712; void*x2713; void*x2714; void*x2715; void*x2716; void*x2717; void*x2718; void*x2719; void*x2720; void*x2721; void*x2722; void x2723; void*x2724; void*x2725; void*x2726; void*x2727; void*x2728; void*x2729; void*x2730; void*x2731; unsigned short x2732; void*x2733; short x2734; void*x2735; void*x2736; void*x2737; void*x2738; unsigned long x2739; int x2740; unsigned int x2741/* : ? */; const void*x2742; const void*x2743; void*x2744; void*x2745; const int x2746; void x2747; void*x2748; void*x2749; void*x2750; void*x2751; const void*x2752; void*x2753; void*x2754; void*x2755; out const void*x2756; short x2757; void*x2758; unsigned char x2759; out void*x2760; void*x2761; void*x2762; in int x2763; out in unsigned short x2764; void*x2765; in BOOL x2766; void*x2767; float x2768; const void*x2769; void*x2770; void*x2771; void*x2772; out const void*x2773; void*x2774; unsigned char x2775; out void*x2776; void*x2777; void*x2778; in int x2779; out in unsigned short x2780; void*x2781; in BOOL x2782; void*x2783; void*x2784; void*x2785; void*x2786; void*x2787; void*x2788; void*x2789; void*x2790; void*x2791; void*x2792; void*x2793; void*x2794; void*x2795; void*x2796; void*x2797; void*x2798; void*x2799; void*x2800; out void*x2801; void*x2802; void*x2803; void*x2804; void*x2805; void*x2806; void*x2807; void*x2808; void*x2809; void*x2810; void*x2811; void*x2812; void*x2813; void*x2814; void*x2815; void*x2816; void*x2817; void*x2818; void*x2819; void*x2820; void*x2821; void*x2822; void*x2823; void*x2824; void*x2825; void*x2826; void*x2827; void*x2828; void*x2829; void*x2830; void*x2831; void*x2832; void*x2833; void*x2834; void*x2835; void*x2836; void*x2837; void*x2838; void*x2839; void*x2840; void*x2841; char *x2842; bool x2843; void*x2844; void*x2845; unsigned long long x2846; void*x2847; void*x2848; void*x2849; void*x2850; void*x2851; void*x2852; void*x2853; void*x2854; void*x2855; void*x2856; void*x2857; void*x2858; void*x2859; void*x2860; void*x2861; void x2862; void*x2863; void*x2864; void*x2865; void*x2866; void*x2867; void*x2868; void*x2869; void*x2870; void*x2871; void*x2872; void*x2873; void*x2874; void*x2875; void*x2876; void*x2877; void x2878; void*x2879; void*x2880; void*x2881; void*x2882; void*x2883; void*x2884; void*x2885; unsigned short x2886; void*x2887; short x2888; void*x2889; void*x2890; void*x2891; void*x2892; unsigned long x2893; int x2894; unsigned int x2895/* : ? */; const void*x2896; const void*x2897; void*x2898; void*x2899; const int x2900; void x2901; void*x2902; void*x2903; void*x2904; void*x2905; const void*x2906; void*x2907; void*x2908; void*x2909; out const void*x2910; short x2911; void*x2912; unsigned char x2913; out in float x2914; void*x2915; const void*x2916; in BOOL x2917; void*x2918; void*x2919; float x2920; const void*x2921; void*x2922; void*x2923; void*x2924; out const void*x2925; void*x2926; unsigned char x2927; out in float x2928; void*x2929; const void*x2930; in BOOL x2931; void*x2932; void*x2933; void*x2934; void*x2935; void*x2936; void*x2937; void*x2938; void*x2939; void*x2940; out void*x2941; void*x2942; void*x2943; void*x2944; void*x2945; void*x2946; void*x2947; void*x2948; void*x2949; void*x2950; void*x2951; void*x2952; void*x2953; void*x2954; void*x2955; void*x2956; void*x2957; void*x2958; void*x2959; void*x2960; void*x2961; void*x2962; void*x2963; void*x2964; void*x2965; void*x2966; void*x2967; void*x2968; void*x2969; void*x2970; void*x2971; void*x2972; id x2973; double x2974; out void*x2975; void*x2976; void*x2977; void*x2978; void*x2979; void*x2980; void*x2981; void*x2982; void*x2983; void*x2984; void*x2985; void*x2986; void*x2987; void*x2988; void*x2989; void*x2990; void*x2991; void*x2992; void*x2993; void*x2994; void*x2995; void*x2996; void*x2997; void*x2998; void*x2999; void*x3000; void*x3001; void*x3002; id x3003; double x3004; out void*x3005; void*x3006; void*x3007; void*x3008; void*x3009; void*x3010; void*x3011; void*x3012; void*x3013; void*x3014; void*x3015; void*x3016; void*x3017; void*x3018; unsigned short x3019; unsigned char x3020; void*x3021; void*x3022; void*x3023; void*x3024; void*x3025; void*x3026; void*x3027; void*x3028; void*x3029; void*x3030; void*x3031; void*x3032; void*x3033; void*x3034; void*x3035; void*x3036; void*x3037; void*x3038; void*x3039; void*x3040; void*x3041; void*x3042; void*x3043; void*x3044; void*x3045; void*x3046; void*x3047; void*x3048; void*x3049; void*x3050; void*x3051; void*x3052; void*x3053; void*x3054; void*x3055; void*x3056; void*x3057; void*x3058; void*x3059; void*x3060; void*x3061; void*x3062; void x3063; void*x3064; void*x3065; void*x3066; void*x3067; void*x3068; void*x3069; void*x3070; void*x3071; void*x3072; void*x3073; void*x3074; void*x3075; void*x3076; void*x3077; void*x3078; void*x3079; void*x3080; void*x3081; void*x3082; void*x3083; void*x3084; void*x3085; void*x3086; void*x3087; void*x3088; void*x3089; void*x3090; void*x3091; void*x3092; void*x3093; void*x3094; void*x3095; void*x3096; id x3097; void*x3098; void*x3099; void*x3100; void*x3101; void*x3102; void*x3103; void*x3104; void*x3105; void*x3106; void*x3107; void*x3108; void*x3109; void*x3110; void*x3111; void*x3112; void*x3113; void*x3114; void*x3115; void*x3116; void*x3117; void*x3118; void*x3119; void*x3120; void*x3121; void*x3122; void*x3123; void*x3124; void*x3125; void*x3126; oneway void*x3127; void*x3128; void*x3129; void*x3130; void*x3131; void*x3132; void*x3133; void*x3134; void*x3135; void*x3136; void*x3137; void*x3138; void*x3139; void*x3140; void*x3141; void*x3142; unsigned long long x3143; unsigned char x3144; void*x3145; void*x3146; void*x3147; void*x3148; void*x3149; void*x3150; void*x3151; void*x3152; void*x3153; void*x3154; void*x3155; void*x3156; void*x3157; void*x3158; void*x3159; void*x3160; void*x3161; void*x3162; void*x3163; void*x3164; void*x3165; void*x3166; void*x3167; void*x3168; void*x3169; void*x3170; void*x3171; void*x3172; void*x3173; void*x3174; id x3175; bool x3176; void*x3177; void*x3178; void*x3179; void*x3180; inout void*x3181; void*x3182; long x3183; void*x3184; int x3185; oneway void*x3186; long x3187; void*x3188; void*x3189; void*x3190; const out void*x3191; void*x3192; const void*x3193; void*x3194; long doublex3195; void*x3196; short x3197; BOOL x3198; const int x3199; void*x3200; void*x3201; int x3202; out in void*x3203; void*x3204; void*x3205; void*x3206; void*x3207; void*x3208; void*x3209; void*x3210; void*x3211; void*x3212; void*x3213; id x3214; void*x3215; out unsigned long long x3216; void*x3217; void*x3218; unsigned short x3219; void*x3220; short x3221; void*x3222; void*x3223; void*x3224; void*x3225; unsigned long x3226; int x3227; unsigned int x3228/* : ? */; const void*x3229; const void*x3230; void*x3231; void*x3232; const void*x3233; void*x3234; void*x3235; void*x3236; out const void*x3237; short x3238; void*x3239; unsigned char x3240; out in void*x3241; void*x3242; BOOL x3243; void*x3244; short x3245; void*x3246; float x3247; const void*x3248; void*x3249; void*x3250; void*x3251; out const void*x3252; void*x3253; unsigned char x3254; out in void*x3255; void*x3256; BOOL x3257; void*x3258; void*x3259; void*x3260; void*x3261; void x3262; void*x3263; void*x3264; void*x3265; void*x3266; void*x3267; void*x3268; void*x3269; void*x3270; void*x3271; unsigned int x3272; void*x3273; void*x3274; unsigned int x3275/* : ? */; long x3276; void*x3277; oneway int x3278; void*x3279; void*x3280; unsigned int x3281; in double x3282; void*x3283; void*x3284; void*x3285; in void*x3286; const void*x3287; void*x3288; void*x3289; void*x3290; void*x3291; id x3292; void*x3293; void*x3294; unsigned long long x3295; void*x3296; void*x3297; oneway unsigned short x3298; void*x3299; void*x3300; void*x3301; long x3302; void*x3303; bool x3304; void*x3305; float x3306; float x3307; void*x3308; const long doublex3309; int x3310; short x3311; void*x3312; long x3313; void*x3314; void*x3315; unsigned long x3316; void*x3317; void*x3318; void*x3319; const unsigned int x3320; in void*x3321; void*x3322; const in void*x3323; long x3324; void*x3325; void*x3326; void*x3327; void*x3328; void*x3329; void*x3330; void*x3331; void*x3332; id x3333; void*x3334; out void*x3335; void*x3336; void*x3337; void*x3338; void*x3339; unsigned int x3340; void*x3341; void*x3342; const int x3343; unsigned int x3344/* : ? */; void*x3345; void*x3346; void*x3347; double x3348; unsigned short x3349; void*x3350; const int x3351; in void*x3352; unsigned int x3353; in double x3354; void*x3355; void*x3356; bool x3357; void*x3358; const void*x3359; in void*x3360; const void*x3361; void*x3362; void*x3363; void*x3364; void*x3365; void*x3366; void*x3367; void*x3368; void*x3369; void*x3370; void*x3371; void*x3372; void*x3373; void*x3374; void*x3375; void*x3376; void*x3377; void*x3378; void*x3379; void*x3380; void*x3381; void*x3382; void*x3383; void*x3384; void*x3385; void*x3386; void*x3387; void*x3388; void*x3389; void*x3390; void*x3391; void*x3392; void*x3393; void*x3394; void*x3395; void*x3396; void*x3397; void*x3398; void*x3399; void*x3400; void x3401; void*x3402; void*x3403; void*x3404; void*x3405; void*x3406; void*x3407; void*x3408; unsigned short x3409; void*x3410; void*x3411; unsigned int x3412; void*x3413; void*x3414; void*x3415; void*x3416; unsigned char x3417; out void*x3418; void*x3419; out in void*x3420; in void*x3421; void*x3422; void*x3423; void*x3424; void*x3425; void*x3426; void*x3427; void*x3428; long doublex3429; void*x3430; void*x3431; void*x3432; out void*x3433; void*x3434; void*x3435; void*x3436; void*x3437; void*x3438; void*x3439; void*x3440; void*x3441; void*x3442; void*x3443; void*x3444; void*x3445; void*x3446; void*x3447; void*x3448; void*x3449; void*x3450; void*x3451; void*x3452; void*x3453; void*x3454; void*x3455; void*x3456; void*x3457; struct x3458; void*x3459; void*x3460; void*x3461; void*x3462; void*x3463; void*x3464; void*x3465; void*x3466; void*x3467; void*x3468; void*x3469; void*x3470; void*x3471; void*x3472; void*x3473; void*x3474; void*x3475; void*x3476; void*x3477; void*x3478; void*x3479; void*x3480; void*x3481; void*x3482; void x3483; void*x3484; void*x3485; void*x3486; void*x3487; void*x3488; void*x3489; void*x3490; void*x3491; long doublex3492; unsigned long x3493; unsigned long x3494; int x3495; void*x3496; void*x3497; void*x3498; void*x3499; void*x3500; void*x3501; void*x3502; void*x3503; void*x3504; void*x3505; void*x3506; void*x3507; void*x3508; void*x3509; void*x3510; void*x3511; void*x3512; void*x3513; void*x3514; void*x3515; void*x3516; void*x3517; void*x3518; void*x3519; void*x3520; void*x3521; void*x3522; void*x3523; void*x3524; void*x3525; void*x3526; void*x3527; void*x3528; void*x3529; void*x3530; void*x3531; void*x3532; long long x3533; void*x3534; void*x3535; long long x3536; void*x3537; void*x3538; void*x3539; void*x3540; void*x3541; void*x3542; const void*x3543; in short x3544; int x3545; void*x3546; int x3547; out in int x3548; in void*x3549; long doublex3550; void*x3551; long x3552; void*x3553; void*x3554; void*x3555; void*x3556; void*x3557; SEL x3558; void*x3559; void*x3560; void*x3561; void*x3562; void*x3563; void*x3564; void*x3565; void*x3566; void*x3567; void*x3568; void*x3569; void*x3570; void*x3571; void*x3572; void*x3573; void*x3574; void*x3575; id x3576; void*x3577; void*x3578; void*x3579; void*x3580; void*x3581; in long x3582; out void*x3583; double x3584; oneway int x3585; void*x3586; void*x3587; void*x3588; void*x3589; void*x3590; void*x3591; void*x3592; void*x3593; void*x3594; void*x3595; void*x3596; void*x3597; void*x3598; void*x3599; void*x3600; void*x3601; void*x3602; void*x3603; void*x3604; void*x3605; void*x3606; void*x3607; void*x3608; void*x3609; void*x3610; void*x3611; void*x3612; void*x3613; void*x3614; void*x3615; void*x3616; void*x3617; double x3618; void*x3619; void*x3620; void*x3621; void**x3622; void*x3623; void*x3624; void*x3625; void*x3626; void*x3627; void**x3628; void*x3629; void*x3630; void*x3631; void*x3632; void*x3633; void*x3634; void*x3635; void*x3636; void*x3637; void*x3638; void*x3639; void*x3640; void*x3641; void*x3642; void*x3643; void*x3644; void*x3645; void*x3646; void*x3647; void*x3648; long long x3649; void*x3650; void*x3651; void*x3652; void*x3653; void*x3654; void*x3655; void*x3656; void*x3657; void*x3658; void*x3659; void*x3660; void*x3661; void*x3662; void*x3663; void*x3664; void*x3665; void*x3666; void*x3667; void*x3668; void*x3669; void*x3670; void*x3671; void*x3672; void*x3673; void*x3674; void*x3675; void*x3676; void*x3677; void*x3678; void*x3679; void*x3680; void*x3681; void*x3682; void*x3683; void*x3684; void*x3685; void*x3686; void*x3687; void*x3688; void*x3689; void*x3690; void*x3691; void*x3692; void x3693; void*x3694; void*x3695; void*x3696; void*x3697; void*x3698; void*x3699; void*x3700; void*x3701; void*x3702; void*x3703; void*x3704; void*x3705; void*x3706; void*x3707; void*x3708; void x3709; void*x3710; void*x3711; void*x3712; void*x3713; void*x3714; void*x3715; void*x3716; void*x3717; void*x3718; void*x3719; void*x3720; void*x3721; void*x3722; void*x3723; void*x3724; void*x3725; void*x3726; void*x3727; void*x3728; void*x3729; void*x3730; void*x3731; void*x3732; void*x3733; void*x3734; void*x3735; void*x3736; void*x3737; void*x3738; void*x3739; void*x3740; void*x3741; void*x3742; void*x3743; void*x3744; void*x3745; void*x3746; void*x3747; void*x3748; void*x3749; void*x3750; void*x3751; void*x3752; void*x3753; void*x3754; void*x3755; void*x3756; void*x3757; void*x3758; void*x3759; void*x3760; void*x3761; void*x3762; void*x3763; void*x3764; void*x3765; void*x3766; void*x3767; void*x3768; void*x3769; void*x3770; void*x3771; void*x3772; void*x3773; void*x3774; void*x3775; void*x3776; long long x3777; void*x3778; void*x3779; void*x3780; void*x3781; union { void x_3782_1_1; out int x_3782_1_2; double x_3782_1_3; } x3782; void*x3783; void*x3784; void*x3785; void*x3786; void*x3787; void*x3788; void*x3789; void*x3790; void*x3791; void*x3792; void*x3793; void*x3794; void*x3795; void*x3796; void*x3797; void*x3798; void*x3799; void*x3800; void*x3801; void*x3802; void*x3803; void*x3804; void*x3805; void*x3806; void*x3807; void*x3808; void*x3809; void*x3810; void*x3811; void*x3812; void*x3813; void*x3814; void*x3815; void*x3816; void*x3817; void*x3818; void*x3819; void*x3820; void*x3821; void*x3822; void*x3823; void*x3824; void*x3825; void*x3826; void*x3827; void*x3828; void*x3829; void*x3830; void*x3831; void*x3832; id x3833; void*x3834; void*x3835; void*x3836; void*x3837; void*x3838; void*x3839; void*x3840; void*x3841; void*x3842; void*x3843; void*x3844; void*x3845; void*x3846; void*x3847; void*x3848; void*x3849; short x3850; void*x3851; void*x3852; void*x3853; void*x3854; void*x3855; void*x3856; void*x3857; void*x3858; void*x3859; void*x3860; void*x3861; void*x3862; void*x3863; void*x3864; void*x3865; void*x3866; void*x3867; void*x3868; void*x3869; void*x3870; void*x3871; void*x3872; void*x3873; void*x3874; void*x3875; void*x3876; void*x3877; void*x3878; void*x3879; void*x3880; void*x3881; void*x3882; void*x3883; void*x3884; void*x3885; void*x3886; void*x3887; void*x3888; void*x3889; void*x3890; void*x3891; void*x3892; void*x3893; void*x3894; void*x3895; void*x3896; void*x3897; void*x3898; void*x3899; void*x3900; void*x3901; void*x3902; void*x3903; void*x3904; void*x3905; void*x3906; void*x3907; void*x3908; void*x3909; void x3910; void*x3911; void*x3912; void*x3913; void*x3914; void*x3915; void*x3916; void*x3917; void*x3918; unsigned short x3919; void*x3920; long doublex3921; void*x3922; BOOL x3923; out double x3924; void*x3925; const long doublex3926; void*x3927; void*x3928; void*x3929; unsigned int x3930; in float x3931; out void*x3932; void*x3933; void*x3934; void*x3935; void*x3936; int x3937; void*x3938; void*x3939; void*x3940; void*x3941; bycopy void*x3942; unsigned long long x3943; void*x3944; void*x3945; void*x3946; void*x3947; void*x3948; void*x3949; void*x3950; void*x3951; void*x3952; void*x3953; void*x3954; id x3955; void*x3956; short x3957; void*x3958; void*x3959; id x3960; void*x3961; void*x3962; void*x3963; void*x3964; void*x3965; void*x3966; void*x3967; void*x3968; void*x3969; void*x3970; void*x3971; void*x3972; void*x3973; void*x3974; void*x3975; void*x3976; void*x3977; void*x3978; void*x3979; void*x3980; void*x3981; void*x3982; void*x3983; void*x3984; void*x3985; void*x3986; void*x3987; void*x3988; void*x3989; void*x3990; void*x3991; void*x3992; void*x3993; void*x3994; void*x3995; void*x3996; void*x3997; void*x3998; void*x3999; void*x4000; id x4001; void*x4002; void*x4003; void*x4004; void*x4005; void*x4006; void*x4007; void*x4008; void*x4009; void*x4010; void*x4011; void*x4012; void*x4013; void*x4014; void*x4015; void*x4016; void*x4017; void*x4018; void*x4019; void*x4020; void*x4021; void*x4022; void*x4023; void*x4024; void*x4025; void*x4026; void*x4027; void*x4028; void*x4029; void*x4030; void*x4031; void*x4032; void*x4033; void*x4034; void*x4035; void*x4036; void*x4037; void*x4038; void*x4039; void*x4040; void*x4041; void*x4042; void*x4043; void*x4044; void*x4045; void*x4046; void*x4047; void*x4048; void*x4049; void*x4050; void*x4051; void*x4052; void*x4053; void*x4054; void*x4055; void*x4056; void*x4057; void*x4058; void*x4059; void*x4060; void*x4061; void*x4062; void*x4063; void*x4064; void*x4065; void*x4066; void*x4067; void*x4068; void*x4069; void*x4070; void*x4071; void*x4072; void*x4073; void*x4074; void*x4075; void*x4076; void*x4077; void*x4078; void*x4079; void*x4080; void*x4081; void*x4082; void*x4083; void*x4084; void*x4085; void*x4086; void*x4087; void*x4088; void*x4089; void*x4090; void*x4091; void*x4092; void* x4093[ /* ? */ ]; void*x4094; void*x4095; void*x4096; void*x4097; out out long x4098; unsigned int x4099/* : ? */; void*x4100; const unsigned int x4101; void*x4102; void*x4103; void*x4104; short x4105; SEL x4106; void*x4107; in int x4108; void*x4109; void*x4110; void*x4111; void*x4112; double x4113; SEL x4114; void*x4115; void*x4116; void*x4117; void*x4118; void*x4119; void*x4120; void*x4121; void*x4122; void*x4123; void*x4124; void*x4125; void*x4126; void*x4127; void*x4128; void*x4129; void*x4130; void*x4131; id x4132; void*x4133; long x4134; void*x4135; void*x4136; void*x4137; int x4138; void*x4139; void*x4140; unsigned int x4141; float x4142; unsigned long x4143; out void*x4144; double x4145; void*x4146; double x4147; void*x4148; void*x4149; void*x4150; void*x4151; void*x4152; void*x4153; void*x4154; void*x4155; void*x4156; void*x4157; void*x4158; void*x4159; void*x4160; void*x4161; void*x4162; void*x4163; void*x4164; void*x4165; void*x4166; void*x4167; void*x4168; void*x4169; void*x4170; void*x4171; void*x4172; void*x4173; void*x4174; void*x4175; void*x4176; void*x4177; void*x4178; void*x4179; void*x4180; void*x4181; void*x4182; void*x4183; void*x4184; void*x4185; void*x4186; void*x4187; void*x4188; void*x4189; void*x4190; void*x4191; void*x4192; void*x4193; void*x4194; void*x4195; void*x4196; void*x4197; void*x4198; id x4199; void*x4200; void*x4201; void*x4202; void*x4203; bycopy void*x4204; id x4205; void*x4206; void*x4207; void*x4208; void*x4209; void*x4210; void*x4211; void*x4212; void*x4213; void*x4214; void*x4215; void*x4216; void*x4217; void*x4218; void*x4219; void*x4220; struct x4221; void*x4222; void*x4223; void*x4224; void*x4225; struct  struct shared_ptr<vk::TrafficIncidentLabelFeature> { {} x4226; void*x4227; char *x4228; void*x4229; void*x4230; void*x4231; void*x4232; short x4233; void*x4234; const void*x4235; BOOL x4236; void*x4237; void*x4238; short x4239; void*x4240; void*x4241; const void*x4242; double x4243; void*x4244; void*x4245; void*x4246; const void*x4247; void x4248; void*x4249; SEL x4250; SEL x4251; void*x4252; const void*x4253; float x4254; float x4255; int x4256; BOOL x4257; unsigned int x4258; in BOOL x4259; int x4260; double x4261; void*x4262; in void*x4263; unsigned long x4264; void*x4265; unsigned int x4266/* : ? */; void*x4267; long x4268; void*x4269; void*x4270; void*x4271; void*x4272; void*x4273; const void*x4274; void*x4275; void*x4276; struct  {} x4277; void*x4278; char *x4279; void*x4280; void*x4281; void*x4282; void*x4283; short x4284; void*x4285; const void*x4286; BOOL x4287; void*x4288; void*x4289; void*x4290; void*x4291; BOOL x4292; out void*x4293; void*x4294; const void*x4295; short x4296; short x4297; void*x4298; double x4299; void*x4300; void*x4301; void*x4302; int x4303; const void*x4304; short x4305; void*x4306; double x4307; SEL x4308; SEL x4309; void*x4310; void*x4311; void*x4312; SEL x4313; SEL x4314; short x4315; void*x4316; void*x4317; const void*x4318; double x4319; void*x4320; void*x4321; void*x4322; const void*x4323; void x4324; void*x4325; SEL x4326; SEL x4327; void*x4328; const void*x4329; float x4330; float x4331; int x4332; BOOL x4333; unsigned int x4334; in BOOL x4335; int x4336; double x4337; void*x4338; in void*x4339; unsigned long x4340; void*x4341; unsigned int x4342/* : ? */; void*x4343; long x4344; void*x4345; void*x4346; void*x4347; void*x4348; void*x4349; const void*x4350; void*x4351; void*x4352; char *x4353; void*x4354; void*x4355; short x4356; void*x4357; double x4358; SEL x4359; SEL x4360; void*x4361; void*x4362; void*x4363; SEL x4364; SEL x4365; void*x4366; long x4367; long x4368; out BOOL x4369; void*x4370; void*x4371; out const void*x4372; short x4373; void*x4374; double x4375; SEL x4376; SEL x4377; void*x4378; void*x4379; void*x4380; SEL x4381; SEL x4382; short x4383; void*x4384; void*x4385; const void*x4386; double x4387; void*x4388; void*x4389; void*x4390; const void*x4391; void x4392; void*x4393; SEL x4394; SEL x4395; void*x4396; const void*x4397; float x4398; float x4399; int x4400; BOOL x4401; unsigned int x4402; in BOOL x4403; int x4404; double x4405; void*x4406; in void*x4407; unsigned long x4408; void*x4409; unsigned int x4410/* : ? */; void*x4411; long x4412; void*x4413; void*x4414; void*x4415; void*x4416; void*x4417; const void*x4418; void*x4419; void*x4420; void*x4421; void*x4422; void*x4423; void*x4424; struct  struct shared_ptr<vk::TrafficIncidentLabelFeature> { {} x4425; void*x4426; char *x4427; void*x4428; void*x4429; void*x4430; void*x4431; void*x4432; void*x4433; void*x4434; void*x4435; void*x4436; }*positionInformation; /* unknown property attribute:  16>=^{FloatRect}II}f{RefPtr<WebCore::Image>=^{Image}}{RefPtr<WebCore::Image>=^{Image}}iB}} */
@property (nonatomic, copy) NSString *recentInputIdentifier;
@property (getter=isResigningFirstResponder, nonatomic, readonly) BOOL resigningFirstResponder;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) int returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) BOOL secureTextEntry;
@property (copy) UITextRange *selectedTextRange;
@property (nonatomic) int selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) int selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (getter=isShowingInspectorIndication, nonatomic) BOOL showingInspectorIndication;
@property (nonatomic) int spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) struct _NSRange { unsigned int x1; unsigned int x2; } validTextRange;

// Image: /System/Library/Frameworks/WebKit.framework/WebKit

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_accessibilityRegisterUIProcessTokens;
- (SEL)_actionForLongPress;
- (void)_addDefaultGestureRecognizers;
- (void)_addShortcut:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground;
- (void)_applicationWillEnterForeground;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_arrowKey:(id)arg1;
- (void)_attemptClickAtLocation:(struct CGPoint { float x1; float x2; })arg1;
- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)arg1 completionHandler:(id /* block */)arg2;
- (void)_cancelInteraction;
- (void)_cancelLongPressGestureRecognizer;
- (unsigned long)_characterBeforeCaretSelection;
- (unsigned long)_characterInRelationToCaretSelection:(int)arg1;
- (void)_commitPotentialTapFailed;
- (id)_commonInitializationWithProcessPool:(struct WebProcessPool { int (**x1)(); id x2; int (*x3)(); struct Ref<API::ProcessPoolConfiguration> { struct ProcessPoolConfiguration {} *x_4_1_1; } x4; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_5_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_5_1_2; } x5; struct Vector<WTF::RefPtr<WebKit::WebProcessProxy>, 0, WTF::CrashOnOverflow, 16> { struct RefPtr<WebKit::WebProcessProxy> {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; bool x7; struct WebProcessProxy {} *x8; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_9_1_1; } x9; struct RefPtr<API::Object> { struct Object {} *x_10_1_1; } x10; struct WebContextInjectedBundleClient { struct WKContextInjectedBundleClientV1 { struct WKContextInjectedBundleClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); } x_11_1_1; } x11; struct WebContextClient { struct WKContextClientV1 { struct WKContextClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); int (*x_1_2_5)(); } x_12_1_1; } x12; struct WebContextConnectionClient { struct WKContextConnectionClientV0 { struct WKContextConnectionClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); } x_13_1_1; } x13; struct unique_ptr<API::DownloadClient, std::__1::default_delete<API::DownloadClient> > { struct __compressed_pair<API::DownloadClient *, std::__1::default_delete<API::DownloadClient> > { struct DownloadClient {} *x_1_2_1; } x_14_1_1; } x14; struct unique_ptr<API::LegacyContextHistoryClient, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct __compressed_pair<API::LegacyContextHistoryClient *, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct LegacyContextHistoryClient {} *x_1_2_1; } x_15_1_1; } x15; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_16_1_1; } x16; bool x17; struct PlugInAutoStartProvider { struct WebProcessPool {} *x_18_1_1; struct HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_18_1_2; struct HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_3_2_1; } x_18_1_3; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_18_1_4; } x18; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_19_1_1; } x19; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_20_1_1; } x20; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_21_1_1; } x21; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_22_1_1; } x22; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_23_1_1; } x23; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_24_1_1; } x24; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_25_1_1; } x25; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_26_1_1; } x26; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_27_1_1; } x27; bool x28; bool x29; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_30_1_1; unsigned int x_30_1_2; unsigned int x_30_1_3; } x30; struct Vector<std::__1::pair<WTF::String, WTF::RefPtr<API::Object> >, 0, WTF::CrashOnOverflow, 16> { struct pair<WTF::String, WTF::RefPtr<API::Object> > {} *x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; } x31; bool x32; double x33; struct RefPtr<WebKit::WebIconDatabase> { struct WebIconDatabase {} *x_34_1_1; } x34; struct RefPtr<API::WebsiteDataStore> { struct WebsiteDataStore {} *x_35_1_1; } x35; struct HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_36_1_1; } x36; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_37_1_1; } x37; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_38_1_1; } x38; bool x39; bool x40; bool x41; bool x42; struct RefPtr<WebKit::NetworkProcessProxy> { struct NetworkProcessProxy {} *x_43_1_1; } x43; struct RefPtr<WebKit::DatabaseProcessProxy> { struct DatabaseProcessProxy {} *x_44_1_1; } x44; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_45_1_1; } x45; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_46_1_1; } x46; bool x47; struct RefCounter { struct function<void (bool)>={type=[12C] {} x_48_1_1; struct __base<void (bool)> {} *x_48_1_2; } x48; struct Count {} *x49; }*)arg1 configuration:(struct WebPageConfiguration { struct WebPageGroup {} *x1; struct WebPreferences {} *x2; struct WebUserContentControllerProxy {} *x3; struct VisitedLinkProvider {} *x4; struct WebsiteDataStore {} *x5; struct SessionID { unsigned long long x_6_1_1; } x6; struct WebPageProxy {} *x7; bool x8; bool x9; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_10_1_1; } x10; })arg2;
- (void)_createAndConfigureDoubleTapGestureRecognizer;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_1_1; } x1; })_createDrawingAreaProxy;
- (id)_dataForPreviewItemController:(id)arg1 atPosition:(struct CGPoint { float x1; float x2; })arg2 type:(int*)arg3;
- (void)_define:(id)arg1;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow, 16> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_3_1_1; } x3; struct Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties, 0, WTF::CrashOnOverflow, 16> { struct LayerCreationProperties {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow, 16> { unsigned long long *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow, 16> { unsigned long long *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow, 16> { unsigned long long *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow, 16> { unsigned long long *x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; } x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; struct IntPoint { int x_10_1_1; int x_10_1_2; } x10; struct Color { unsigned int x_11_1_1; bool x_11_1_2; } x11; double x12; double x13; double x14; double x15; double x16; unsigned long long x17; unsigned long long x18; bool x19; bool x20; bool x21; bool x22; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didEndScrollingOrZooming;
- (void)_didGetTapHighlightForRequest:(unsigned long long)arg1 color:(const struct Color { unsigned int x1; bool x2; }*)arg2 quads:(const struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16> { struct FloatQuad {} *x1; unsigned int x2; unsigned int x3; }*)arg3 topLeftRadius:(const struct IntSize { int x1; int x2; }*)arg4 topRightRadius:(const struct IntSize { int x1; int x2; }*)arg5 bottomLeftRadius:(const struct IntSize { int x1; int x2; }*)arg6 bottomRightRadius:(const struct IntSize { int x1; int x2; }*)arg7;
- (void)_didHandleKeyEvent:(id)arg1 eventWasHandled:(BOOL)arg2;
- (void)_didNotHandleTapAsClick;
- (void)_didRelaunchProcess;
- (void)_didScroll;
- (void)_didUpdateBlockSelectionWithTouch:(int)arg1 withFlags:(int)arg2 growThreshold:(float)arg3 shrinkThreshold:(float)arg4;
- (void)_disableDoubleTapGesturesDuringTapIfNecessary:(unsigned long long)arg1;
- (void)_disableInspectorNodeSearch;
- (void)_displayFormNodeInputView;
- (void)_doubleTapRecognized:(id)arg1;
- (void)_enableInspectorNodeSearch;
- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary;
- (void)_fastDoubleTapRecognized:(id)arg1;
- (void)_finishInteraction;
- (void)_handleKeyUIEvent:(id)arg1;
- (void)_hideInspectorHighlight;
- (void)_highlightLongPressRecognized:(id)arg1;
- (void)_inspectorNodeSearchRecognized:(id)arg1;
- (BOOL)_interactionShouldBeginFromPreviewItemController:(id)arg1 forPosition:(struct CGPoint { float x1; float x2; })arg2;
- (void)_interactionStartedFromPreviewItemController:(id)arg1;
- (void)_interactionStoppedFromPreviewItemController:(id)arg1;
- (BOOL)_interpretKeyEvent:(id)arg1 isCharEvent:(BOOL)arg2;
- (BOOL)_isInteractingWithAssistedNode;
- (void)_longPressRecognized:(id)arg1;
- (void)_lookup:(struct CGPoint { float x1; float x2; })arg1;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_markedTextNSRange;
- (BOOL)_mayDisableDoubleTapGesturesDuringSingleTap;
- (id)_moveDown:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveRight:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(BOOL)arg1 withHistory:(id)arg2;
- (id)_moveUp:(BOOL)arg1 withHistory:(id)arg2;
- (void)_nextAccessoryTab:(id)arg1;
- (void)_overflowScrollingDidEnd;
- (void)_overflowScrollingWillBegin;
- (struct OpaqueWKPage { }*)_pageRef;
- (void)_positionInformationDidChange:(const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_9_1_1; } x9; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_10_1_1; } x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_12_1_1; } x12; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_13_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_13_1_2; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_13_1_3; float x_13_1_4; struct RefPtr<WebCore::Image> { struct Image {} *x_5_2_1; } x_13_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_13_1_6; int x_13_1_7; bool x_13_1_8; } x13; }*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_presentationRectForPreviewItemController:(id)arg1;
- (id)_presentationRectsForPreviewItemController:(id)arg1;
- (id)_presentationSnapshotForPreviewItemController:(id)arg1;
- (id)_presentedViewControllerForPreviewItemController:(id)arg1;
- (void)_prevAccessoryTab:(id)arg1;
- (void)_previewItemController:(id)arg1 commitPreview:(id)arg2;
- (void)_previewItemController:(id)arg1 didDismissPreview:(id)arg2 committing:(BOOL)arg3;
- (void)_previewItemControllerDidCancelPreview:(id)arg1;
- (void)_processDidExit;
- (void)_promptForReplace:(id)arg1;
- (void)_reanalyze:(id)arg1;
- (void)_registerPreview;
- (void)_removeDefaultGestureRecognizers;
- (BOOL)_requiresKeyboardResetOnReload;
- (BOOL)_requiresKeyboardWhenFirstResponder;
- (void)_resetIsDoubleTapPending;
- (void)_resetShowingTextStyle:(id)arg1;
- (struct Optional<WebCore::FloatPoint> { bool x1; struct type { unsigned char x_2_1_1[8]; } x2; })_scrollOffsetForEvent:(id)arg1;
- (BOOL)_scrollToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (id)_scroller;
- (BOOL)_selectionAtDocumentStart;
- (void)_selectionChanged;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_selectionClipRect;
- (void)_setAcceleratedCompositingRootView:(id)arg1;
- (void)_setAccessibilityWebProcessToken:(id)arg1;
- (void)_setDoubleTapGesturesEnabled:(BOOL)arg1;
- (void)_share:(id)arg1;
- (void)_showDataDetectorsSheet;
- (void)_showDictionary:(id)arg1;
- (void)_showImageSheet;
- (void)_showInspectorHighlight:(const struct Highlight { struct Color { unsigned int x_1_1_1; bool x_1_1_2; } x1; struct Color { unsigned int x_2_1_1; bool x_2_1_2; } x2; struct Color { unsigned int x_3_1_1; bool x_3_1_2; } x3; struct Color { unsigned int x_4_1_1; bool x_4_1_2; } x4; struct Color { unsigned int x_5_1_1; bool x_5_1_2; } x5; int x6; struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow, 16> { struct FloatQuad {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; }*)arg1;
- (void)_showLinkSheet;
- (void)_showPlaybackTargetPicker:(BOOL)arg1 fromRect:(const struct IntRect { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntSize { int x_2_1_1; int x_2_1_2; } x2; }*)arg2;
- (void)_showRunOpenPanel:(struct WebOpenPanelParameters { }*)arg1 resultListener:(struct WebOpenPanelResultListenerProxy { }*)arg2;
- (void)_showTapHighlight;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_singleTapCommited:(id)arg1;
- (void)_singleTapDidReset:(id)arg1;
- (void)_singleTapRecognized:(id)arg1;
- (void)_startAssistingKeyboard;
- (void)_startAssistingNode:(const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)arg1 userIsInteracting:(BOOL)arg2 blurPreviousNode:(BOOL)arg3 userObject:(id)arg4;
- (void)_stopAssistingKeyboard;
- (void)_stopAssistingNode;
- (struct Color { unsigned int x1; bool x2; })_tapHighlightColorForFastClick:(BOOL)arg1;
- (void)_transliterateChinese:(id)arg1;
- (void)_twoFingerDoubleTapRecognized:(id)arg1;
- (void)_unregisterPreview;
- (void)_updateAccessory;
- (void)_updateChangedSelection;
- (void)_updateChangedSelection:(BOOL)arg1;
- (void)_updateForScreen:(id)arg1;
- (void)_updateTapHighlight;
- (void)_webTouchEvent:(const struct NativeWebTouchEvent { unsigned int x1; unsigned int x2; double x3; struct Vector<WebKit::WebPlatformTouchPoint, 0, WTF::CrashOnOverflow, 16> { struct WebPlatformTouchPoint {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct IntPoint { int x_5_1_1; int x_5_1_2; } x5; bool x6; bool x7; bool x8; float x9; float x10; }*)arg1 preventsNativeGestures:(BOOL)arg2;
- (void)_webTouchEventsRecognized:(id)arg1;
- (void)_webViewDestroyed;
- (void)_willStartScrollingOrZooming;
- (void)_windowDidMoveToScreenNotification:(id)arg1;
- (void)_zoomOutWithOrigin:(struct CGPoint { float x1; float x2; })arg1;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 selectionRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(BOOL)arg6 forceScroll:(BOOL)arg7;
- (void)_zoomToInitialScaleWithOrigin:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)_zoomToRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { float x1; float x2; })arg2 fitEntireRect:(BOOL)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)accessoryAutoFill;
- (void)accessoryClear;
- (void)accessoryDone;
- (void)accessoryTab:(BOOL)arg1;
- (struct RetainPtr<NSArray> { void *x1; })actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(struct RetainPtr<NSArray> { void *x1; })arg3;
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint { float x1; float x2; })arg2;
- (void)actionSheetAssistant:(id)arg1 performAction:(int)arg2;
- (BOOL)actionSheetAssistant:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)assistedNodeInformation;
- (struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow, 16> { struct OptionItem {} *x1; unsigned int x2; unsigned int x3; }*)assistedNodeSelectOptions;
- (const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; float x2; unsigned long long x3; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_4_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_5_1_2; } x5; id /* block */ x6; id /* block */ x7; }*)autocorrectionData;
- (id)automaticallySelectedOverlay;
- (int)baseWritingDirectionForPosition:(id)arg1 inDirection:(int)arg2;
- (BOOL)becomeFirstResponder;
- (void)beginSelectionChange;
- (void)beginSelectionInDirection:(int)arg1 completionHandler:(id /* block */)arg2;
- (id)beginningOfDocument;
- (id)browsingContextController;
- (BOOL)canBecomeFirstResponder;
- (BOOL)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changeBlockSelectionWithTouchAt:(struct CGPoint { float x1; float x2; })arg1 withSelectionTouch:(int)arg2 forHandle:(int)arg3;
- (void)changeSelectionWithGestureAt:(struct CGPoint { float x1; float x2; })arg1 withGesture:(int)arg2 withState:(int)arg3;
- (void)changeSelectionWithTouchAt:(struct CGPoint { float x1; float x2; })arg1 withSelectionTouch:(int)arg2 baseIsStart:(BOOL)arg3;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { float x1; float x2; })arg1 to:(struct CGPoint { float x1; float x2; })arg2 withGesture:(int)arg3 withState:(int)arg4;
- (unsigned short)characterBeforeCaretSelection;
- (id)characterRangeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(int)arg2;
- (void)cleanupInteraction;
- (void)clearSelection;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1 withinRange:(id)arg2;
- (int)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)deleteBackward;
- (void)didFinishScrolling;
- (void)didInterruptScrolling;
- (void)didMoveToWindow;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 unobscuredRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 scale:(float)arg4 minimumScale:(float)arg5 inStableState:(BOOL)arg6 isChangingObscuredInsetsInteractively:(BOOL)arg7;
- (void)didZoomToScale:(float)arg1;
- (id)endOfDocument;
- (void)endSelectionChange;
- (void)ensurePositionInformationIsUpToDate:(struct CGPoint { float x1; float x2; })arg1;
- (void)executeEditCommandWithCallback:(id)arg1;
- (void)fileUploadPanelDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (id)formAccessoryView;
- (BOOL)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleKeyEvent:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (BOOL)hasContent;
- (BOOL)hasMarkedText;
- (BOOL)hasSelectablePositionAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)hasSelection;
- (BOOL)hasText;
- (id)hitTest:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 processPool:(struct WebProcessPool { int (**x1)(); id x2; int (*x3)(); struct Ref<API::ProcessPoolConfiguration> { struct ProcessPoolConfiguration {} *x_4_1_1; } x4; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_5_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_5_1_2; } x5; struct Vector<WTF::RefPtr<WebKit::WebProcessProxy>, 0, WTF::CrashOnOverflow, 16> { struct RefPtr<WebKit::WebProcessProxy> {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; bool x7; struct WebProcessProxy {} *x8; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_9_1_1; } x9; struct RefPtr<API::Object> { struct Object {} *x_10_1_1; } x10; struct WebContextInjectedBundleClient { struct WKContextInjectedBundleClientV1 { struct WKContextInjectedBundleClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); } x_11_1_1; } x11; struct WebContextClient { struct WKContextClientV1 { struct WKContextClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); int (*x_1_2_5)(); } x_12_1_1; } x12; struct WebContextConnectionClient { struct WKContextConnectionClientV0 { struct WKContextConnectionClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); } x_13_1_1; } x13; struct unique_ptr<API::DownloadClient, std::__1::default_delete<API::DownloadClient> > { struct __compressed_pair<API::DownloadClient *, std::__1::default_delete<API::DownloadClient> > { struct DownloadClient {} *x_1_2_1; } x_14_1_1; } x14; struct unique_ptr<API::LegacyContextHistoryClient, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct __compressed_pair<API::LegacyContextHistoryClient *, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct LegacyContextHistoryClient {} *x_1_2_1; } x_15_1_1; } x15; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_16_1_1; } x16; bool x17; struct PlugInAutoStartProvider { struct WebProcessPool {} *x_18_1_1; struct HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_18_1_2; struct HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_3_2_1; } x_18_1_3; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_18_1_4; } x18; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_19_1_1; } x19; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_20_1_1; } x20; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_21_1_1; } x21; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_22_1_1; } x22; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_23_1_1; } x23; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_24_1_1; } x24; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_25_1_1; } x25; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_26_1_1; } x26; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_27_1_1; } x27; bool x28; bool x29; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_30_1_1; unsigned int x_30_1_2; unsigned int x_30_1_3; } x30; struct Vector<std::__1::pair<WTF::String, WTF::RefPtr<API::Object> >, 0, WTF::CrashOnOverflow, 16> { struct pair<WTF::String, WTF::RefPtr<API::Object> > {} *x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; } x31; bool x32; double x33; struct RefPtr<WebKit::WebIconDatabase> { struct WebIconDatabase {} *x_34_1_1; } x34; struct RefPtr<API::WebsiteDataStore> { struct WebsiteDataStore {} *x_35_1_1; } x35; struct HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_36_1_1; } x36; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_37_1_1; } x37; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_38_1_1; } x38; bool x39; bool x40; bool x41; bool x42; struct RefPtr<WebKit::NetworkProcessProxy> { struct NetworkProcessProxy {} *x_43_1_1; } x43; struct RefPtr<WebKit::DatabaseProcessProxy> { struct DatabaseProcessProxy {} *x_44_1_1; } x44; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_45_1_1; } x45; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_46_1_1; } x46; bool x47; struct RefCounter { struct function<void (bool)>={type=[12C] {} x_48_1_1; struct __base<void (bool)> {} *x_48_1_2; } x48; struct Count {} *x49; }*)arg2 configuration:(struct WebPageConfiguration { struct WebPageGroup {} *x1; struct WebPreferences {} *x2; struct WebUserContentControllerProxy {} *x3; struct VisitedLinkProvider {} *x4; struct WebsiteDataStore {} *x5; struct SessionID { unsigned long long x_6_1_1; } x6; struct WebPageProxy {} *x7; bool x8; bool x9; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_10_1_1; } x10; })arg3 webView:(id)arg4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 processPool:(struct WebProcessPool { int (**x1)(); id x2; int (*x3)(); struct Ref<API::ProcessPoolConfiguration> { struct ProcessPoolConfiguration {} *x_4_1_1; } x4; struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_5_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_5_1_2; } x5; struct Vector<WTF::RefPtr<WebKit::WebProcessProxy>, 0, WTF::CrashOnOverflow, 16> { struct RefPtr<WebKit::WebProcessProxy> {} *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; bool x7; struct WebProcessProxy {} *x8; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_9_1_1; } x9; struct RefPtr<API::Object> { struct Object {} *x_10_1_1; } x10; struct WebContextInjectedBundleClient { struct WKContextInjectedBundleClientV1 { struct WKContextInjectedBundleClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); } x_11_1_1; } x11; struct WebContextClient { struct WKContextClientV1 { struct WKContextClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); int (*x_1_2_5)(); } x_12_1_1; } x12; struct WebContextConnectionClient { struct WKContextConnectionClientV0 { struct WKContextConnectionClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); } x_13_1_1; } x13; struct unique_ptr<API::DownloadClient, std::__1::default_delete<API::DownloadClient> > { struct __compressed_pair<API::DownloadClient *, std::__1::default_delete<API::DownloadClient> > { struct DownloadClient {} *x_1_2_1; } x_14_1_1; } x14; struct unique_ptr<API::LegacyContextHistoryClient, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct __compressed_pair<API::LegacyContextHistoryClient *, std::__1::default_delete<API::LegacyContextHistoryClient> > { struct LegacyContextHistoryClient {} *x_1_2_1; } x_15_1_1; } x15; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_16_1_1; } x16; bool x17; struct PlugInAutoStartProvider { struct WebProcessPool {} *x_18_1_1; struct HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_18_1_2; struct HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_3_2_1; } x_18_1_3; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_18_1_4; } x18; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_19_1_1; } x19; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_20_1_1; } x20; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_21_1_1; } x21; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_22_1_1; } x22; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_23_1_1; } x23; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_24_1_1; } x24; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_25_1_1; } x25; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_26_1_1; } x26; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_27_1_1; } x27; bool x28; bool x29; struct Vector<WTF::String, 0, WTF::CrashOnOverflow, 16> { struct String {} *x_30_1_1; unsigned int x_30_1_2; unsigned int x_30_1_3; } x30; struct Vector<std::__1::pair<WTF::String, WTF::RefPtr<API::Object> >, 0, WTF::CrashOnOverflow, 16> { struct pair<WTF::String, WTF::RefPtr<API::Object> > {} *x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; } x31; bool x32; double x33; struct RefPtr<WebKit::WebIconDatabase> { struct WebIconDatabase {} *x_34_1_1; } x34; struct RefPtr<API::WebsiteDataStore> { struct WebsiteDataStore {} *x_35_1_1; } x35; struct HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_36_1_1; } x36; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_37_1_1; } x37; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_38_1_1; } x38; bool x39; bool x40; bool x41; bool x42; struct RefPtr<WebKit::NetworkProcessProxy> { struct NetworkProcessProxy {} *x_43_1_1; } x43; struct RefPtr<WebKit::DatabaseProcessProxy> { struct DatabaseProcessProxy {} *x_44_1_1; } x44; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<API::Dictionary *> > > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_45_1_1; } x45; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_46_1_1; } x46; bool x47; struct RefCounter { struct function<void (bool)>={type=[12C] {} x_48_1_1; struct __base<void (bool)> {} *x_48_1_2; } x48; struct Count {} *x49; }*)arg2 configuration:(struct WebPageConfiguration { struct WebPageGroup {} *x1; struct WebPreferences {} *x2; struct WebUserContentControllerProxy {} *x3; struct VisitedLinkProvider {} *x4; struct WebsiteDataStore {} *x5; struct SessionID { unsigned long long x_6_1_1; } x6; struct WebPageProxy {} *x7; bool x8; bool x9; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_10_1_1; } x10; })arg3 wkView:(id)arg4;
- (id)inputAccessoryView;
- (id)inputDelegate;
- (id)inputView;
- (void)insertText:(id)arg1;
- (id)interactionAssistant;
- (float)inverseScale;
- (BOOL)isAnyTouchOverActiveArea:(id)arg1;
- (BOOL)isAssistingNode;
- (BOOL)isBackground;
- (BOOL)isEditable;
- (BOOL)isPosition:(id)arg1 atBoundary:(int)arg2 inDirection:(int)arg3;
- (BOOL)isPosition:(id)arg1 withinTextUnit:(int)arg2 inDirection:(int)arg3;
- (BOOL)isReplaceAllowed;
- (BOOL)isResigningFirstResponder;
- (BOOL)isShowingInspectorIndication;
- (id)keyCommands;
- (struct CGPoint { float x1; float x2; })lastInteractionLocation;
- (id)markedText;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (void)moveBackward:(unsigned int)arg1;
- (void)moveByOffset:(int)arg1;
- (void)moveForward:(unsigned int)arg1;
- (void)moveSelectionAtBoundary:(int)arg1 inDirection:(int)arg2 completionHandler:(id /* block */)arg3;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (int)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (struct WebPageProxy { int (**x1)(); id x2; int (*x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; struct unique_ptr<API::LoaderClient, std::__1::default_delete<API::LoaderClient> > { struct __compressed_pair<API::LoaderClient *, std::__1::default_delete<API::LoaderClient> > { struct LoaderClient {} *x_1_2_1; } x_7_1_1; } x7; struct unique_ptr<API::PolicyClient, std::__1::default_delete<API::PolicyClient> > { struct __compressed_pair<API::PolicyClient *, std::__1::default_delete<API::PolicyClient> > { struct PolicyClient {} *x_1_2_1; } x_8_1_1; } x8; struct unique_ptr<API::NavigationClient, std::__1::default_delete<API::NavigationClient> > { struct __compressed_pair<API::NavigationClient *, std::__1::default_delete<API::NavigationClient> > { struct NavigationClient {} *x_1_2_1; } x_9_1_1; } x9; struct unique_ptr<API::HistoryClient, std::__1::default_delete<API::HistoryClient> > { struct __compressed_pair<API::HistoryClient *, std::__1::default_delete<API::HistoryClient> > { struct HistoryClient {} *x_1_2_1; } x_10_1_1; } x10; struct unique_ptr<API::FormClient, std::__1::default_delete<API::FormClient> > { struct __compressed_pair<API::FormClient *, std::__1::default_delete<API::FormClient> > { struct FormClient {} *x_1_2_1; } x_11_1_1; } x11; struct unique_ptr<API::UIClient, std::__1::default_delete<API::UIClient> > { struct __compressed_pair<API::UIClient *, std::__1::default_delete<API::UIClient> > { struct UIClient {} *x_1_2_1; } x_12_1_1; } x12; struct unique_ptr<API::FindClient, std::__1::default_delete<API::FindClient> > { struct __compressed_pair<API::FindClient *, std::__1::default_delete<API::FindClient> > { struct FindClient {} *x_1_2_1; } x_13_1_1; } x13; struct WebFindMatchesClient { struct WKPageFindMatchesClientV0 { struct WKPageFindMatchesClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); } x_14_1_1; } x14; struct unique_ptr<API::DiagnosticLoggingClient, std::__1::default_delete<API::DiagnosticLoggingClient> > { struct __compressed_pair<API::DiagnosticLoggingClient *, std::__1::default_delete<API::DiagnosticLoggingClient> > { struct DiagnosticLoggingClient {} *x_1_2_1; } x_15_1_1; } x15; struct unique_ptr<WebKit::WebPageInjectedBundleClient, std::__1::default_delete<WebKit::WebPageInjectedBundleClient> > { struct __compressed_pair<WebKit::WebPageInjectedBundleClient *, std::__1::default_delete<WebKit::WebPageInjectedBundleClient> > { struct WebPageInjectedBundleClient {} *x_1_2_1; } x_16_1_1; } x16; struct unique_ptr<WebKit::WebNavigationState, std::__1::default_delete<WebKit::WebNavigationState> > { struct __compressed_pair<WebKit::WebNavigationState *, std::__1::default_delete<WebKit::WebNavigationState> > { struct WebNavigationState {} *x_1_2_1; } x_17_1_1; } x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_2_1; } x_19_1_1; } x19; struct unique_ptr<WebKit::RemoteScrollingCoordinatorProxy, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct __compressed_pair<WebKit::RemoteScrollingCoordinatorProxy *, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct RemoteScrollingCoordinatorProxy {} *x_1_2_1; } x_20_1_1; } x20; struct Ref<WebKit::WebProcessProxy> { struct WebProcessProxy {} *x_21_1_1; } x21; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_22_1_1; } x22; struct Ref<WebKit::WebPreferences> { struct WebPreferences {} *x_23_1_1; } x23; struct WebProcessLifetimeTracker { struct WebPageProxy {} *x_24_1_1; struct HashSet<WebKit::WebProcessLifetimeObserver *, WTF::PtrHash<WebKit::WebProcessLifetimeObserver *>, WTF::HashTraits<WebKit::WebProcessLifetimeObserver *> > { struct HashTable<WebKit::WebProcessLifetimeObserver *, WebKit::WebProcessLifetimeObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebKit::WebProcessLifetimeObserver *>, WTF::HashTraits<WebKit::WebProcessLifetimeObserver *>, WTF::HashTraits<WebKit::WebProcessLifetimeObserver *> > { struct WebProcessLifetimeObserver {} **x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_2_2_1; } x_24_1_2; } x24; struct RefPtr<WebKit::WebUserContentControllerProxy> { struct WebUserContentControllerProxy {} *x_25_1_1; } x25; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_26_1_1; } x26; struct Ref<WebKit::WebsiteDataStore> { struct WebsiteDataStore {} *x_27_1_1; } x27; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_28_1_1; } x28; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_29_1_1; } x29; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_30_1_1; } x30; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_31_1_1; } x31; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_32_1_1; } x32; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_33_1_1; } x33; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_34_1_1; } x34; bool x35; struct RefPtr<WebKit::WebInspectorProxy> { struct WebInspectorProxy {} *x_36_1_1; } x36; struct RefPtr<WebKit::WebVideoFullscreenManagerProxy> { struct WebVideoFullscreenManagerProxy {} *x_37_1_1; } x37; struct VisibleContentRectUpdateInfo { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_38_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_38_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_38_1_3; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_4_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_4_2_2; } x_38_1_4; unsigned long long x_38_1_5; double x_38_1_6; double x_38_1_7; double x_38_1_8; double x_38_1_9; double x_38_1_10; bool x_38_1_11; bool x_38_1_12; bool x_38_1_13; } x38; bool x39; unsigned long long x40; int x41; bool x42; bool x43; unsigned long long x44; unsigned long long x45; unsigned long long x46; bool x47; struct CallbackMap { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_48_1_1; } x48; struct HashSet<unsigned long long, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long> > { struct HashTable<unsigned long long, unsigned long long, WTF::IdentityExtractor, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<unsigned long long> > { unsigned long long *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_49_1_1; } x49; struct HashSet<WebKit::WebEditCommandProxy *, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct HashTable<WebKit::WebEditCommandProxy *, WebKit::WebEditCommandProxy *, WTF::IdentityExtractor, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct WebEditCommandProxy {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_50_1_1; } x50; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_51_1_1; } x51; struct RefPtr<WebKit::WebPopupMenuProxy> { struct WebPopupMenuProxy {} *x_52_1_1; } x52; struct RefPtr<WebKit::WebHitTestResult> { struct WebHitTestResult {} *x_53_1_1; } x53; struct RefPtr<WebKit::WebOpenPanelResultListenerProxy> { struct WebOpenPanelResultListenerProxy {} *x_54_1_1; } x54; struct GeolocationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_55_1_1; struct WebPageProxy {} *x_55_1_2; } x55; struct NotificationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_56_1_1; struct WebPageProxy {} *x_56_1_2; } x56; struct UserMediaPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::UserMediaPermissionRequestProxy> > {} *x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; } x_1_2_1; } x_57_1_1; struct WebPageProxy {} *x_57_1_2; } x57; unsigned int x58; bool x59; bool x60; bool x61; struct Token<WebKit::ProcessThrottler::ForegroundActivityTokenType> { struct RefPtr<WTF::RefCounter::Count> { struct Count {} *x_1_2_1; } x_62_1_1; } x62; struct Ref<WebKit::WebBackForwardList> { struct WebBackForwardList {} *x_63_1_1; } x63; bool x64; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_65_1_1; } x65; struct EditorState { bool x_66_1_1; bool x_66_1_2; bool x_66_1_3; bool x_66_1_4; bool x_66_1_5; bool x_66_1_6; bool x_66_1_7; bool x_66_1_8; bool x_66_1_9; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_10_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_10_2_2; } x_66_1_10; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_11_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_11_2_2; } x_66_1_11; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_12_2_1; } x_66_1_12; struct PostLayoutData { struct IntRect { struct IntPoint { int x_1_4_1; int x_1_4_2; } x_1_3_1; struct IntSize { int x_2_4_1; int x_2_4_2; } x_1_3_2; } x_13_2_1; struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow, 16> { struct SelectionRect {} *x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; } x_13_2_2; struct IntRect { struct IntPoint { int x_1_4_1; int x_1_4_2; } x_3_3_1; struct IntSize { int x_2_4_1; int x_2_4_2; } x_3_3_2; } x_13_2_3; struct IntRect { struct IntPoint { int x_1_4_1; int x_1_4_2; } x_4_3_1; struct IntSize { int x_2_4_1; int x_2_4_2; } x_4_3_2; } x_13_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_13_2_5; unsigned long long x_13_2_6; int x_13_2_7; int x_13_2_8; int x_13_2_9; unsigned int x_13_2_10; bool x_13_2_11; bool x_13_2_12; } x_66_1_13; } x66; bool x67; double x68; double x69; double x70; double x71; double x72; double x73; float x74; float x75; float x76; int x77; bool x78; bool x79; struct Color { unsigned int x_80_1_1; bool x_80_1_2; } x80; struct Color { unsigned int x_81_1_1; bool x_81_1_2; } x81; bool x82; struct IntSize { int x_83_1_1; int x_83_1_2; } x83; bool x84; int x85; bool x86; double x87; double x88; bool x89; bool x90; bool x91; bool x92; bool x93; bool x94; struct ResourceRequest {} *x95; bool x96; int x97; unsigned long long x98; bool x99; bool x100; int x101; unsigned long long x102; bool x103; struct Deque<WebKit::NativeWebKeyboardEvent, 0> { unsigned int x_104_1_1; unsigned int x_104_1_2; struct VectorBuffer<WebKit::NativeWebKeyboardEvent, 0> { struct NativeWebKeyboardEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_104_1_3; } x104; struct Deque<WebKit::NativeWebWheelEvent, 0> { unsigned int x_105_1_1; unsigned int x_105_1_2; struct VectorBuffer<WebKit::NativeWebWheelEvent, 0> { struct NativeWebWheelEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_105_1_3; } x105; struct Deque<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16> > >, 0> { unsigned int x_106_1_1; unsigned int x_106_1_2; struct VectorBuffer<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16> > >, 0> { struct unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow, 16> > > {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_106_1_3; } x106; bool x107; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_108_1_1; } x108; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_109_1_1; } x109; bool x110; unsigned long long x111; struct SessionID { unsigned long long x_112_1_1; } x112; bool x113; bool x114; bool x115; bool x116; long long x117; bool x118; unsigned int x119; bool x120; struct PageLoadState { struct Vector<WebKit::PageLoadState::Observer *, 0, WTF::CrashOnOverflow, 16> { struct Observer {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; } x_121_1_1; struct WebPageProxy {} *x_121_1_2; struct Data { int x_3_2_1; bool x_3_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_3_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_3_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_3_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_3_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_3_2_7; bool x_3_2_8; bool x_3_2_9; double x_3_2_10; bool x_3_2_11; struct RefPtr<WebKit::WebCertificateInfo> { struct WebCertificateInfo {} *x_12_3_1; } x_3_2_12; } x_121_1_3; struct Data { int x_4_2_1; bool x_4_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_4_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_4_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_4_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_4_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_4_2_7; bool x_4_2_8; bool x_4_2_9; double x_4_2_10; bool x_4_2_11; struct RefPtr<WebKit::WebCertificateInfo> { struct WebCertificateInfo {} *x_12_3_1; } x_4_2_12; } x_121_1_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_5_2_1; } x_121_1_5; bool x_121_1_6; unsigned int x_121_1_7; } x121; bool x122; bool x123; bool x124; bool x125; bool x126; bool x127; bool x128; bool x129; bool x130; bool x131; bool x132; bool x133; bool x134; bool x135; bool x136; bool x137; bool x138; bool x139; unsigned int x140; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_141_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_141_1_2; } x141; unsigned long long x142; unsigned long long x143; bool x144; bool x145; bool x146; bool x147; bool x148; struct IntSize { int x_149_1_1; int x_149_1_2; } x149; float x150; bool x151; bool x152; bool x153; bool x154; bool x155; struct HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WTF::String>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WTF::String> >, WTF::StringHash, WTF::HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WTF::String> {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_156_1_1; } x156; struct unique_ptr<WebCore::RunLoopObserver, std::__1::default_delete<WebCore::RunLoopObserver> > { struct __compressed_pair<WebCore::RunLoopObserver *, std::__1::default_delete<WebCore::RunLoopObserver> > { struct RunLoopObserver {} *x_1_2_1; } x_157_1_1; } x157; struct unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData, std::__1::default_delete<WebKit::RemoteLayerTreeScrollingPerformanceData> > { struct __compressed_pair<WebKit::RemoteLayerTreeScrollingPerformanceData *, std::__1::default_delete<WebKit::RemoteLayerTreeScrollingPerformanceData> > { struct RemoteLayerTreeScrollingPerformanceData {} *x_1_2_1; } x_158_1_1; } x158; bool x159; struct Token<WebKit::UserObservablePageTokenType> { struct RefPtr<WTF::RefCounter::Count> { struct Count {} *x_1_2_1; } x_160_1_1; } x160; struct Token<WebKit::ProcessSuppressionDisabledTokenType> { struct RefPtr<WTF::RefCounter::Count> { struct Count {} *x_1_2_1; } x_161_1_1; } x161; int x162; struct Optional<WebCore::ScrollbarOverlayStyle> { bool x_163_1_1; struct type { unsigned char x_2_2_1[4]; } x_163_1_2; } x163; unsigned long long x164; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_165_1_1; } x165; unsigned int x166; bool x167; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow, 16> { unsigned long long *x_168_1_1; unsigned int x_168_1_2; unsigned int x_168_1_3; } x168; unsigned int x169; }*)page;
- (void)paste:(id)arg1;
- (BOOL)pointIsInAssistedNode:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)pointIsNearMarkedText:(struct CGPoint { float x1; float x2; })arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(int)arg2 offset:(int)arg3;
- (id)positionFromPosition:(id)arg1 offset:(int)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(int)arg2 inDirection:(int)arg3;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_9_1_1; } x9; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_10_1_1; } x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_12_1_1; } x12; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_13_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_13_1_2; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_13_1_3; float x_13_1_4; struct RefPtr<WebCore::Image> { struct Image {} *x_5_2_1; } x_13_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_13_1_6; int x_13_1_7; bool x_13_1_8; } x13; }*)positionInformation;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_9_1_1; } x9; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_10_1_1; } x10; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_11_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_11_1_2; } x11; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_12_1_1; } x12; struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_13_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_13_1_2; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_13_1_3; float x_13_1_4; struct RefPtr<WebCore::Image> { struct Image {} *x_5_2_1; } x_13_1_5; struct RefPtr<WebCore::Image> { struct Image {} *x_6_2_1; } x_13_1_6; int x_13_1_7; bool x_13_1_8; } x13; }*)positionInformationForActionSheetAssistant:(id)arg1;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(int)arg2;
- (id)previousUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(int)arg2 inDirection:(int)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectContainingCaretSelection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (void)replace:(id)arg1;
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceText:(id)arg1 withText:(id)arg2;
- (void)requestAutocorrectionContextWithCompletionHandler:(id /* block */)arg1;
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)requestDictationContext:(id /* block */)arg1;
- (BOOL)requiresAccessoryView;
- (BOOL)requiresKeyEvents;
- (BOOL)resignFirstResponder;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (void)selectPositionAtBoundary:(int)arg1 inDirection:(int)arg2 fromPoint:(struct CGPoint { float x1; float x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)selectPositionAtPoint:(struct CGPoint { float x1; float x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)selectTextWithGranularity:(int)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)selectWordBackward;
- (void)selectWordForReplacement;
- (id)selectedDOMRange;
- (id)selectedText;
- (id)selectedTextRange;
- (int)selectionGranularity;
- (id)selectionInteractionAssistant;
- (struct _NSRange { unsigned int x1; unsigned int x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (void)setBaseWritingDirection:(int)arg1 forRange:(id)arg2;
- (void)setBottomBufferHeight:(float)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(BOOL)arg2;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShowingInspectorIndication:(BOOL)arg1;
- (void)setupInteraction;
- (BOOL)shouldIgnoreWebTouch;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)takeTraitsFrom:(id)arg1;
- (id)textColorForCaretSelection;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textFirstRect;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })textLastRect;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(int)arg2;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)undoManager;
- (void)unmarkText;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })unobscuredContentRect;
- (id)unscaledView;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { float x1; float x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)updateSelectionWithExtentPoint:(struct CGPoint { float x1; float x2; })arg1 withBoundary:(int)arg2 completionHandler:(id /* block */)arg3;
- (void)useSelectionAssistantWithMode:(int)arg1;
- (id)webSelectionAssistant;
- (id)webSelectionRects;
- (void)willMoveToWindow:(id)arg1;
- (void)willStartZoomOrScroll;
- (id)wordContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;

// Image: /System/Library/AccessibilityBundles/QuickSpeak.bundle/QuickSpeak

+ (Class)safeCategoryBaseClass;

- (id)_accessibilityQuickSpeakContent;
- (BOOL)_accessibilityShouldShowSpeakBubble;
- (BOOL)_accessibilityShouldShowSpeakLanguageBubble;
- (BOOL)_accessibilityShouldUpdateQuickSpeakContent;
- (BOOL)_accessibilitySystemShouldShowSpeakBubble;
- (void)accessibilitySpeakSelectionSetContent:(id)arg1;

@end
