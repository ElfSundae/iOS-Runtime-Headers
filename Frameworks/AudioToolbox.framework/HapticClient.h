/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 */

@interface HapticClient : NSObject <NSXPCListenerDelegate> {
    NSArray * _channelKeys;
    unsigned int  _clientID;
    BOOL  _connected;
    NSXPCConnection * _connection;
    BOOL  _prewarmed;
    BOOL  _running;
    <ServerInterface> * _serverDelegate;
    int  _serverProcessID;
    struct HapticSharedMemory { 
        int (**_vptr$SharableMemoryBase)(); 
        bool mIsOwner; 
        bool mWasMapped; 
        unsigned int mSize; 
        void *mBuffer; 
        unsigned int mPort; 
        int mFileDesc; 
        int mSerial; 
        NSObject<OS_xpc_object> *mXPCObject; 
    }  _sharedBuffer;
    struct unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller> > { 
        struct __compressed_pair<ClientSyncCaller *, std::__1::default_delete<ClientSyncCaller> > { 
            struct ClientSyncCaller {} *__first_; 
        } __ptr_; 
    }  _syncCaller;
    unsigned int  _uniqueID;
}

@property (readonly) NSArray *channelKeys;
@property (readonly) unsigned int clientID;
@property BOOL connected;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (readonly) BOOL prewarmed;
@property (readonly) BOOL running;
@property (retain) <ServerInterface> *serverDelegate;
@property int serverProcessID;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)allocateResources:(id /* block */)arg1;
- (id)channelKeys;
- (BOOL)clearEventsFromTime:(double)arg1 channel:(unsigned int)arg2;
- (unsigned int)clientID;
- (BOOL)connected;
- (void)dealloc;
- (void)destroySharedMemory;
- (BOOL)detachHapticSequence:(unsigned int)arg1 atTime:(double)arg2;
- (void)disconnect;
- (void)doInit;
- (BOOL)enableSequenceLooping:(unsigned int)arg1 enable:(BOOL)arg2 error:(id*)arg3;
- (BOOL)finish:(id /* block */)arg1;
- (void)handleConnectionError;
- (void)handleHapticServerCrash;
- (id)initAndReturnError:(id*)arg1;
- (BOOL)loadHapticPreset:(id)arg1 error:(id*)arg2;
- (BOOL)loadHapticSequence:(id)arg1 reply:(id /* block */)arg2;
- (BOOL)prepareHapticSequence:(unsigned int)arg1 error:(id*)arg2;
- (void)prewarm:(id /* block */)arg1;
- (BOOL)prewarmed;
- (void)releaseResources;
- (BOOL)running;
- (BOOL)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned int)arg3 error:(id*)arg4;
- (id)serverDelegate;
- (int)serverProcessID;
- (BOOL)setChannelEventBehavior:(unsigned int)arg1 channel:(unsigned int)arg2;
- (void)setChannelKeys:(id)arg1;
- (void)setConnected:(BOOL)arg1;
- (BOOL)setNumberOfChannels:(unsigned int)arg1 error:(id*)arg2;
- (BOOL)setParameter:(unsigned int)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned int)arg4;
- (void)setServerDelegate:(id)arg1;
- (void)setServerProcessID:(int)arg1;
- (BOOL)setupConnectionAndReturnError:(id*)arg1;
- (long)setupSharedMemory:(id)arg1 size:(unsigned int)arg2;
- (BOOL)startEventAndReturnToken:(unsigned int)arg1 type:(unsigned int)arg2 atTime:(double)arg3 channel:(unsigned int)arg4 eventToken:(unsigned int*)arg5;
- (BOOL)startHapticSequence:(unsigned int)arg1 atTime:(double)arg2 withOffset:(double)arg3;
- (void)startRunning:(id /* block */)arg1;
- (BOOL)stopEventWithToken:(unsigned int)arg1 atTime:(double)arg2 channel:(unsigned int)arg3;
- (BOOL)stopHapticSequence:(unsigned int)arg1 atTime:(double)arg2;
- (void)stopPrewarm;
- (void)stopRunning;

@end
