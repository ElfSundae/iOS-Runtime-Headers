/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI
 */

@interface CNAvatarView : UIControl <CNAvatarCardControllerDelegate, CNCardTransitioning, CNContactChangesObserver> {
    BOOL  _allowsAnimation;
    BOOL  _asynchronousRendering;
    BOOL  _autoUpdateContact;
    CNAvatarCardController * _cardController;
    CNContactStore * _contactStore;
    UINavigationController * _contactViewNavigationController;
    NSArray * _contacts;
    <CNAvatarViewDelegate> * _delegate;
    BOOL  _disableCornerRadiusForAvatar;
    UIView * _forcePressView;
    NSArray * _likenessProviders;
    <CNUIPRLikenessResolver> * _likenessResolver;
    NSArray * _likenessViews;
    NSString * _message;
    int  _monogrammerStyle;
    NSString * _name;
    UIImage * _overrideImage;
    PRLikeness * _overridePRLikeness;
    PRPersonaStore * _personaStore;
    BOOL  _prohibitsPersonaFetch;
    BOOL  _registeredContactAction;
    BOOL  _registeredInNotifier;
    <CNCancelable> * _resolverToken;
    BOOL  _showsActionsOnForcePress;
    BOOL  _showsActionsOnTap;
    BOOL  _showsContactOnTap;
    BOOL  _threeDTouchEnabled;
}

@property (nonatomic, readonly) UIColor *accentColor;
@property (nonatomic, copy) NSArray *actionCategories;
@property (nonatomic) BOOL allowsAnimation;
@property (nonatomic) BOOL asynchronousRendering;
@property (nonatomic) BOOL autoUpdateContact;
@property (nonatomic) BOOL bypassActionValidation;
@property (nonatomic, retain) CNAvatarCardController *cardController;
@property (nonatomic, retain) CNContact *contact;
@property (nonatomic, readonly) CNContactStore *contactStore;
@property (nonatomic, retain) UINavigationController *contactViewNavigationController;
@property (nonatomic, retain) NSArray *contacts;
@property (nonatomic, readonly) UIImage *contentImage;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } contentImageFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CNAvatarViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) BOOL disableCornerRadiusForAvatar;
@property (nonatomic) UIView *forcePressView;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) NSArray *likenessProviders;
@property (nonatomic, retain) <CNUIPRLikenessResolver> *likenessResolver;
@property (nonatomic, copy) NSArray *likenessViews;
@property (nonatomic, copy) NSString *message;
@property (nonatomic) int monogrammerStyle;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) UIImage *overrideImage;
@property (nonatomic, retain) PRLikeness *overridePRLikeness;
@property (nonatomic, readonly) PRPersonaStore *personaStore;
@property (nonatomic) BOOL prohibitsPersonaFetch;
@property BOOL registeredContactAction;
@property BOOL registeredInNotifier;
@property (nonatomic, retain) <CNCancelable> *resolverToken;
@property (nonatomic) BOOL showsActionsOnForcePress;
@property (nonatomic) BOOL showsActionsOnTap;
@property (nonatomic) BOOL showsContactOnTap;
@property (readonly) Class superclass;
@property (getter=isThreeDTouchEnabled, nonatomic) BOOL threeDTouchEnabled;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } transitioningContentFrame;
@property (nonatomic, readonly) UIView *transitioningContentView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } transitioningFrame;
@property (nonatomic, readonly) UIImage *transitioningImage;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } transitioningImageFrame;
@property BOOL transitioningImageVisible;
@property (nonatomic, readonly) UIView *transitioningView;

+ (BOOL)defaultThreeDTouchSupport;
+ (id)descriptorForRequiredKeys;
+ (id)descriptorForRequiredKeysWithThreeDTouchEnabled:(BOOL)arg1;

- (void).cxx_destruct;
- (float)_diameter;
- (void)_resolveContactLikenesses;
- (void)_updateCardActions;
- (void)_updateRegistration;
- (id)accentColor;
- (id)actionCategories;
- (BOOL)allowsAnimation;
- (BOOL)asynchronousRendering;
- (BOOL)autoUpdateContact;
- (id)avatarCardController:(id)arg1 orderedPropertiesForProperties:(id)arg2 category:(id)arg3;
- (int)avatarCardController:(id)arg1 presentationResultForLocation:(struct CGPoint { float x1; float x2; })arg2;
- (BOOL)avatarCardController:(id)arg1 shouldShowContact:(id)arg2;
- (void)avatarCardController:(id)arg1 willShowActions:(id)arg2;
- (void)avatarCardControllerDidDismiss:(id)arg1;
- (void)avatarCardControllerWillDismiss:(id)arg1;
- (BOOL)bypassActionValidation;
- (id)cardController;
- (id)contact;
- (void)contactDidChange;
- (void)contactDidChange:(id)arg1;
- (id)contactStore;
- (id)contactViewNavigationController;
- (id)contacts;
- (id)contentImage;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })contentImageFrame;
- (void)dealloc;
- (id)delegate;
- (id)descriptorForRequiredKeys;
- (void)didMoveToWindow;
- (BOOL)disableCornerRadiusForAvatar;
- (void)dismissContactViewController:(id)arg1;
- (id)forcePressView;
- (id)imageForTransitioningToFullScreen;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithContact:(id)arg1;
- (id)initWithContactStore:(id)arg1 personaStore:(id)arg2 threeDTouchEnabled:(BOOL)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithLikenessResolver:(id)arg1 threeDTouchEnabled:(BOOL)arg2;
- (id)initWithSettings:(id)arg1;
- (BOOL)isThreeDTouchEnabled;
- (void)layoutSubviews;
- (id)likenessProviders;
- (id)likenessResolver;
- (id)likenessViews;
- (id)message;
- (int)monogrammerStyle;
- (id)name;
- (id)overrideImage;
- (id)overridePRLikeness;
- (id)personaStore;
- (id)presentingViewControllerForAvatarCardController:(id)arg1;
- (BOOL)prohibitsPersonaFetch;
- (BOOL)registeredContactAction;
- (BOOL)registeredInNotifier;
- (id)resolverToken;
- (void)setActionCategories:(id)arg1;
- (void)setAllowsAnimation:(BOOL)arg1;
- (void)setAsynchronousRendering:(BOOL)arg1;
- (void)setAutoUpdateContact:(BOOL)arg1;
- (void)setBypassActionValidation:(BOOL)arg1;
- (void)setCardController:(id)arg1;
- (void)setContact:(id)arg1;
- (void)setContactViewNavigationController:(id)arg1;
- (void)setContacts:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableCornerRadiusForAvatar:(BOOL)arg1;
- (void)setForcePressView:(id)arg1;
- (void)setLikenessProviders:(id)arg1;
- (void)setLikenessResolver:(id)arg1;
- (void)setLikenessViews:(id)arg1;
- (void)setMessage:(id)arg1;
- (void)setMonogrammerStyle:(int)arg1;
- (void)setName:(id)arg1;
- (void)setOverrideImage:(id)arg1;
- (void)setOverridePRLikeness:(id)arg1;
- (void)setOverridePRLikeness:(id)arg1 reload:(BOOL)arg2;
- (void)setProhibitsPersonaFetch:(BOOL)arg1;
- (void)setRegisteredContactAction:(BOOL)arg1;
- (void)setRegisteredInNotifier:(BOOL)arg1;
- (void)setResolverToken:(id)arg1;
- (void)setShowsActionsOnForcePress:(BOOL)arg1;
- (void)setShowsActionsOnTap:(BOOL)arg1;
- (void)setShowsContactOnTap:(BOOL)arg1;
- (void)setThreeDTouchEnabled:(BOOL)arg1;
- (void)setTransitioningImageVisible:(BOOL)arg1;
- (void)setupAvatarCardControllerIfNeeded;
- (void)setupSubviews;
- (void)showContact:(id)arg1;
- (BOOL)showsActionsOnForcePress;
- (BOOL)showsActionsOnTap;
- (BOOL)showsContactOnTap;
- (struct CGSize { float x1; float x2; })sizeThatFits:(struct CGSize { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })transitioningContentFrame;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })transitioningFrame;
- (id)transitioningImage;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })transitioningImageFrame;
- (BOOL)transitioningImageVisible;
- (id)transitioningView;
- (void)updateLikenessViewsWithCurrentSize;

@end
