/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@interface PUCropAndStraightenView : UIView <UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } __fittingRegion;
    PLImageGeometry *__imageGeometry;
    UIImageView *__imageView;
    float __preferredZoomScale;
    UIScrollView *__scrollView;
    UIView *__scrollViewReference;
    BOOL __scrollViewTracking;
    BOOL __updatingForCrop;
    BOOL __updatingForFit;
    BOOL __updatingForStraighten;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _canvasFrame;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _cropRect;
    <PUCropAndStraightenViewDelegate> *_delegate;
    UIImage *_image;
    int _orientation;
    float _straightenAngle;
    BOOL _tracking;
}

@property (setter=_setFittingRegion:, nonatomic) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } _fittingRegion;
@property (setter=_setImageGeometry:, nonatomic, retain) PLImageGeometry *_imageGeometry;
@property (setter=_setImageView:, nonatomic, retain) UIImageView *_imageView;
@property (setter=_setPreferredZoomScale:, nonatomic) float _preferredZoomScale;
@property (getter=_isRotationSideways, nonatomic, readonly) BOOL _rotationSideways;
@property (nonatomic, readonly) struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; } _rotationTransform;
@property (setter=_setScrollView:, nonatomic, retain) UIScrollView *_scrollView;
@property (setter=_setScrollViewReference:, nonatomic, retain) UIView *_scrollViewReference;
@property (getter=_isScrollViewTracking, setter=_setScrollViewTracking:, nonatomic) BOOL _scrollViewTracking;
@property (getter=_isUpdatingForCrop, setter=_setUpdatingForCrop:, nonatomic) BOOL _updatingForCrop;
@property (getter=_isUpdatingForFit, setter=_setUpdatingForFit:, nonatomic) BOOL _updatingForFit;
@property (getter=_isUpdatingForStraighten, setter=_setUpdatingForStraighten:, nonatomic) BOOL _updatingForStraighten;
@property (nonatomic) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } canvasFrame;
@property (nonatomic) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } cropRect;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDecelerating, nonatomic, readonly) BOOL decelerating;
@property (nonatomic) <PUCropAndStraightenViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } imageCropRect;
@property (nonatomic) int orientation;
@property (nonatomic) float straightenAngle;
@property (readonly) Class superclass;
@property (getter=isTracking, nonatomic) BOOL tracking;

- (void).cxx_destruct;
- (struct CGSize { float x1; float x2; })_boundingSizeOfStraightenedRectWithSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_croppingRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_fittingRegion;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_fullCropRect;
- (void)_handleTouchingRecognizer:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_imageBounds;
- (id)_imageGeometry;
- (id)_imageView;
- (BOOL)_isRotationSideways;
- (BOOL)_isScrollViewTracking;
- (BOOL)_isUpdatingForCrop;
- (BOOL)_isUpdatingForFit;
- (BOOL)_isUpdatingForStraighten;
- (float)_preferredZoomScale;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })_rotationTransform;
- (id)_scrollView;
- (id)_scrollViewReference;
- (void)_setFittingRegion:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)_setImageGeometry:(id)arg1;
- (void)_setImageView:(id)arg1;
- (void)_setPreferredZoomScale:(float)arg1;
- (void)_setScrollView:(id)arg1;
- (void)_setScrollViewReference:(id)arg1;
- (void)_setScrollViewTracking:(BOOL)arg1;
- (void)_setTracking:(BOOL)arg1;
- (void)_setUpdatingForCrop:(BOOL)arg1;
- (void)_setUpdatingForFit:(BOOL)arg1;
- (void)_setUpdatingForStraighten:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })_sizeRotatedIfNeeded:(struct CGSize { float x1; float x2; })arg1;
- (void)_updateScrollInsets;
- (void)_updateScrollOffset;
- (void)_updateScrollView;
- (void)_updateZoomScale;
- (float)_zoomScaleForImageRegion:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toFit:(BOOL)arg2 viewBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (float)_zoomScaleForImageToFit:(BOOL)arg1 viewBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (float)_zoomScaleToFillCropRect;
- (float)_zoomScaleToFillStraightenedCropRect;
- (float)_zoomScaleToFitCanvas;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })canvasFrame;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })cropRect;
- (id)delegate;
- (void)fitImageRegion:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 inCropRectAnimated:(BOOL)arg2;
- (BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)image;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })imageCropRect;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })imageCropRectForViewRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isDecelerating;
- (BOOL)isTracking;
- (void)layoutSubviews;
- (int)orientation;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(float)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)setCanvasFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setOrientation:(int)arg1;
- (void)setStraightenAngle:(float)arg1;
- (float)straightenAngle;
- (id)viewForZoomingInScrollView:(id)arg1;

@end
