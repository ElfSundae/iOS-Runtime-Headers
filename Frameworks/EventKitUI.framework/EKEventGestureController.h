/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@interface EKEventGestureController : NSObject <UIAlertViewDelegate, UIGestureRecognizerDelegate> {
    id /* block */  _alertSheetCompletionHandler;
    BOOL  _commitBlocked;
    int  _consecutivePageTurnCount;
    EKCalendarDate * _currentDay;
    int  _currentDragType;
    int  _currentDraggingState;
    double  _dateAtFirstTouchPoint;
    <EKEventGestureControllerDelegate> * _delegate;
    BOOL  _dragLockDisabled;
    _UIFeedbackDragSnappingBehavior * _dragSnappingFeedback;
    UILongPressGestureRecognizer * _draggingGestureRecognizer;
    EKDayOccurrenceView * _draggingView;
    EKDayOccurrenceView * _draggingViewSource;
    EKEvent * _event;
    float  _firstContactOfDraggingViewTop;
    struct CGPoint { 
        float x; 
        float y; 
    }  _firstTouchPoint;
    double  _firstTouchTime;
    BOOL  _forcedStart;
    BOOL  _hasStartedScrolling;
    BOOL  _horizontalDragLocked;
    BOOL  _isDragging;
    BOOL  _isInCancelRegion;
    BOOL  _isMultiDayTimedEvent;
    BOOL  _isNewEvent;
    struct CGPoint { 
        float x; 
        float y; 
    }  _latestTouchPoint;
    BOOL  _needsCommit;
    struct CGPoint { 
        float x; 
        float y; 
    }  _previousTouchPoint;
    double  _previousTouchTime;
    float  _previousTouchVelocity;
    NSTimer * _scrollTimer;
    NSString * _sessionIdentifierForDebug;
    UITapGestureRecognizer * _tapGestureRecognizer;
    double  _timeSinceEnteredPageMargin;
    struct CGPoint { 
        float x; 
        float y; 
    }  _touchOffset;
    int  _touchOffsetDays;
    <EKEventGestureControllerUntimedDelegate> * _untimedDelegate;
    BOOL  _usesHorizontalDragLocking;
    BOOL  _usesXDragOffsetInCancelRegion;
}

@property (nonatomic) BOOL commitBlocked;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <EKEventGestureControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) BOOL dragGestureInProgress;
@property (nonatomic, readonly) EKDayOccurrenceView *draggingView;
@property (nonatomic, retain) EKDayOccurrenceView *draggingViewSource;
@property (nonatomic, retain) EKEvent *event;
@property (nonatomic, readonly) struct CGPoint { float x1; float x2; } firstTouchPoint;
@property (readonly) unsigned int hash;
@property (nonatomic, readonly) struct CGPoint { float x1; float x2; } latestTouchPoint;
@property (nonatomic, retain) NSString *sessionIdentifierForDebug;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGPoint { float x1; float x2; } touchOffset;
@property (nonatomic) <EKEventGestureControllerUntimedDelegate> *untimedDelegate;
@property (nonatomic) BOOL usesHorizontalDragLocking;
@property (nonatomic) BOOL usesXDragOffsetInCancelRegion;

- (void).cxx_destruct;
- (float)_Debug_HoursSinceStartOfDay:(double)arg1;
- (BOOL)__timedDelegateBeginEditingSessionAtPoint:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (float)_alignedYOriginForAllDayOccurrence:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 floorAtAllDayRegionBottom:(BOOL)arg3;
- (void)_animateInNewEvent;
- (BOOL)_beginEditingSessionAtPoint:(struct CGPoint { float x1; float x2; })arg1 withEvent:(id)arg2;
- (void)_beginNewDragFromOffStateWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_calculateFrameForDraggingViewIncludingTravelTime:(BOOL)arg1;
- (void)_cancel;
- (float)_capOccurrenceViewYOrigin:(float)arg1;
- (void)_cleanUpAllStateWithTouchPoint:(struct CGPoint { float x1; float x2; })arg1 commit:(BOOL)arg2;
- (void)_commit;
- (void)_commitUntimed;
- (float)_computeHeightForOccurrenceViewOfDuration:(double)arg1 allDay:(BOOL)arg2;
- (struct CGPoint { float x1; float x2; })_computeOriginAtTouchPoint:(struct CGPoint { float x1; float x2; })arg1 forDate:(double)arg2 isAllDay:(BOOL)arg3 allowXOffset:(BOOL)arg4 allowFloorAtRegionBottom:(BOOL)arg5;
- (float)_computeWidthForOccurrenceView;
- (BOOL)_createAndSetUpDraggingViewWithTouchPoint:(struct CGPoint { float x1; float x2; })arg1 event:(id)arg2;
- (id)_createNewEventIfNeededAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)_createSystemPreviewImageForEvent:(id)arg1;
- (void)_createTemporaryView:(id)arg1 animated:(BOOL)arg2;
- (id)_debugStringForDraggingState:(int)arg1;
- (int)_draggingState;
- (BOOL)_flingOrCancelDraggingViewIfNeeded;
- (void)_handleLongPressResponseForOldAPI:(id)arg1;
- (void)_installScrollTimer;
- (BOOL)_isPointInCancelRegion:(struct CGPoint { float x1; float x2; })arg1;
- (void)_longPress:(id)arg1;
- (void)_manageDraggingViewInteractivityForStateChangeFrom:(int)arg1 to:(int)arg2;
- (void)_manageFeedbackForStateChangeFrom:(int)arg1 to:(int)arg2;
- (float)_minimumDuration;
- (void)_removeScrollTimer;
- (void)_resumePreviousDrag;
- (void)_returnDraggingViewToLastCommittedPositionFromTouchPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_scrollTimerFired:(id)arg1;
- (BOOL)_setDraggingState:(int)arg1 withPoint:(struct CGPoint { float x1; float x2; })arg2 event:(id)arg3;
- (void)_setTouchOffsetsFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_setUpAfterForcedStartFromPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)_setUpNewDragGestureHandling;
- (void)_suspendCurrentDrag;
- (void)_tapGesture:(id)arg1;
- (void)_update;
- (void)_updateFlingToCancelParameters;
- (void)_updateHorizontalDragLockForPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)_viewForTracking;
- (void)_writeDraggingChangesToOccurrenceWithTouchPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(int)arg2;
- (BOOL)canProposeNewTime:(id)arg1;
- (BOOL)commitBlocked;
- (void)dealloc;
- (id)delegate;
- (void)didCrossDragBoundary:(int)arg1;
- (BOOL)dragGestureInProgress;
- (id)draggingView;
- (id)draggingViewSource;
- (void)endForcedStart;
- (id)event;
- (struct CGPoint { float x1; float x2; })firstTouchPoint;
- (void)forceStartWithOccurrence:(id)arg1 shouldUpdateViewSource:(BOOL)arg2 shouldUpdateOrigin:(BOOL)arg3;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)initWithView:(id)arg1;
- (void)invalidate;
- (BOOL)isDraggingOccurrence;
- (struct CGPoint { float x1; float x2; })latestTouchPoint;
- (id)originalStartDateForEvent:(id)arg1 includingTravel:(BOOL)arg2;
- (void)promptUserForProposeNewTime:(id)arg1 forEvent:(id)arg2 whenFinished:(id /* block */)arg3;
- (void)promptUserForRecurrenceActionOnOccurrence:(id)arg1 whenFinished:(id /* block */)arg2;
- (void)removeDraggedOccurrence;
- (id)sessionIdentifierForDebug;
- (void)setCommitBlocked:(BOOL)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDraggingViewSource:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setSessionIdentifierForDebug:(id)arg1;
- (void)setUntimedDelegate:(id)arg1;
- (void)setUsesHorizontalDragLocking:(BOOL)arg1;
- (void)setUsesXDragOffsetInCancelRegion:(BOOL)arg1;
- (struct CGPoint { float x1; float x2; })touchOffset;
- (id)untimedDelegate;
- (void)updateDraggingOccurrence;
- (void)updateDraggingOccurrenceForced:(BOOL)arg1 animated:(BOOL)arg2;
- (void)updateDraggingOccurrenceFrame;
- (void)updateDraggingOccurrenceFrameFromSource;
- (void)updateDraggingOccurrenceOrigin;
- (BOOL)usesHorizontalDragLocking;
- (BOOL)usesXDragOffsetInCancelRegion;

@end
