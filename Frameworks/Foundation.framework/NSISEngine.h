/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

@interface NSISEngine : NSObject <NSISVariableDelegate> {
    BOOL  _accessedFromMainThread;
    BOOL  _accumulatingRemovals;
    BOOL  _allowUnoptimizedReads;
    NSThread * _allowedBGThread;
    int  _automaticOptimizationDisabledCount;
    NSMapTable * _brokenConstraintNegativeErrors;
    NSMapTable * _brokenConstraintPositiveErrors;
    unsigned int  _changeCountAtLastOptimization;
    BOOL  _changeNotificationsDirty;
    <NSISEngineDelegate> * _delegate;
    int  _engineDelegateCallsDisabledCount;
    BOOL  _engineNeedsOptimization;
    BOOL  _engineNeedsRebuildFromConstraints;
    struct CGSize { 
        float width; 
        float height; 
    }  _engineScalingCoefficients;
    NSISVariable * _headForObjectiveRow;
    struct __CFDictionary { } * _integralizationAdjustmentsForConstraintMarkers;
    BOOL  _lastOptimizationInvolvedIntegralization;
    BOOL  _optimizationInProgress;
    NSHashTable * _pendingMarkerDelegates;
    NSMutableArray * _pendingRemovals;
    unsigned int  _pivotCount;
    NSMutableDictionary * _recordedOperations;
    BOOL  _revertsAfterUnsatisfiabilityHandler;
    NSMapTable * _rows;
    NSMapTable * _rowsCrossIndex;
    BOOL  _shouldIntegralize;
    unsigned int  _totalChangeCount;
    id /* block */  _unsatisfiabilityHandler;
    unsigned int  _variableChangeCount;
    NSISVariableChangeTracker * _variableChangeTracker;
    NSObject<NSObservable> * _variableChangeTransactionSignal;
    int  _variableDelegateCallsDisabledCount;
    NSMapTable * _variableObservables;
    NSMutableSet * _variablesWithIntegralizationViolations;
    NSMutableArray * _variablesWithValueRestrictionViolations;
}

@property (readonly, copy) NSString *debugDescription;
@property <NSISEngineDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGSize { float x1; float x2; } engineScalingCoefficients;
@property (readonly) unsigned int hash;
@property (retain) NSISVariable *headForObjectiveRow;
@property struct __CFDictionary { }*integralizationAdjustmentsForConstraintMarkers;
@property BOOL revertsAfterUnsatisfiabilityHandler;
@property (retain) NSMapTable *rows;
@property (retain) NSMapTable *rowsCrossIndex;
@property BOOL shouldIntegralize;
@property (readonly) Class superclass;
@property (readonly) unsigned int variableChangeCount;
@property (retain) NSMutableSet *variablesWithIntegralizationViolations;
@property (retain) NSMutableArray *variablesWithValueRestrictionViolations;

+ (BOOL)_dbg_anyEngineContainsVariable:(id)arg1;
+ (void)setLogOnInvalidUseFromBGThread:(BOOL)arg1;

- (id)_brokenConstraintNegativeErrors;
- (id)_brokenConstraintNegativeErrorsIfAvailable;
- (id)_brokenConstraintPositiveErrors;
- (id)_brokenConstraintPositiveErrorsIfAvailable;
- (void)_coreReplaceMarker:(id)arg1 withMarkerPlusDelta:(double)arg2;
- (BOOL)_disambiguateFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg1 forAmbiguousItem:(id)arg2 withOldFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)_flushPendingRemovals;
- (void)_noteValueOfVariable:(id)arg1 changedFrom:(double)arg2;
- (BOOL)_optimizeIfNotDisabled;
- (unsigned int)_optimizeWithoutRebuilding;
- (BOOL)_variableIsAbsentExceptForObjectiveRow:(id)arg1;
- (void)addExpression:(id)arg1 priority:(float)arg2 times:(double)arg3 toObjectiveRowWithHead:(id)arg4 body:(id)arg5;
- (void)addExpression:(id)arg1 times:(double)arg2 toRowWithHead:(id)arg3 body:(id)arg4;
- (void)addVariable:(id)arg1 coefficient:(double)arg2 toRowWithHead:(id)arg3 body:(id)arg4;
- (void)addVariable:(id)arg1 priority:(float)arg2 times:(double)arg3 toObjectiveRowWithHead:(id)arg4 body:(id)arg5;
- (void)addVariableToBeOptimized:(id)arg1 priority:(float)arg2;
- (id)allRowHeads;
- (void)beginRecording;
- (BOOL)bodyVarIsAmbiguous:(id)arg1 withPivotOfOutgoingRowHead:(id*)arg2;
- (id)candidateRedundantConstraints;
- (void)changeVariableToBeOptimized:(id)arg1 fromPriority:(float)arg2 toPriority:(float)arg3;
- (id)chooseHeadForRowBody:(id)arg1 outNewToEngine:(BOOL*)arg2;
- (id)chooseOutgoingRowHeadForIncomingRowHead:(id)arg1 resolveTiesRandomly:(BOOL)arg2;
- (void)constraintDidChangeSuchThatMarker:(id)arg1 shouldBeReplacedByMarkerPlusDelta:(float)arg2;
- (id)constraints;
- (id)constraintsAffectingValueOfVariable:(id)arg1;
- (BOOL)containsConstraintWithMarker:(id)arg1;
- (BOOL)containsVariable:(id)arg1;
- (id)createExpressionBySubstitutingForRowHeadVariablesInExpression:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (struct CGSize { float x1; float x2; })engineScalingCoefficients;
- (void)enumerateOriginalConstraints:(id /* block */)arg1;
- (void)enumerateRows:(id /* block */)arg1;
- (void)enumerateRowsCrossIndex:(id /* block */)arg1;
- (id)errorVariableIntroducedByBreakingConstraintWithMarker:(id)arg1 errorIsPositive:(BOOL)arg2;
- (BOOL)exerciseAmbiguityInVariable:(id)arg1;
- (id)fallbackMarkerForConstraintToBreakInRowWithHead:(id)arg1 body:(id)arg2;
- (id)fixUpValueRestrictionViolationsWithInfeasibilityHandlingBehavior:(int)arg1;
- (void)fixupIntegralizationViolations;
- (id)handleUnsatisfiableRowWithHead:(id)arg1 body:(id)arg2 usingInfeasibilityHandlingBehavior:(int)arg3 mutuallyExclusiveConstraints:(id*)arg4;
- (BOOL)hasObservableForVariable:(id)arg1;
- (BOOL)hasValue:(float*)arg1 forExpression:(id)arg2;
- (BOOL)hasValue:(float*)arg1 forVariable:(id)arg2;
- (id)headForObjectiveRow;
- (BOOL)incoming:(id*)arg1 andOutgoing:(id*)arg2 rowHeadsThatMakeValueAmbiguousForVariable:(id)arg3;
- (id)init;
- (float)integralizationAdjustmentForMarker:(id)arg1;
- (struct __CFDictionary { }*)integralizationAdjustmentsForConstraintMarkers;
- (BOOL)isTrackingVariableChanges;
- (id)markerForBrokenConstraintWithNegativeErrorVar:(id)arg1;
- (id)markerForBrokenConstraintWithPositiveErrorVar:(id)arg1;
- (unsigned int)minimizeConstantInObjectiveRowWithHead:(id)arg1;
- (id)negativeErrorVarForBrokenConstraintWithMarker:(id)arg1;
- (id)nsis_descriptionOfVariable:(id)arg1;
- (BOOL)nsis_shouldIntegralizeVariable:(id)arg1;
- (void)nsis_valueOfVariable:(id)arg1 didChangeInEngine:(id)arg2;
- (BOOL)nsis_valueOfVariableIsUserObservable:(id)arg1;
- (unsigned int)numberOfConstraintsEligibleForAdjustmentToIntegralizeVariable:(id)arg1 ignoringConstraintsWithMarkers:(id)arg2;
- (id)observableForVariable:(id)arg1;
- (unsigned int)optimize;
- (id)outgoingRowHeadForRemovingConstraintWithMarker:(id)arg1;
- (void)performModifications:(id /* block */)arg1 withUnsatisfiableConstraintsHandler:(id /* block */)arg2;
- (void)performPendingChangeNotifications;
- (void)performPendingChangeNotificationsForItem:(id)arg1;
- (unsigned int)pivotCount;
- (void)pivotToMakeBodyVar:(id)arg1 newHeadOfRowWithHead:(id)arg2 andDropRow:(BOOL)arg3;
- (id)positiveErrorVarForBrokenConstraintWithMarker:(id)arg1;
- (void)rawRemoveRowWithHead:(id)arg1;
- (void)rawSetRowWithHead:(id)arg1 body:(id)arg2;
- (void)rebuildFromConstraints;
- (id)recordedCommandsData;
- (void)removeBodyVarFromAllRows:(id)arg1;
- (void)removeConstraintWithMarker:(id)arg1;
- (void)removeObservableForVariable:(id)arg1;
- (void)removeRowWithHead:(id)arg1;
- (void)removeVariableToBeOptimized:(id)arg1 priority:(float)arg2;
- (void)replaceMarker:(id)arg1 withMarkerPlusCoefficient:(double)arg2 timesVariable:(id)arg3;
- (unsigned int)replayCommandsData:(id)arg1 verifyingIntegrity:(BOOL)arg2;
- (BOOL)revertsAfterUnsatisfiabilityHandler;
- (id)rowBodyForHead:(id)arg1;
- (id)rowBodyForNonObjectiveHead:(id)arg1;
- (id)rowBodyForObjectiveHead:(id)arg1;
- (void)rowCrossIndexNoteBodyVariable:(id)arg1 wasAddedToRowWithHead:(id)arg2;
- (void)rowCrossIndexNoteBodyVariable:(id)arg1 wasRemovedFromRowWithHead:(id)arg2;
- (void)rowCrossIndexNoteDroppedBodyVar:(id)arg1;
- (id)rowHeadsForRowsContainingBodyVar:(id)arg1;
- (id)rows;
- (id)rowsCrossIndex;
- (void)sendChangeNotificationForVariable:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEngineScalingCoefficients:(struct CGSize { float x1; float x2; })arg1;
- (void)setHeadForObjectiveRow:(id)arg1;
- (void)setIntegralizationAdjustment:(float)arg1 forMarker:(id)arg2;
- (void)setIntegralizationAdjustmentsForConstraintMarkers:(struct __CFDictionary { }*)arg1;
- (void)setNegativeErrorVar:(id)arg1 forBrokenConstraintWithMarker:(id)arg2;
- (void)setPositiveErrorVar:(id)arg1 forBrokenConstraintWithMarker:(id)arg2;
- (void)setRevertsAfterUnsatisfiabilityHandler:(BOOL)arg1;
- (void)setRowWithHead:(id)arg1 body:(id)arg2;
- (void)setRows:(id)arg1;
- (void)setRowsCrossIndex:(id)arg1;
- (void)setShouldIntegralize:(BOOL)arg1;
- (void)setVariablesWithIntegralizationViolations:(id)arg1;
- (void)setVariablesWithValueRestrictionViolations:(id)arg1;
- (BOOL)shouldIntegralize;
- (void)substituteOutAllOccurencesOfBodyVar:(id)arg1 withExpression:(id)arg2;
- (BOOL)tryAddingDirectly:(id)arg1;
- (BOOL)tryToAddConstraintWithMarker:(id)arg1 expression:(id)arg2 integralizationAdjustment:(float)arg3 mutuallyExclusiveConstraints:(id*)arg4;
- (BOOL)tryToChangeConstraintSuchThatMarker:(id)arg1 isReplacedByMarkerPlusDelta:(float)arg2 undoHandler:(id /* block */)arg3;
- (id)tryToOptimizeReturningMutuallyExclusiveConstraints;
- (BOOL)tryUsingArtificialVariableToAddConstraintWithMarker:(id)arg1 rowBody:(id)arg2 usingInfeasibilityHandlingBehavior:(int)arg3 mutuallyExclusiveConstraints:(id*)arg4;
- (float)valueForExpression:(id)arg1;
- (float)valueForVariable:(id)arg1;
- (double)valueForVariableWithoutIntegralizationAdjustments:(id)arg1;
- (BOOL)valueOfVariableIsAmbiguous:(id)arg1;
- (unsigned int)variableChangeCount;
- (id)variableChangeTransactionSignal;
- (id)variableToWorkOnAmongVariablesWithIntegralizationViolationsIgnoringLostCauses:(id)arg1 varsAlreadyAdjusted:(id)arg2;
- (id)variablesWithIntegralizationViolations;
- (id)variablesWithValueRestrictionViolations;
- (void)verifyInternalIntegrity;
- (void)withAutomaticOptimizationDisabled:(id /* block */)arg1;
- (void)withBehaviors:(unsigned int)arg1 performModifications:(id /* block */)arg2;
- (void)withDelegateCallsDisabled:(id /* block */)arg1;
- (void)withoutOptimizingAtEndRunBlockWithAutomaticOptimizationDisabled:(id /* block */)arg1;

@end
