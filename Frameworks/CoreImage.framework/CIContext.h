/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@interface CIContext : NSObject {
    void *_priv;
}

@property (readonly) struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; /* Warning: unhandled struct encoding: '{map<const CI::Image *' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; unsigned int x52/* : ? */; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; const void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; Class x81; void*x82; unsigned short x83; void*x84; const void*x85; in short x86; int x87; void*x88; unsigned int x89; in float x90; out const void*x91; void*x92; void*x93; int x94; out in unsigned char x95; void*x96; void*x97; BOOL x98; void*x99; int x100; in void*x101; void*x102; void*x103; short x104; void*x105; long x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; id x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; unsigned char x123; const out void*x124; void*x125; int x126; in void*x127; unsigned int x128; void*x129; void*x130; void*x131; void*x132; oneway int x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; id x143; void*x144; void*x145; void*x146; void*x147; void*x148; unsigned int x149; unsigned int x150; in void*x151; void*x152; void*x153; oneway int x154; void*x155; void*x156; void*x157; const void*x158; in short x159; int x160; void*x161; int x162; out in void*x163; void*x164; void*x165; void*x166; void*x167; id x168; void*x169; void*x170; id x171; void*x172; void*x173; void*x174; long doublex175; unsigned char x176; void*x177; unsigned short x178; BOOL x179; void*x180; int x181; void x182; void*x183; void*x184; int x185; out in void*x186; int x187; void*x188; void*x189; const void*x190; void*x191; void*x192; int x193; const void*x194; double x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; id x208; void*x209; void*x210; void*x211; void*x212; void*x213; bool x214; void*x215; void*x216; long x217; int x218; BOOL x219; void*x220; void*x221; int x222; out in void*x223; void*x224; const void*x225; int x226; in void*x227; void*x228; int x229; out in short x230; short x231; void*x232; const void*x233; int x234; out in unsigned short x235; void*x236; const void x237; int x238; BOOL x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; id x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; long doublex266; bycopy void*x267; unsigned long x268; unsigned short x269; unsigned short x270; void*x271; const int x272; void*x273; long x274; int x275; void*x276; void*x277; const void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; id x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; inout unsigned short x294; unsigned char x295; void*x296; unsigned long x297; out BOOL x298; void*x299; long x300; void*x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; id x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; inout unsigned short x323; unsigned long x324; out BOOL x325; void*x326; long x327; int x328; void*x329; void*x330; double x331; unsigned short x332; void*x333; const int x334; in void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; id x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; unsigned short x350; long doublex351; const int x352; long x353; long x354; long doublex355; out void*x356; in void*x357; out void*x358; BOOL x359; void*x360; int x361; out in void*x362; void*x363; void*x364; void*x365; void*x366; id x367; void*x368; }*_internalContext; /* unknown property attribute:  true> >=L}}}B[1024{TreeCacheElement={Hash=[20C]}^{Kernel}}]Idd} */
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;

+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
+ (id)_singletonContext;
+ (id)context;
+ (id)contextWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
+ (id)contextWithEAGLContext:(id)arg1;
+ (id)contextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (id)contextWithMTLDevice:(id)arg1;
+ (id)contextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (id)contextWithOptions:(id)arg1;
+ (struct CGColorSpace { }*)defaultGrayColorSpace;
+ (struct CGColorSpace { }*)defaultRGBColorSpace;
+ (struct CGColorSpace { }*)defaultWorkingColorSpace;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1 glContext:(void*)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalGLContextWithOptions:(id)arg1;

- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })CTM;
- (void)_gpuContextCheck;
- (id)_initWithInternalRepresentation:(void*)arg1;
- (void)_insertEventMarker:(const char *)arg1;
- (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::Image *>, std::__1::allocator<std::__1::pair<const CI::Image *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true>, std::__1::allocator<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::Image *, std::__1::__value_type<const CI::Image *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::Image *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)_internalContext;
- (bool)_isCGBackedContext;
- (bool)_isEAGLBackedContext;
- (struct CGColorSpace { }*)_outputColorSpace;
- (void)abort;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)clearCaches;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (struct CGLayer { }*)createCGLayerWithSize:(struct CGSize { float x1; float x2; })arg1 info:(struct __CFDictionary { }*)arg2;
- (id)createColorCubeDataForFilters:(id)arg1 dimension:(int)arg2;
- (struct __IOSurface { }*)createIOSurface:(id)arg1;
- (struct __IOSurface { }*)createIOSurface:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)dealloc;
- (id)description;
- (void)drawImage:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)drawImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)flatten:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (id)init;
- (id)initWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
- (id)initWithEAGLContext:(id)arg1;
- (id)initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)initWithMTLDevice:(id)arg1 options:(id)arg2;
- (id)initWithOptions:(id)arg1;
- (struct CGSize { float x1; float x2; })inputImageMaximumSize;
- (void)invalidate;
- (void)lock;
- (unsigned long)maximumInputImageSize;
- (unsigned long)maximumOutputImageSize;
- (BOOL)measureRequirementsOf:(id)arg1 query:(int)arg2 :(id*)arg3 results:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4;
- (id)objectForKey:(id)arg1;
- (struct CGSize { float x1; float x2; })outputImageMaximumSize;
- (void)reclaimResources;
- (void)render:(id)arg1;
- (void)render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toIOSurface:(struct __IOSurface { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toMTLTexture:(id)arg2 commandBuffer:(id)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 target:(unsigned int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCTM:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)unlock;
- (struct CGColorSpace { }*)workingColorSpace;

@end
