/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@interface CIContext : NSObject {
    void *_priv;
}

@property (readonly) struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; /* Warning: unhandled struct encoding: '{map<const CI::PromiseImage *' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; int x33; unsigned char x34; void*x35; void*x36; void*x37; SEL x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; out void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; unsigned short x93; void*x94; short x95; void*x96; void*x97; void*x98; void*x99; unsigned long x100; int x101; unsigned int x102/* : ? */; const void*x103; const void*x104; void*x105; void*x106; const int x107; void x108; void*x109; void*x110; void*x111; void*x112; const void*x113; void*x114; void*x115; void*x116; out const void*x117; short x118; void*x119; unsigned int x120; void*x121; unsigned char x122; out const void*x123; void*x124; float x125; const void*x126; void*x127; void*x128; void*x129; out const void*x130; void*x131; unsigned int x132; void*x133; unsigned char x134; out const void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; unsigned short x208; void*x209; short x210; void*x211; void*x212; void*x213; void*x214; unsigned long x215; int x216; unsigned int x217/* : ? */; const void*x218; const void*x219; void*x220; void*x221; const void*x222; void*x223; void*x224; void*x225; out const void*x226; short x227; void*x228; unsigned char x229; out const void*x230; long doublex231; void*x232; void*x233; void*x234; void*x235; float x236; const void*x237; void*x238; void*x239; void*x240; out const void*x241; void*x242; unsigned char x243; out const void*x244; long doublex245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; SEL x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; unsigned short x324; void*x325; short x326; void*x327; void*x328; void*x329; void*x330; unsigned long x331; int x332; unsigned int x333/* : ? */; const void*x334; const void*x335; void*x336; void*x337; const int x338; void x339; void*x340; void*x341; void*x342; void*x343; const void*x344; void*x345; void*x346; void*x347; out const void*x348; short x349; void*x350; unsigned char x351; out void*x352; void*x353; void*x354; in int x355; out in unsigned short x356; void*x357; in BOOL x358; void*x359; float x360; const void*x361; void*x362; void*x363; void*x364; out const void*x365; void*x366; unsigned char x367; out void*x368; void*x369; void*x370; in int x371; out in unsigned short x372; void*x373; in BOOL x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; char *x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; long long x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; }*_internalContext; /* unknown property attribute:  true> >=L}}}B[1024{TreeCacheElement={Hash=[20C]}^{Kernel}}]Idd} */
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;

+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
+ (id)_singletonContext;
+ (id)context;
+ (id)contextWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
+ (id)contextWithEAGLContext:(id)arg1;
+ (id)contextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (id)contextWithMTLDevice:(id)arg1;
+ (id)contextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (id)contextWithOptions:(id)arg1;
+ (struct CGColorSpace { }*)defaultGrayColorSpace;
+ (struct CGColorSpace { }*)defaultRGBColorSpace;
+ (struct CGColorSpace { }*)defaultWorkingColorSpace;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1 glContext:(void*)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalGLContextWithOptions:(id)arg1;

- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })CTM;
- (void)_gpuContextCheck;
- (id)_initWithInternalRepresentation:(void*)arg1;
- (void)_insertEventMarker:(const char *)arg1;
- (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)_internalContext;
- (bool)_isCGBackedContext;
- (bool)_isEAGLBackedContext;
- (struct CGColorSpace { }*)_outputColorSpace;
- (void)abort;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)clearCaches;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (struct CGLayer { }*)createCGLayerWithSize:(struct CGSize { float x1; float x2; })arg1 info:(struct __CFDictionary { }*)arg2;
- (id)createColorCubeDataForFilters:(id)arg1 dimension:(int)arg2;
- (struct __IOSurface { }*)createIOSurface:(id)arg1;
- (struct __IOSurface { }*)createIOSurface:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)dealloc;
- (id)description;
- (void)drawImage:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)drawImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)flatten:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (id)init;
- (id)initWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
- (id)initWithEAGLContext:(id)arg1;
- (id)initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)initWithMTLDevice:(id)arg1 options:(id)arg2;
- (id)initWithOptions:(id)arg1;
- (struct CGSize { float x1; float x2; })inputImageMaximumSize;
- (void)invalidate;
- (void)lock;
- (unsigned long)maximumInputImageSize;
- (unsigned long)maximumOutputImageSize;
- (BOOL)measureRequirementsOf:(id)arg1 query:(int)arg2 :(id*)arg3 results:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4;
- (id)objectForKey:(id)arg1;
- (struct CGSize { float x1; float x2; })outputImageMaximumSize;
- (void)reclaimResources;
- (void)render:(id)arg1;
- (void)render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toIOSurface:(struct __IOSurface { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toMTLTexture:(id)arg2 commandBuffer:(id)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 target:(unsigned int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCTM:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)unlock;
- (struct CGColorSpace { }*)workingColorSpace;

@end
