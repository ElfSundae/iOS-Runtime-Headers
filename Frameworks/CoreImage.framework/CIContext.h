/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage
 */

@interface CIContext : NSObject {
    void *_priv;
}

@property (readonly) struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; /* Warning: unhandled struct encoding: '{map<const CI::PromiseImage *' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; unsigned short x62; void*x63; short x64; void*x65; void*x66; void*x67; void*x68; unsigned long x69; int x70; unsigned int x71/* : ? */; const void*x72; const void*x73; void*x74; void*x75; const int x76; void x77; void*x78; void*x79; void*x80; void*x81; const void*x82; void*x83; void*x84; void*x85; out const void*x86; short x87; void*x88; void*x89; void*x90; void*x91; long x92; void*x93; void*x94; long doublex95; void*x96; void*x97; void*x98; out in void*x99; float x100; const void*x101; void*x102; void*x103; void*x104; out const void*x105; void*x106; void*x107; void*x108; void*x109; long x110; void*x111; void*x112; long doublex113; void*x114; void*x115; void*x116; out in void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; long doublex129; unsigned char x130; out double x131; void*x132; unsigned int x133/* : ? */; long x134; void*x135; inout void*x136; in out unsigned short x137; void*x138; in BOOL x139; unsigned short x140; void*x141; void*x142; void*x143; void*x144; short x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; float x166; void*x167; long long x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; unsigned long x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; unsigned short x284; void*x285; short x286; void*x287; void*x288; void*x289; void*x290; unsigned long x291; int x292; unsigned int x293/* : ? */; const void*x294; const void*x295; void*x296; void*x297; const int x298; void x299; void*x300; void*x301; void*x302; void*x303; const void*x304; void*x305; void*x306; void*x307; out const void*x308; short x309; void*x310; bycopy float x311; float x312; int x313; BOOL x314; void*x315; unsigned int x316; void*x317; void*x318; out const void*x319; void*x320; float x321; const void*x322; void*x323; void*x324; void*x325; out const void*x326; void*x327; bycopy float x328; float x329; int x330; BOOL x331; void*x332; unsigned int x333; void*x334; void*x335; out const void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; long doublex349; unsigned short x350; void*x351; void*x352; long x353; void*x354; unsigned short x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; }*_internalContext; /* unknown property attribute:  true> >=L}}}B[1024{TreeCacheElement={Hash=[20C]}^{Kernel}}]Idd} */
@property (nonatomic, readonly) struct CGColorSpace { }*workingColorSpace;

+ (int)_crashed_because_nonaddressable_memory_was_passed_to_render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
+ (id)_singletonContext;
+ (id)context;
+ (id)contextWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
+ (id)contextWithEAGLContext:(id)arg1;
+ (id)contextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (id)contextWithMTLDevice:(id)arg1;
+ (id)contextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (id)contextWithOptions:(id)arg1;
+ (struct CGColorSpace { }*)defaultGrayColorSpace;
+ (struct CGColorSpace { }*)defaultRGBColorSpace;
+ (struct CGColorSpace { }*)defaultWorkingColorSpace;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalCLContextWithOptions:(id)arg1 glContext:(void*)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithEAGLContext:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalContextWithMTLDevice:(id)arg1 options:(id)arg2;
+ (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)internalGLContextWithOptions:(id)arg1;

- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })CTM;
- (void)_gpuContextCheck;
- (id)_initWithInternalRepresentation:(void*)arg1;
- (void)_insertEventMarker:(const char *)arg1;
- (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; struct CGContext {} *x8; float x9; bool x10; struct CGRect { struct CGPoint { float x_1_2_1; float x_1_2_2; } x_11_1_1; struct CGSize { float x_2_2_1; float x_2_2_2; } x_11_1_2; } x11; struct CGAffineTransform { float x_12_1_1; float x_12_1_2; float x_12_1_3; float x_12_1_4; float x_12_1_5; float x_12_1_6; } x12; int x13; unsigned long x14; unsigned long x15; struct map<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> >, std::__1::less<const CI::PromiseImage *>, std::__1::allocator<std::__1::pair<const CI::PromiseImage *const, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true>, std::__1::allocator<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > > > > { struct __tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const CI::PromiseImage *, std::__1::__value_type<const CI::PromiseImage *, std::__1::vector<CGRect, std::__1::allocator<CGRect> > >, std::__1::less<const CI::PromiseImage *>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_16_1_1; } x16; bool x17; struct TreeCacheElement { struct Hash { unsigned char x_1_2_1[20]; } x_18_1_1; struct Kernel {} *x_18_1_2; } x18[1024]; unsigned int x19; double x20; double x21; }*)_internalContext;
- (bool)_isCGBackedContext;
- (bool)_isEAGLBackedContext;
- (struct CGColorSpace { }*)_outputColorSpace;
- (void)abort;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)clearCaches;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3;
- (struct CGImage { }*)createCGImage:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (struct CGLayer { }*)createCGLayerWithSize:(struct CGSize { float x1; float x2; })arg1 info:(struct __CFDictionary { }*)arg2;
- (id)createColorCubeDataForFilters:(id)arg1 dimension:(int)arg2;
- (struct __IOSurface { }*)createIOSurface:(id)arg1;
- (struct __IOSurface { }*)createIOSurface:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)dealloc;
- (id)description;
- (void)drawImage:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (void)drawImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3;
- (id)flatten:(id)arg1 fromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 format:(int)arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (id)init;
- (id)initWithCGContext:(struct CGContext { }*)arg1 options:(id)arg2;
- (id)initWithEAGLContext:(id)arg1;
- (id)initWithEAGLContext:(id)arg1 options:(id)arg2;
- (id)initWithMTLDevice:(id)arg1 options:(id)arg2;
- (id)initWithOptions:(id)arg1;
- (struct CGSize { float x1; float x2; })inputImageMaximumSize;
- (void)invalidate;
- (void)lock;
- (unsigned long)maximumInputImageSize;
- (unsigned long)maximumOutputImageSize;
- (BOOL)measureRequirementsOf:(id)arg1 query:(int)arg2 :(id*)arg3 results:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg4;
- (id)objectForKey:(id)arg1;
- (struct CGSize { float x1; float x2; })outputImageMaximumSize;
- (void)reclaimResources;
- (void)render:(id)arg1;
- (void)render:(id)arg1 toBitmap:(void*)arg2 rowBytes:(int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 format:(int)arg5 colorSpace:(struct CGColorSpace { }*)arg6;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2;
- (void)render:(id)arg1 toCVPixelBuffer:(struct __CVBuffer { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toIOSurface:(struct __IOSurface { }*)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toMTLTexture:(id)arg2 commandBuffer:(id)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 colorSpace:(struct CGColorSpace { }*)arg4;
- (void)render:(id)arg1 toTexture:(unsigned int)arg2 target:(unsigned int)arg3 bounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)setBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setCTM:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)unlock;
- (struct CGColorSpace { }*)workingColorSpace;

@end
