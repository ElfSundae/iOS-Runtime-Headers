/* Generated by RuntimeBrowser
   Image: /usr/lib/libprequelite.dylib
 */

@interface PQLConnection : NSObject {
    id /* block */ _autoRollbackHandler;
    NSObject<OS_os_transaction> *_batchStarted;
    int _batchingChangesCount;
    int _batchingChangesLimit;
    double _batchingPeriod;
    NSObject<OS_dispatch_source> *_batchingTimer;
    int _cacheSize;
    BOOL _crashIfUsedAfterClose;
    struct sqlite3 { } *_db;
    NSMutableArray *_flushNotifications;
    NSString *_label;
    NSError *_lastError;
    id /* block */ _lockedHandler;
    BOOL _needsFullSync;
    id /* block */ _postFlushHook;
    id /* block */ _preFlushHook;
    struct cache_s { } *_preparedStatements;
    id /* block */ _profilingHook;
    int _savePointLevel;
    NSObject<OS_dispatch_queue> *_serialQueue;
    int _skipBatchStop;
    id /* block */ _sqliteErrorHandler;
    NSMutableArray *_stmtCacheCleanupQueue;
    NSObject<OS_dispatch_source> *_stmtCacheSource;
    int _suspendCaching;
    BOOL _traced;
    NSURL *_url;
    BOOL _useBatching;
    BOOL _useQueue;
    int _vacuumTracker;
}

@property (nonatomic, copy) id /* block */ autoRollbackHandler;
@property (nonatomic, readonly) long long changes;
@property (nonatomic) BOOL crashIfUsedAfterClose;
@property (nonatomic, readonly) struct sqlite3 { }*dbHandle;
@property (nonatomic, readonly) BOOL isBatchSuspended;
@property (nonatomic, readonly) BOOL isInBatch;
@property (nonatomic, readonly) BOOL isInTransaction;
@property (nonatomic, copy) NSString *label;
@property (nonatomic, retain) NSError *lastError;
@property (nonatomic, readonly) long long lastInsertedRowID;
@property (nonatomic, copy) id /* block */ lockedHandler;
@property (nonatomic, copy) id /* block */ postFlushHook;
@property (nonatomic, copy) id /* block */ preFlushHook;
@property (nonatomic, copy) id /* block */ profilingHook;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *serialQueue;
@property (nonatomic, copy) id /* block */ sqliteErrorHandler;
@property (nonatomic) unsigned long statementCacheMaxCount;
@property (nonatomic) unsigned int synchronousMode;
@property (getter=isTraced, nonatomic) BOOL traced;
@property (nonatomic, readonly, copy) NSURL *url;

+ (void)initialize;

- (void).cxx_destruct;
- (void)_batchStartIfNeeded;
- (void)_batchStopIfNeeded;
- (void)_clearStatementCache;
- (void)_createCacheIfNeeded;
- (id)_description:(BOOL)arg1;
- (BOOL)_execute:(id)arg1 mustSucceed:(BOOL)arg2 bindings:(void*)arg3;
- (void)_fireFlushNotifications;
- (BOOL)_fullSync;
- (id)_newStatementForFormat:(id)arg1 arguments:(void*)arg2;
- (BOOL)_performWithFlags:(unsigned int)arg1 action:(id /* block */)arg2 whenFlushed:(id /* block */)arg3;
- (void)_resetState;
- (void)_vacuumIfNeeded;
- (int)_vacuumMode;
- (id /* block */)autoRollbackHandler;
- (BOOL)backupToURL:(id)arg1 progress:(id /* block */)arg2;
- (long long)changes;
- (BOOL)close:(id*)arg1;
- (BOOL)crashIfUsedAfterClose;
- (struct sqlite3 { }*)dbHandle;
- (void)dealloc;
- (id)debugDescription;
- (id)description;
- (BOOL)destroyDatabaseWithError:(id*)arg1;
- (BOOL)execute:(id)arg1;
- (BOOL)execute:(id)arg1 args:(void*)arg2;
- (BOOL)executeRaw:(id)arg1;
- (id)fetch:(id)arg1;
- (id)fetch:(id)arg1 args:(void*)arg2;
- (id)fetchObject:(id /* block */)arg1 sql:(id)arg2;
- (id)fetchObject:(id /* block */)arg1 sql:(id)arg2 args:(void*)arg3;
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3;
- (id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3 args:(void*)arg4;
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2;
- (id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2 args:(void*)arg3;
- (void)flush;
- (void)forceBatchStart;
- (void)groupInBatch:(id /* block */)arg1;
- (BOOL)groupInTransaction:(id /* block */)arg1;
- (id)init;
- (BOOL)isBatchSuspended;
- (BOOL)isInBatch;
- (BOOL)isInTransaction;
- (BOOL)isTraced;
- (id)label;
- (id)lastError;
- (long long)lastInsertedRowID;
- (id /* block */)lockedHandler;
- (void)makeNextFlushFullSync;
- (BOOL)openAtURL:(id)arg1 sharedCache:(BOOL)arg2 error:(id*)arg3;
- (BOOL)openAtURL:(id)arg1 withFlags:(int)arg2 error:(id*)arg3;
- (BOOL)performWithFlags:(unsigned int)arg1 action:(id /* block */)arg2;
- (BOOL)performWithFlags:(unsigned int)arg1 action:(id /* block */)arg2 whenFlushed:(id /* block */)arg3;
- (id /* block */)postFlushHook;
- (id /* block */)preFlushHook;
- (id /* block */)profilingHook;
- (BOOL)registerFunction:(id)arg1 nArgs:(int)arg2 handler:(id /* block */)arg3;
- (id)serialQueue;
- (void)setAutoRollbackHandler:(id /* block */)arg1;
- (void)setCrashIfUsedAfterClose:(BOOL)arg1;
- (void)setLabel:(id)arg1;
- (void)setLastError:(id)arg1;
- (void)setLockedHandler:(id /* block */)arg1;
- (void)setPostFlushHook:(id /* block */)arg1;
- (void)setPreFlushHook:(id /* block */)arg1;
- (void)setProfilingHook:(id /* block */)arg1;
- (void)setSqliteErrorHandler:(id /* block */)arg1;
- (void)setStatementCacheMaxCount:(unsigned long)arg1;
- (void)setSynchronousMode:(unsigned int)arg1;
- (void)setTraced:(BOOL)arg1;
- (BOOL)setUserVersion:(int)arg1;
- (BOOL)setupPragmas;
- (id /* block */)sqliteErrorHandler;
- (unsigned long)statementCacheMaxCount;
- (unsigned int)synchronousMode;
- (id)url;
- (void)useBatchingWithDelay:(double)arg1 changeCount:(int)arg2;
- (void)useSerialQueue;
- (id)userVersion;

@end
